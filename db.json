<<<<<<< HEAD
{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"source/about/curry.jpg","path":"about/curry.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/Android新版本.md","hash":"87698e4cd7ad0cd68de6b84ccfa065874a7e7b0a","modified":1635385828391},{"_id":"source/_posts/ArrayList是线程安全的么.md","hash":"0413c3c32bf7e1b935fde69cfef2893137d6e38c","modified":1634888062244},{"_id":"source/_posts/Compose.md","hash":"b2b08848a4c27aaefa20f8f397fd17047c5dcffd","modified":1635488837877},{"_id":"source/_posts/DataStore.md","hash":"be1871ebd83858e3546608095dbc7558f023d2d6","modified":1635324745108},{"_id":"source/_posts/EACCES-permission-denied-access-usr-local-lib-node-modules.md","hash":"4a06ee2787456622fa128cb7656429db88eb2f14","modified":1633682506359},{"_id":"source/_posts/Error-Spawn-failed.md","hash":"89316659b3212c20a0ac595633c26729e1ef72db","modified":1633682506362},{"_id":"source/_posts/Flow.md","hash":"43987c283d82a2c9da551aa520f03dae3f0679dd","modified":1635404274749},{"_id":"source/_posts/Github-Hexo搭建笔记.md","hash":"114b41f944e49ff2eefed365cec795a0a58fe2bd","modified":1633682506365},{"_id":"source/_posts/Java常见的数据结构.md","hash":"76d9d1ebdede0143f4c7667e7fe07a5fbfbccf9b","modified":1634888202480},{"_id":"source/_posts/T-Unit.md","hash":"dfc79d007340e5657ef3ae8771a097aaf40f3a26","modified":1633682506368},{"_id":"source/_posts/LiveData.md","hash":"343188b9e0f58812eae2d9cfab603fa85fe890fe","modified":1635228051709},{"_id":"source/_posts/TypeError-line-matchAll-is-not-a-function.md","hash":"234da606023ca4740153d0b37b1520419df6e6f4","modified":1633682506371},{"_id":"source/_posts/androidview的绘制流程.md","hash":"710ec99945aef59660e316610ccfdc4592baff73","modified":1638688354739},{"_id":"source/_posts/ViewModel如何数据共享.md","hash":"998f9d1253402eaf53b07cd85a0eac875a54dd3c","modified":1634889193792},{"_id":"source/_posts/android中的System-gc.md","hash":"01233cfb0af793cdc88a5fd1b81e40929d134c44","modified":1633682506411},{"_id":"source/_posts/git-github-com-Permission-denied-publickey.md","hash":"54b4c6dec387b2d2b885f834b560157499c57daa","modified":1633682506422},{"_id":"source/_posts/hexo-YAMLException.md","hash":"0d81416bb531de44e490f689254ecbc06ff1a9b8","modified":1633682506424},{"_id":"source/_posts/hexo增加分类和标签.md","hash":"15c984c5ecea9fe39196ede644ba76966c7ff1fb","modified":1633682506429},{"_id":"source/_posts/hexo多电脑部署.md","hash":"9fd4c0e70a3bae83536765251fd08a576f4af958","modified":1633682506447},{"_id":"source/_posts/事件分发.md","hash":"183bbfa28b7303ce4d03e53862a57aaa761e4bbe","modified":1636440440110},{"_id":"source/_posts/rn入门.md","hash":"a2d96b82d8f07d531866ccd818ea7041c915563f","modified":1634867029622},{"_id":"source/_posts/协程.md","hash":"a942573abcc1a40e9b7f608a3f71f1bc161dbbd3","modified":1635491173974},{"_id":"source/_posts/泛型.md","hash":"e2bc6a8f1e520f6990dc7c21516c8f104f62d53f","modified":1635405172153},{"_id":"source/_posts/自定义View及动画.md","hash":"8d1a0c5fe971067e07011c0da79c801ca565391f","modified":1636592483728},{"_id":"source/_posts/记录.md","hash":"170b0a047f766ee0ac6b1f06e4cb2384f6d485de","modified":1635317358363},{"_id":"source/about/index.md","hash":"bd294d8d81f650ceed8be104bf0e0005658c30b0","modified":1633682506464},{"_id":"source/categories/index.md","hash":"e442818b73ed448354a91aca72caeb04f1107130","modified":1633682506467},{"_id":"source/tags/index.md","hash":"ecbd8a19ae3e7f22ea189ff5cd33a08c81ca537f","modified":1633682506470},{"_id":"source/_posts/Github-Hexo搭建笔记/image-20210923104949941.png","hash":"42d44f40ca13d2016858d4cb760650cb24d483ce","modified":1632365389970},{"_id":"source/_posts/Github-Hexo搭建笔记/image-20210918165516634.png","hash":"593a9f9444f086fe22e16efe3271b8f854f530c6","modified":1631955316637},{"_id":"source/_posts/Github-Hexo搭建笔记/image-20210923105008730.png","hash":"55f1d37ea6f9bed83c029b99bc839c7d5c39a560","modified":1632365408733},{"_id":"source/_posts/hexo-YAMLException/image-20210924150934346.png","hash":"bdd0ac0d2656b30684ce76a09bbc8e44d504a865","modified":1632467374345},{"_id":"source/_posts/hexo-YAMLException/image-20210924150941054.png","hash":"76f7cde90df35b8d78def4cbfab859476bab6747","modified":1632467381052},{"_id":"source/_posts/hexo-YAMLException/image-20210924151455552.png","hash":"c38490f623e69d8ed74106d6805d167c1c04198b","modified":1632467695561},{"_id":"source/_posts/hexo-YAMLException/image-20210924151457951.png","hash":"c38490f623e69d8ed74106d6805d167c1c04198b","modified":1632467697953},{"_id":"source/_posts/记录/image-20211027144900936.png","hash":"18c7c7c9b0660e655d5ab9eab7153f4e26554794","modified":1635317340997},{"_id":"source/about/curry.jpg","hash":"4598d39f13a0c8293367b1bb88b431187ba0d513","modified":1632639472189},{"_id":"source/_posts/index/curry.jpg","hash":"4598d39f13a0c8293367b1bb88b431187ba0d513","modified":1632639472189},{"_id":"source/_posts/TypeError-line-matchAll-is-not-a-function/image-20210925111618240.png","hash":"f677a40ab161565617222f8488c5a78b3aa12114","modified":1632637154629},{"_id":"source/_posts/EACCES-permission-denied-access-usr-local-lib-node-modules/image-20210925105028907.png","hash":"ac2c48973e7f5da724b6d8754f4b403ef775c611","modified":1632637154622},{"_id":"source/_posts/git-github-com-Permission-denied-publickey/image-20210925123231078.png","hash":"938bbaa0455a0d04cf501d4c80dc61d3f53762df","modified":1632637154635},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"afdebdb0be4158c0bf0a408109a5aa42c496dffd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":499162500000},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"1292d92cda574de7be79be9eed71e26b8d78f419","modified":1632638255720},{"_id":"node_modules/hexo-theme-next/package.json","hash":"e34a3bf296a80305bea5fed2922dbff1cb59418a","modified":1631953833617},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"7dc9e9366a19dc3c7be7ff482fbd19c88e620bf5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"42a9b81c5449afa9d67770604478168333c93804","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"3850424dbb23ca0791b35695e24804492d89f925","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"a20ed899d6a797de0b35c46bfd03722023649187","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"b1d24dc9ebc2a3b4a4c5a4f737de2f8ef126cfa9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"a4d42422119a0dacad426f033ea3aaf4e3cf339b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"3221ebcb2f308659ed1a86d1d53978aa62576958","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"92ab6bb3c3122980699f0613dac27a7cabfedecc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"08dac57e15c9f06c7cf54884b045f2362595f9d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"49aa8de07918a11399131dfd703418af3f0a1a19","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"8ed5ab7ec63f9fd5438d1c497cc5f50ae11fcfdf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"5c01e380ba843f8016d8fa4593432430f5bd3584","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"471dcbe22d0dbe043dcf25a1a1c17ca76aa9a548","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"3fc91aba5b17a5ae60b8e04707a7da87db4d0340","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"aafbb3c5c20f525a92716d89ff216c3081d7b4da","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"2e58cb90a77d3dd16e02b8949808b4b16453828c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"2a29bf3692f42f84e8f29314e0fb349f86fc727a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"5a4e5ed613f3990378f3f632e8f16b33374e0095","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"eae7b83f1c711ad2ab3a41d89f517445856ffec8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"bef7791a2e67e79f02076f2a89e1c7f95a83048c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"2421500e447822ef1b6826403a3e1df3345641d7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":499162500000},{"_id":"source/_posts/androidview的绘制流程/源码流程图.png","hash":"a0878e3e262b61cad4f1dcb82ba87e773dbe89e3","modified":1633682506387},{"_id":"public/about/index.html","hash":"deb3dc8322cf7ed3a1f48d5450203f3a4185d53c","modified":1636706025842},{"_id":"public/categories/index.html","hash":"a12f0acd12dfca37d219ab22f7222e87bb7e7741","modified":1636706025842},{"_id":"public/tags/index.html","hash":"194785637eb710a8ee659a86e752b9c528cfd28e","modified":1636706025842},{"_id":"public/2021/11/11/自定义View及动画/index.html","hash":"c865165080d7f28ad5d9aed8d0edb8dcf46e16ab","modified":1636706025842},{"_id":"public/2021/11/08/事件分发/index.html","hash":"b0382cbc1df6ca3d9b9e2d639477c41a8d501f3f","modified":1636706025842},{"_id":"public/2021/10/29/Compose/index.html","hash":"5bcca2ea6d08da065f6f5fda41d2d10cae1f9eed","modified":1636706025842},{"_id":"public/2021/10/28/泛型/index.html","hash":"306605e1b3c6e7947196024106dd0247ca66fc5a","modified":1636706025842},{"_id":"public/2021/10/28/Flow/index.html","hash":"be8abfcd2c2a68f0b51d9de5990702fc7af5bfb4","modified":1636706025842},{"_id":"public/2021/10/28/Android新版本/index.html","hash":"f5ce8949b5785e1daf6e69c9aa757aa06e968258","modified":1636706025842},{"_id":"public/2021/10/22/ArrayList是线程安全的么/index.html","hash":"65465e6e9c5caeed76a18ef2e44d434a9605b7d1","modified":1636706025842},{"_id":"public/2021/10/13/rn入门/index.html","hash":"f9ce5ebdea66352ba58515becf551fe8b6ddc883","modified":1636706025842},{"_id":"public/2021/10/22/Java常见的数据结构/index.html","hash":"e481171c156e3bd5f77761999998345598150959","modified":1636706025842},{"_id":"public/2021/09/26/记录/index.html","hash":"96d1809545dec0bd5e11f2e01afd4b26c71ea42d","modified":1636706025842},{"_id":"public/2021/09/25/git-github-com-Permission-denied-publickey/index.html","hash":"ca6034f117d1481eff47c8b423803302acecf742","modified":1636706025842},{"_id":"public/2021/09/25/TypeError-line-matchAll-is-not-a-function/index.html","hash":"38e0f57feaf3c578c9799a8aeb7732562e9b0f98","modified":1636706025842},{"_id":"public/2021/09/25/Error-Spawn-failed/index.html","hash":"f53524099395452a1feab743853d78ab2ef68b6d","modified":1636706025842},{"_id":"public/2021/09/25/EACCES-permission-denied-access-usr-local-lib-node-modules/index.html","hash":"f173e587221cdd2c9b45382d7a36865c0a534af5","modified":1636706025842},{"_id":"public/2021/09/25/hexo多电脑部署/index.html","hash":"38d158275550c76a239cda546aa955d1736c9d3e","modified":1636706025842},{"_id":"public/2021/09/24/hexo-YAMLException/index.html","hash":"96d9639474fe26e7070e0dcfd8b0baa1f7fe0aad","modified":1636706025842},{"_id":"public/2021/09/24/hexo增加分类和标签/index.html","hash":"747f7973b67112d05940257ce96f10833783ba4e","modified":1636706025842},{"_id":"public/2021/09/24/T-Unit/index.html","hash":"80a960b1c7598a652106f959ea1e3e5a411e74b8","modified":1636706025842},{"_id":"public/archives/index.html","hash":"c911b3840d55388f4acfed6e5e8712e39cb2c79f","modified":1636706025842},{"_id":"public/archives/page/3/index.html","hash":"ac4a3a9afcdfdd319a63eeaf3ecc096d66f615d9","modified":1636706025842},{"_id":"public/archives/page/2/index.html","hash":"55653a8396a1e813db63c57486f852d56a6a9f7f","modified":1636706025842},{"_id":"public/archives/2021/index.html","hash":"9137126e152475dd8d302a8f1f3cfddeba196d07","modified":1636706025842},{"_id":"public/archives/2021/page/2/index.html","hash":"d436433b60a9c43758415848c211d36698de877c","modified":1636706025842},{"_id":"public/archives/2021/page/3/index.html","hash":"e41fde106721dbbc3b377c22099e2e0f483a13dd","modified":1636706025842},{"_id":"public/archives/2021/09/index.html","hash":"a2a294ab5a61d76b170a4b5e827353a290a4bc15","modified":1636706025842},{"_id":"public/archives/2021/09/page/2/index.html","hash":"069751fd2861e5d897de6f98148383947dcc36e6","modified":1636706025842},{"_id":"public/archives/2021/10/index.html","hash":"049bc7f7b517a2d704998e6543e4a2444055b0ff","modified":1636706025842},{"_id":"public/archives/2021/10/page/2/index.html","hash":"f207653fd763f31d38c0591510edd15139bc77c0","modified":1636706025842},{"_id":"public/archives/2021/11/index.html","hash":"762ed17ce0da5de36e4ac9510d6f96ea2f464eec","modified":1636706025842},{"_id":"public/categories/Android/index.html","hash":"73bb1d89979b42aaa42bcd2cfd3ff20e2d5b657f","modified":1636706025842},{"_id":"public/categories/Compose/index.html","hash":"3631825513c818e9232c6a0408b806e7d0f06835","modified":1636706025842},{"_id":"public/categories/Kotlin/index.html","hash":"e36215addf2e66403e77ebe76f30ce3bb7d59592","modified":1636706025842},{"_id":"public/categories/hexo/index.html","hash":"d3472dbd9da1c7352d5844791cae97a119b1d5a6","modified":1636706025842},{"_id":"public/categories/git/index.html","hash":"6f987c61f10a189097a27a9094c831816a2eee7e","modified":1636706025842},{"_id":"public/categories/RN/index.html","hash":"3b3b9f0f4ccee1f305800f5e442d28a047e2a1d7","modified":1636706025842},{"_id":"public/categories/随记/index.html","hash":"ad8900b06645e170c88398ba19e7f0ee88ae76e5","modified":1636706025842},{"_id":"public/tags/Android/index.html","hash":"1f99b92f338fbd38f9e97dff44230fcf4d8348c7","modified":1636706025842},{"_id":"public/tags/Compose/index.html","hash":"ab6ac7b196037d6a5b5c3059b3f9d4058dccfa66","modified":1636706025842},{"_id":"public/tags/Kotlin/index.html","hash":"1ef3c8c9c5a3769b995d8041d1a5bbd0fbd084ef","modified":1636706025842},{"_id":"public/tags/hexo/index.html","hash":"19581e3e35e65909d3d94eec54549079f5f5fa0f","modified":1636706025842},{"_id":"public/tags/Koltin/index.html","hash":"a30917dd1888ce3bbe5d6ae53ba3a691715e4eef","modified":1636706025842},{"_id":"public/tags/git/index.html","hash":"b1643aca5a3359d98d05149736b3e5050cdef0a8","modified":1636706025842},{"_id":"public/tags/RN/index.html","hash":"4aeb9d269a30463216af04b9207b49733d68108b","modified":1636706025842},{"_id":"public/tags/草稿/index.html","hash":"2141bbf6703505d337ca2a408617512bf171fe08","modified":1636706025842},{"_id":"public/2021/10/26/协程/index.html","hash":"f709ea3a5f52f8a7e581e49fb4d426b61de35ff9","modified":1636706025842},{"_id":"public/2021/10/26/DataStore/index.html","hash":"1369e6e35d48401ea0042de31c47e786fecc4014","modified":1636706025842},{"_id":"public/2021/10/25/LiveData/index.html","hash":"88e6fd3c0237d53b4d6e8779648f5ea7849ab87a","modified":1636706025842},{"_id":"public/2021/10/22/ViewModel如何数据共享/index.html","hash":"93d5363ebb9a0f739711eb74165a3541f218e20b","modified":1636706025842},{"_id":"public/2021/10/04/androidview的绘制流程/index.html","hash":"6dd41c2e8956583c05aa846b7a482f8f3d87dbf6","modified":1636706025842},{"_id":"public/2021/09/27/android中的System-gc/index.html","hash":"9bec0cda963cbbec30e70ca9976c86aba11b4c57","modified":1636706025842},{"_id":"public/2021/09/18/Github-Hexo搭建笔记/index.html","hash":"55fa1f28c54dc10e0ed03852e3ca08b36a384570","modified":1636706025842},{"_id":"public/index.html","hash":"9102943c5a0722212d34caa6fd5cbf80274953fa","modified":1636706025842},{"_id":"public/page/2/index.html","hash":"14c01342d81b95bba670b853a96733eafd5c785b","modified":1636706025842},{"_id":"public/page/3/index.html","hash":"0df8d9b264f4df62ac5ad06672b05ada631f6792","modified":1636706025842},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1636706025842},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1636706025842},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1636706025842},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1636706025842},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1636706025842},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1636706025842},{"_id":"public/2021/09/18/Github-Hexo搭建笔记/image-20210923104949941.png","hash":"42d44f40ca13d2016858d4cb760650cb24d483ce","modified":1636706025842},{"_id":"public/2021/09/18/Github-Hexo搭建笔记/image-20210918165516634.png","hash":"593a9f9444f086fe22e16efe3271b8f854f530c6","modified":1636706025842},{"_id":"public/2021/09/24/hexo-YAMLException/image-20210924150934346.png","hash":"bdd0ac0d2656b30684ce76a09bbc8e44d504a865","modified":1636706025842},{"_id":"public/2021/09/24/hexo-YAMLException/image-20210924151457951.png","hash":"c38490f623e69d8ed74106d6805d167c1c04198b","modified":1636706025842},{"_id":"public/2021/09/24/hexo-YAMLException/image-20210924150941054.png","hash":"76f7cde90df35b8d78def4cbfab859476bab6747","modified":1636706025842},{"_id":"public/2021/09/18/Github-Hexo搭建笔记/image-20210923105008730.png","hash":"55f1d37ea6f9bed83c029b99bc839c7d5c39a560","modified":1636706025842},{"_id":"public/2021/09/24/hexo-YAMLException/image-20210924151455552.png","hash":"c38490f623e69d8ed74106d6805d167c1c04198b","modified":1636706025842},{"_id":"public/2021/09/26/记录/image-20211027144900936.png","hash":"18c7c7c9b0660e655d5ab9eab7153f4e26554794","modified":1636706025842},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1636706025842},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1636706025842},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1636706025842},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1636706025842},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1636706025842},{"_id":"public/js/next-boot.js","hash":"b1d24dc9ebc2a3b4a4c5a4f737de2f8ef126cfa9","modified":1636706025842},{"_id":"public/js/utils.js","hash":"a4d42422119a0dacad426f033ea3aaf4e3cf339b","modified":1636706025842},{"_id":"public/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1636706025842},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1636706025842},{"_id":"public/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1636706025842},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1636706025842},{"_id":"public/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":1636706025842},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1636706025842},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1636706025842},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1636706025842},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1636706025842},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1636706025842},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1636706025842},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1636706025842},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1636706025842},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1636706025842},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1636706025842},{"_id":"public/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":1636706025842},{"_id":"public/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1636706025842},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1636706025842},{"_id":"public/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":1636706025842},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1636706025842},{"_id":"public/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1636706025842},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1636706025842},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1636706025842},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1636706025842},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1636706025842},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1636706025842},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1636706025842},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1636706025842},{"_id":"public/css/main.css","hash":"a1f42e8268c0853de6ea6f46eef441a27be0aa13","modified":1636706025842},{"_id":"public/about/curry.jpg","hash":"4598d39f13a0c8293367b1bb88b431187ba0d513","modified":1636706025842},{"_id":"public/2021/09/25/TypeError-line-matchAll-is-not-a-function/image-20210925111618240.png","hash":"f677a40ab161565617222f8488c5a78b3aa12114","modified":1636706025842},{"_id":"public/2021/09/25/EACCES-permission-denied-access-usr-local-lib-node-modules/image-20210925105028907.png","hash":"ac2c48973e7f5da724b6d8754f4b403ef775c611","modified":1636706025842},{"_id":"public/2021/09/25/git-github-com-Permission-denied-publickey/image-20210925123231078.png","hash":"938bbaa0455a0d04cf501d4c80dc61d3f53762df","modified":1636706025842},{"_id":"public/2021/10/04/androidview的绘制流程/源码流程图.png","hash":"a0878e3e262b61cad4f1dcb82ba87e773dbe89e3","modified":1636706025842},{"_id":"source/_posts/小程序.md","hash":"c81fad898f39b3655c164c74dcf2564b4124cf11","modified":1637802301690},{"_id":"source/.DS_Store","hash":"da094dc69ddf5f42ecc9dae20150a6fef77ddb18","modified":1636286733110},{"_id":"source/_posts/IPC.md","hash":"4e6a6b60e707688c82b192a24c00c9408013c2dc","modified":1638688354739},{"_id":"source/_posts/设计模式.md","hash":"062af97e9949e860b76408473c062283c8f7bcac","modified":1638688354740}],"Category":[{"name":"Android","_id":"ckvw4ieou00047wgsg3xz6h0n"},{"name":"Compose","_id":"ckvw4iep2000f7wgsf9q42hkc"},{"name":"Kotlin","_id":"ckvw4iep6000m7wgscsgg20co"},{"name":"hexo","_id":"ckvw4iep9000t7wgs0wlg7px5"},{"name":"git","_id":"ckvw4iepk001p7wgsfn7m6e9j"},{"name":"RN","_id":"ckvw4iepp00207wgs0b61ht7o"},{"name":"随记","_id":"ckvw4iepx002j7wgs3gdy8jdp"},{"name":"wechat","_id":"ckwe9ztws00011kgs6oucbiql"},{"name":"java","_id":"ckwswsb2y0003pf3qhmvy6fbf"}],"Data":[],"Page":[{"title":"0.0","date":"2021-09-26T06:39:54.000Z","_content":"\n![curry](curry.jpg)\n\n","source":"about/index.md","raw":"---\ntitle: \"0.0\"\ndate: 2021-09-26 14:39:54\n---\n\n![curry](curry.jpg)\n\n","updated":"2021-10-08T08:41:46.464Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckvw4ieon00007wgsfzqv4t5b","content":"<p><img src=\"/about/curry.jpg\" alt=\"curry\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/about/curry.jpg\" alt=\"curry\"></p>\n"},{"title":"分类","date":"2021-09-24T06:41:08.000Z","type":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-09-24 14:41:08\ntype: categories\n---\n\n","updated":"2021-10-08T08:41:46.467Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckvw4ieor00027wgsax16hi8b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2021-09-24T06:43:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-09-24 14:43:00\ntype: tags\n---\n","updated":"2021-10-08T08:41:46.470Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckvw4ieov00067wgs9i30hkkr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android新版本","date":"2021-10-28T01:19:29.000Z","_content":"\n#### **Android 12**\n\n- 启动画面API（引入了新的应用启动动画，包括启动时的进入应用运动、显示应用图标的启动画面，以及向应用本身的过渡）\n- 蓝牙权限变更，不再需要访问设备位置信息（ 引入了 [`BLUETOOTH_SCAN`](https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_SCAN)、[`BLUETOOTH_ADVERTISE`](https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_ADVERTISE) 和 [`BLUETOOTH_CONNECT`](https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_CONNECT) 权限）\n- 支持[AVIF](https://jakearchibald.com/2020/avif-has-landed/)图片\n- 圆角API，可以避免界面元素在带有圆角的屏幕上被截断。\n\n更多变更可查看[官网](https://developer.android.google.cn/about/versions/12/features)\n\n","source":"_posts/Android新版本.md","raw":"---\ntitle: Android新版本\ndate: 2021-10-28 09:19:29\ntags: Android\ncategories: Android\n---\n\n#### **Android 12**\n\n- 启动画面API（引入了新的应用启动动画，包括启动时的进入应用运动、显示应用图标的启动画面，以及向应用本身的过渡）\n- 蓝牙权限变更，不再需要访问设备位置信息（ 引入了 [`BLUETOOTH_SCAN`](https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_SCAN)、[`BLUETOOTH_ADVERTISE`](https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_ADVERTISE) 和 [`BLUETOOTH_CONNECT`](https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_CONNECT) 权限）\n- 支持[AVIF](https://jakearchibald.com/2020/avif-has-landed/)图片\n- 圆角API，可以避免界面元素在带有圆角的屏幕上被截断。\n\n更多变更可查看[官网](https://developer.android.google.cn/about/versions/12/features)\n\n","slug":"Android新版本","published":1,"updated":"2021-10-28T01:50:28.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4ieoo00017wgshrtbb4vf","content":"<h4 id=\"Android-12\"><a href=\"#Android-12\" class=\"headerlink\" title=\"Android 12\"></a><strong>Android 12</strong></h4><ul>\n<li>启动画面API（引入了新的应用启动动画，包括启动时的进入应用运动、显示应用图标的启动画面，以及向应用本身的过渡）</li>\n<li>蓝牙权限变更，不再需要访问设备位置信息（ 引入了 <a href=\"https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_SCAN\"><code>BLUETOOTH_SCAN</code></a>、<a href=\"https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_ADVERTISE\"><code>BLUETOOTH_ADVERTISE</code></a> 和 <a href=\"https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_CONNECT\"><code>BLUETOOTH_CONNECT</code></a> 权限）</li>\n<li>支持<a href=\"https://jakearchibald.com/2020/avif-has-landed/\">AVIF</a>图片</li>\n<li>圆角API，可以避免界面元素在带有圆角的屏幕上被截断。</li>\n</ul>\n<p>更多变更可查看<a href=\"https://developer.android.google.cn/about/versions/12/features\">官网</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Android-12\"><a href=\"#Android-12\" class=\"headerlink\" title=\"Android 12\"></a><strong>Android 12</strong></h4><ul>\n<li>启动画面API（引入了新的应用启动动画，包括启动时的进入应用运动、显示应用图标的启动画面，以及向应用本身的过渡）</li>\n<li>蓝牙权限变更，不再需要访问设备位置信息（ 引入了 <a href=\"https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_SCAN\"><code>BLUETOOTH_SCAN</code></a>、<a href=\"https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_ADVERTISE\"><code>BLUETOOTH_ADVERTISE</code></a> 和 <a href=\"https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_CONNECT\"><code>BLUETOOTH_CONNECT</code></a> 权限）</li>\n<li>支持<a href=\"https://jakearchibald.com/2020/avif-has-landed/\">AVIF</a>图片</li>\n<li>圆角API，可以避免界面元素在带有圆角的屏幕上被截断。</li>\n</ul>\n<p>更多变更可查看<a href=\"https://developer.android.google.cn/about/versions/12/features\">官网</a></p>\n"},{"title":"ArrayList是线程安全的么","date":"2021-10-22T02:56:58.000Z","_content":"\nhttps://www.cnblogs.com/skywang12345/p/java_threads_category.html\nhttps://blog.csdn.net/u010416101/article/details/88720974\n\n","source":"_posts/ArrayList是线程安全的么.md","raw":"title:  ArrayList是线程安全的么\ndate: 2021-10-22 10:56:58\ntags: Android\ncategories: Android\n\n------\n\nhttps://www.cnblogs.com/skywang12345/p/java_threads_category.html\nhttps://blog.csdn.net/u010416101/article/details/88720974\n\n","slug":"ArrayList是线程安全的么","published":1,"updated":"2021-10-22T07:34:22.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4ieos00037wgsbaz748hj","content":"<p><a href=\"https://www.cnblogs.com/skywang12345/p/java_threads_category.html\">https://www.cnblogs.com/skywang12345/p/java_threads_category.html</a><br><a href=\"https://blog.csdn.net/u010416101/article/details/88720974\">https://blog.csdn.net/u010416101/article/details/88720974</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/skywang12345/p/java_threads_category.html\">https://www.cnblogs.com/skywang12345/p/java_threads_category.html</a><br><a href=\"https://blog.csdn.net/u010416101/article/details/88720974\">https://blog.csdn.net/u010416101/article/details/88720974</a></p>\n"},{"title":"Compose","date":"2021-10-29T06:25:26.000Z","_content":"\nCompose 声明式UI ，自动更新数据、界面\n","source":"_posts/Compose.md","raw":"---\ntitle: Compose\ndate: 2021-10-29 14:25:26\ntags: Compose\ncategories: Compose\n\n---\n\nCompose 声明式UI ，自动更新数据、界面\n","slug":"Compose","published":1,"updated":"2021-10-29T06:27:17.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4ieow00077wgs2ljd0qrv","content":"<p>Compose 声明式UI ，自动更新数据、界面</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Compose 声明式UI ，自动更新数据、界面</p>\n"},{"title":"DataStore","date":"2021-10-26T06:27:23.000Z","_content":"\n> DataStore 提供了一种安全且持久的方式来存储少量数据，例如首选项和应用程序状态。 它不支持部分更新：如果任何字段被修改，整个对象将被序列化并持久化到磁盘。 如果您想要部分更新，请考虑使用 Room API (SQLite)。\n> DataStore 提供 ACID 保证。 它是线程安全的，并且是非阻塞的。 特别是，它解决了 SharedPreferences API 的这些设计缺陷：\n>\n> - 同步 API 鼓励 StrictMode 违规\n> - apply() 和 commit() 没有发出错误信号的机制\n> - apply() 将阻塞 fsync() 上的 UI 线程\n> - 不持久——它可以返回尚未持久化的状态\n> - 没有一致性或事务语义\n> - 解析错误时引发运行时异常\n> - 公开对其内部状态的可变引用\n\n\n\n\n\n记录出现的问题：\n登录页保存登录名和密码；获取时转成了livedata，并观察其数据变化，当点击了登录，会打印两遍！\n\n```kotlin\nval loginName: LiveData<String>? =\n    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(\n        DataStorePreferences.LOGIN_NAME\n    )?.asLiveData()\nval loginPassword: LiveData<String>? =\n    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(\n        DataStorePreferences.LOGIN_PASSWORD\n    )?.asLiveData()\n...\n//点击登录，保存数据\nfun saveUserInfo(username: String, password: String) {\n        viewModelScope.launch {\n            DataStorePreferences(MyApplication.myApplication).setStringValue(\n                key = DataStorePreferences.LOGIN_NAME, value = username\n            )\n            DataStorePreferences(MyApplication.myApplication).setStringValue(\n                key = DataStorePreferences.LOGIN_PASSWORD,\n                value = password\n            )\n        }\n    }\n...\nloginViewModel.loginPassword?.observe(this@LoginActivity, Observer {\n            val loginPassword = it ?: return@Observer\n            Log.e(TAG, \"loginPassword: ${loginPassword}\")\n        })\n```\n\n正如DataStore的类注释：`如果任何字段被修改，整个对象将被序列化并持久化到磁盘`，因此对于livedata来说，保存了一遍用户名，保存了一遍密码，认为数据有两次变化，所以会打印两遍；\n\n修改代码如下：\n\n```kotlin\n//保存的时候，一起保存\nsuspend fun setNameAndPassWord(@NotNull name: String, passWord: String) {\n    context?.applicationContext?.dataStore?.edit { settings ->\n        settings.putAll(\n            stringPreferencesKey(LOGIN_NAME) to name,\n            stringPreferencesKey(LOGIN_PASSWORD) to passWord\n        )\n    }\n}\n```\n\n","source":"_posts/DataStore.md","raw":"---\ntitle: DataStore\ndate: 2021-10-26 14:27:23\ntags: Kotlin\ncategories: Kotlin\n\n---\n\n> DataStore 提供了一种安全且持久的方式来存储少量数据，例如首选项和应用程序状态。 它不支持部分更新：如果任何字段被修改，整个对象将被序列化并持久化到磁盘。 如果您想要部分更新，请考虑使用 Room API (SQLite)。\n> DataStore 提供 ACID 保证。 它是线程安全的，并且是非阻塞的。 特别是，它解决了 SharedPreferences API 的这些设计缺陷：\n>\n> - 同步 API 鼓励 StrictMode 违规\n> - apply() 和 commit() 没有发出错误信号的机制\n> - apply() 将阻塞 fsync() 上的 UI 线程\n> - 不持久——它可以返回尚未持久化的状态\n> - 没有一致性或事务语义\n> - 解析错误时引发运行时异常\n> - 公开对其内部状态的可变引用\n\n\n\n\n\n记录出现的问题：\n登录页保存登录名和密码；获取时转成了livedata，并观察其数据变化，当点击了登录，会打印两遍！\n\n```kotlin\nval loginName: LiveData<String>? =\n    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(\n        DataStorePreferences.LOGIN_NAME\n    )?.asLiveData()\nval loginPassword: LiveData<String>? =\n    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(\n        DataStorePreferences.LOGIN_PASSWORD\n    )?.asLiveData()\n...\n//点击登录，保存数据\nfun saveUserInfo(username: String, password: String) {\n        viewModelScope.launch {\n            DataStorePreferences(MyApplication.myApplication).setStringValue(\n                key = DataStorePreferences.LOGIN_NAME, value = username\n            )\n            DataStorePreferences(MyApplication.myApplication).setStringValue(\n                key = DataStorePreferences.LOGIN_PASSWORD,\n                value = password\n            )\n        }\n    }\n...\nloginViewModel.loginPassword?.observe(this@LoginActivity, Observer {\n            val loginPassword = it ?: return@Observer\n            Log.e(TAG, \"loginPassword: ${loginPassword}\")\n        })\n```\n\n正如DataStore的类注释：`如果任何字段被修改，整个对象将被序列化并持久化到磁盘`，因此对于livedata来说，保存了一遍用户名，保存了一遍密码，认为数据有两次变化，所以会打印两遍；\n\n修改代码如下：\n\n```kotlin\n//保存的时候，一起保存\nsuspend fun setNameAndPassWord(@NotNull name: String, passWord: String) {\n    context?.applicationContext?.dataStore?.edit { settings ->\n        settings.putAll(\n            stringPreferencesKey(LOGIN_NAME) to name,\n            stringPreferencesKey(LOGIN_PASSWORD) to passWord\n        )\n    }\n}\n```\n\n","slug":"DataStore","published":1,"updated":"2021-10-27T08:52:25.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4ieox00087wgsg0ny3vsk","content":"<blockquote>\n<p>DataStore 提供了一种安全且持久的方式来存储少量数据，例如首选项和应用程序状态。 它不支持部分更新：如果任何字段被修改，整个对象将被序列化并持久化到磁盘。 如果您想要部分更新，请考虑使用 Room API (SQLite)。<br>DataStore 提供 ACID 保证。 它是线程安全的，并且是非阻塞的。 特别是，它解决了 SharedPreferences API 的这些设计缺陷：</p>\n<ul>\n<li>同步 API 鼓励 StrictMode 违规</li>\n<li>apply() 和 commit() 没有发出错误信号的机制</li>\n<li>apply() 将阻塞 fsync() 上的 UI 线程</li>\n<li>不持久——它可以返回尚未持久化的状态</li>\n<li>没有一致性或事务语义</li>\n<li>解析错误时引发运行时异常</li>\n<li>公开对其内部状态的可变引用</li>\n</ul>\n</blockquote>\n<p>记录出现的问题：<br>登录页保存登录名和密码；获取时转成了livedata，并观察其数据变化，当点击了登录，会打印两遍！</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> loginName: LiveData&lt;String&gt;? =</span><br><span class=\"line\">    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(</span><br><span class=\"line\">        DataStorePreferences.LOGIN_NAME</span><br><span class=\"line\">    )?.asLiveData()</span><br><span class=\"line\"><span class=\"keyword\">val</span> loginPassword: LiveData&lt;String&gt;? =</span><br><span class=\"line\">    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(</span><br><span class=\"line\">        DataStorePreferences.LOGIN_PASSWORD</span><br><span class=\"line\">    )?.asLiveData()</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//点击登录，保存数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveUserInfo</span><span class=\"params\">(username: <span class=\"type\">String</span>, password: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        viewModelScope.launch &#123;</span><br><span class=\"line\">            DataStorePreferences(MyApplication.myApplication).setStringValue(</span><br><span class=\"line\">                key = DataStorePreferences.LOGIN_NAME, value = username</span><br><span class=\"line\">            )</span><br><span class=\"line\">            DataStorePreferences(MyApplication.myApplication).setStringValue(</span><br><span class=\"line\">                key = DataStorePreferences.LOGIN_PASSWORD,</span><br><span class=\"line\">                value = password</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">loginViewModel.loginPassword?.observe(<span class=\"keyword\">this</span><span class=\"symbol\">@LoginActivity</span>, Observer &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> loginPassword = it ?: <span class=\"keyword\">return</span><span class=\"symbol\">@Observer</span></span><br><span class=\"line\">            Log.e(TAG, <span class=\"string\">&quot;loginPassword: <span class=\"subst\">$&#123;loginPassword&#125;</span>&quot;</span>)</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>正如DataStore的类注释：<code>如果任何字段被修改，整个对象将被序列化并持久化到磁盘</code>，因此对于livedata来说，保存了一遍用户名，保存了一遍密码，认为数据有两次变化，所以会打印两遍；</p>\n<p>修改代码如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//保存的时候，一起保存</span></span><br><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setNameAndPassWord</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> name: <span class=\"type\">String</span>, passWord: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    context?.applicationContext?.dataStore?.edit &#123; settings -&gt;</span><br><span class=\"line\">        settings.putAll(</span><br><span class=\"line\">            stringPreferencesKey(LOGIN_NAME) to name,</span><br><span class=\"line\">            stringPreferencesKey(LOGIN_PASSWORD) to passWord</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>DataStore 提供了一种安全且持久的方式来存储少量数据，例如首选项和应用程序状态。 它不支持部分更新：如果任何字段被修改，整个对象将被序列化并持久化到磁盘。 如果您想要部分更新，请考虑使用 Room API (SQLite)。<br>DataStore 提供 ACID 保证。 它是线程安全的，并且是非阻塞的。 特别是，它解决了 SharedPreferences API 的这些设计缺陷：</p>\n<ul>\n<li>同步 API 鼓励 StrictMode 违规</li>\n<li>apply() 和 commit() 没有发出错误信号的机制</li>\n<li>apply() 将阻塞 fsync() 上的 UI 线程</li>\n<li>不持久——它可以返回尚未持久化的状态</li>\n<li>没有一致性或事务语义</li>\n<li>解析错误时引发运行时异常</li>\n<li>公开对其内部状态的可变引用</li>\n</ul>\n</blockquote>\n<p>记录出现的问题：<br>登录页保存登录名和密码；获取时转成了livedata，并观察其数据变化，当点击了登录，会打印两遍！</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> loginName: LiveData&lt;String&gt;? =</span><br><span class=\"line\">    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(</span><br><span class=\"line\">        DataStorePreferences.LOGIN_NAME</span><br><span class=\"line\">    )?.asLiveData()</span><br><span class=\"line\"><span class=\"keyword\">val</span> loginPassword: LiveData&lt;String&gt;? =</span><br><span class=\"line\">    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(</span><br><span class=\"line\">        DataStorePreferences.LOGIN_PASSWORD</span><br><span class=\"line\">    )?.asLiveData()</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//点击登录，保存数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveUserInfo</span><span class=\"params\">(username: <span class=\"type\">String</span>, password: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        viewModelScope.launch &#123;</span><br><span class=\"line\">            DataStorePreferences(MyApplication.myApplication).setStringValue(</span><br><span class=\"line\">                key = DataStorePreferences.LOGIN_NAME, value = username</span><br><span class=\"line\">            )</span><br><span class=\"line\">            DataStorePreferences(MyApplication.myApplication).setStringValue(</span><br><span class=\"line\">                key = DataStorePreferences.LOGIN_PASSWORD,</span><br><span class=\"line\">                value = password</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">loginViewModel.loginPassword?.observe(<span class=\"keyword\">this</span><span class=\"symbol\">@LoginActivity</span>, Observer &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> loginPassword = it ?: <span class=\"keyword\">return</span><span class=\"symbol\">@Observer</span></span><br><span class=\"line\">            Log.e(TAG, <span class=\"string\">&quot;loginPassword: <span class=\"subst\">$&#123;loginPassword&#125;</span>&quot;</span>)</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>正如DataStore的类注释：<code>如果任何字段被修改，整个对象将被序列化并持久化到磁盘</code>，因此对于livedata来说，保存了一遍用户名，保存了一遍密码，认为数据有两次变化，所以会打印两遍；</p>\n<p>修改代码如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//保存的时候，一起保存</span></span><br><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setNameAndPassWord</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> name: <span class=\"type\">String</span>, passWord: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    context?.applicationContext?.dataStore?.edit &#123; settings -&gt;</span><br><span class=\"line\">        settings.putAll(</span><br><span class=\"line\">            stringPreferencesKey(LOGIN_NAME) to name,</span><br><span class=\"line\">            stringPreferencesKey(LOGIN_PASSWORD) to passWord</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"EACCES: permission denied, access '/usr/local/lib/node_modules'","date":"2021-09-25T02:49:05.000Z","_content":"\n在Mac电脑上，执行`npm install -g hexo`，出现入下的报错：\n\n![image-20210925105028907](image-20210925105028907.png)\n\n提示没有权限；命令前加sudo即可：\n\n```\nsudo hexo install -g \n```\n\n","source":"_posts/EACCES-permission-denied-access-usr-local-lib-node-modules.md","raw":"---\ntitle: 'EACCES: permission denied, access ''/usr/local/lib/node_modules'''\ndate: 2021-09-25 10:49:05\ntags: hexo\ncategories: hexo\n\n---\n\n在Mac电脑上，执行`npm install -g hexo`，出现入下的报错：\n\n![image-20210925105028907](image-20210925105028907.png)\n\n提示没有权限；命令前加sudo即可：\n\n```\nsudo hexo install -g \n```\n\n","slug":"EACCES-permission-denied-access-usr-local-lib-node-modules","published":1,"updated":"2021-10-08T08:41:46.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4ieox00097wgsdyxtc0jn","content":"<p>在Mac电脑上，执行<code>npm install -g hexo</code>，出现入下的报错：</p>\n<p><img src=\"/2021/09/25/EACCES-permission-denied-access-usr-local-lib-node-modules/image-20210925105028907.png\" alt=\"image-20210925105028907\"></p>\n<p>提示没有权限；命令前加sudo即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo hexo install -g </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>在Mac电脑上，执行<code>npm install -g hexo</code>，出现入下的报错：</p>\n<p><img src=\"/2021/09/25/EACCES-permission-denied-access-usr-local-lib-node-modules/image-20210925105028907.png\" alt=\"image-20210925105028907\"></p>\n<p>提示没有权限；命令前加sudo即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo hexo install -g </span><br></pre></td></tr></table></figure>\n\n"},{"title":"Error: Spawn failed","date":"2021-09-25T03:53:45.000Z","_content":"\n执行`hexo deploy`出现如下报错：\n\n```javascript\nfatal: in unpopulated submodule '.deploy_git'\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (/Volumes/curry/blog/node_modules/hexo-util/lib/spawn.js:51:21)\n      at ChildProcess.emit (events.js:400:28)\n      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\n```\n\n**解决方式**\n\n```java\n//删除git提交内容文件夹\nrm -rf .deploy_git/\n\n//依次执行\ngit config --global core.autocrlf false\nhexo clean \nhexo generate   \nhexo deploy\n```\n\n> 执行过以上命令后，可能需要尝试多次`hexo deploy`（实际操作中我尝试了两次 0.0）\n","source":"_posts/Error-Spawn-failed.md","raw":"---\ntitle: 'Error: Spawn failed'\ndate: 2021-09-25 11:53:45\ntags: hexo\ncategories: hexo\n\n---\n\n执行`hexo deploy`出现如下报错：\n\n```javascript\nfatal: in unpopulated submodule '.deploy_git'\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (/Volumes/curry/blog/node_modules/hexo-util/lib/spawn.js:51:21)\n      at ChildProcess.emit (events.js:400:28)\n      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\n```\n\n**解决方式**\n\n```java\n//删除git提交内容文件夹\nrm -rf .deploy_git/\n\n//依次执行\ngit config --global core.autocrlf false\nhexo clean \nhexo generate   \nhexo deploy\n```\n\n> 执行过以上命令后，可能需要尝试多次`hexo deploy`（实际操作中我尝试了两次 0.0）\n","slug":"Error-Spawn-failed","published":1,"updated":"2021-10-08T08:41:46.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep0000d7wgs8d2lc4hr","content":"<p>执行<code>hexo deploy</code>出现如下报错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">&#x27;.deploy_git&#x27;</span></span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  <span class=\"attr\">err</span>: <span class=\"built_in\">Error</span>: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (<span class=\"regexp\">/Volumes/</span>curry/blog/node_modules/hexo-util/lib/spawn.js:<span class=\"number\">51</span>:<span class=\"number\">21</span>)</span><br><span class=\"line\">      at ChildProcess.emit (events.js:<span class=\"number\">400</span>:<span class=\"number\">28</span>)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (internal/child_process.js:<span class=\"number\">277</span>:<span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"number\">128</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something<span class=\"string\">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除git提交内容文件夹</span></span><br><span class=\"line\">rm -rf .deploy_git/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//依次执行</span></span><br><span class=\"line\">git config --global core.autocrlf <span class=\"keyword\">false</span></span><br><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo generate   </span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行过以上命令后，可能需要尝试多次<code>hexo deploy</code>（实际操作中我尝试了两次 0.0）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>执行<code>hexo deploy</code>出现如下报错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">&#x27;.deploy_git&#x27;</span></span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  <span class=\"attr\">err</span>: <span class=\"built_in\">Error</span>: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (<span class=\"regexp\">/Volumes/</span>curry/blog/node_modules/hexo-util/lib/spawn.js:<span class=\"number\">51</span>:<span class=\"number\">21</span>)</span><br><span class=\"line\">      at ChildProcess.emit (events.js:<span class=\"number\">400</span>:<span class=\"number\">28</span>)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (internal/child_process.js:<span class=\"number\">277</span>:<span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"number\">128</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something<span class=\"string\">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除git提交内容文件夹</span></span><br><span class=\"line\">rm -rf .deploy_git/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//依次执行</span></span><br><span class=\"line\">git config --global core.autocrlf <span class=\"keyword\">false</span></span><br><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo generate   </span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行过以上命令后，可能需要尝试多次<code>hexo deploy</code>（实际操作中我尝试了两次 0.0）</p>\n</blockquote>\n"},{"title":"Flow","date":"2021-10-28T06:57:23.000Z","_content":"\nhttps://juejin.cn/post/6963555072814874661\n","source":"_posts/Flow.md","raw":"---\ntitle: Flow\ndate: 2021-10-28 14:57:23\ntags: Koltin\ncategories: Kotlin\n\n---\n\nhttps://juejin.cn/post/6963555072814874661\n","slug":"Flow","published":1,"updated":"2021-10-28T06:57:54.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep2000e7wgsd00neu64","content":"<p><a href=\"https://juejin.cn/post/6963555072814874661\">https://juejin.cn/post/6963555072814874661</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://juejin.cn/post/6963555072814874661\">https://juejin.cn/post/6963555072814874661</a></p>\n"},{"title":"Github+Hexo搭建笔记","date":"2021-09-18T08:51:31.000Z","_content":"\n#### **一. Github**\n\n1. gihub中创建仓库，仓库名为：<github昵称>.github.io\n\n   ![image-20210918165516634](image-20210918165516634.png)\n\n   >2021年8月13日之后github不在支持密码登录，使用**personal access token**替代\n   >\n   >在github的Settings -- Developer settings -- personal access token 中配置\n\n#### **二. Hexo**\n\n1. 安装hexo\n\n   ```javascript\n   npm install -g hexo\n   ```\n\n2. hexo初始化\n\n   ```javascript\n   hexo init\n   ```\n\n3. 本地运行命令\n\n   ```javascript\n   hexo s // hexo server\n   ```\n\n4. 部署到github，打开hexo文件夹中的_config.xml，文末添加deploy的对应内容，参考如下：\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/one-command-deployment\n   deploy:\n     type: git\n     repo: https://github.com/zhengcurry/zhengcurry.github.io\n     branch: master\n   ```\n\n   然后执行\n\n   ```javascript\n   npm install hexo-deployer-git --save\n   ```\n\n   部署：\n\n   ```undefined\n   hexo clean\n   \n   hexo deploy\n   ```\n\n5. 新建文章\n\n   ```\n   hexo new xxxx\n   ```\n\n6. 添加图片\n\n   ```undefined\n   npm install hexo-asset-image --save\n   ```\n\n   hexo文件夹中的_config.xml，把post_asset_folder值改为false\n\n   打开/node_modules/hexo-asset-image/index.js文件，替换如下\n\n   ```bash\n   'use strict';\n   var cheerio = require('cheerio');\n   \n   // http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\n   function getPosition(str, m, i) {\n     return str.split(m, i).join(m).length;\n   }\n   \n   var version = String(hexo.version).split('.');\n   hexo.extend.filter.register('after_post_render', function(data){\n     var config = hexo.config;\n     if(config.post_asset_folder){\n           var link = data.permalink;\n       if(version.length > 0 && Number(version[0]) == 3)\n          var beginPos = getPosition(link, '/', 1) + 1;\n       else\n          var beginPos = getPosition(link, '/', 3) + 1;\n       // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n       var endPos = link.lastIndexOf('/') + 1;\n       link = link.substring(beginPos, endPos);\n   \n       var toprocess = ['excerpt', 'more', 'content'];\n       for(var i = 0; i < toprocess.length; i++){\n         var key = toprocess[i];\n    \n         var $ = cheerio.load(data[key], {\n           ignoreWhitespace: false,\n           xmlMode: false,\n           lowerCaseTags: false,\n           decodeEntities: false\n         });\n   \n         $('img').each(function(){\n           if ($(this).attr('src')){\n               // For windows style path, we replace '\\' to '/'.\n               var src = $(this).attr('src').replace('\\\\', '/');\n               if(!/http[s]*.*|\\/\\/.*/.test(src) &&\n                  !/^\\s*\\//.test(src)) {\n                 // For \"about\" page, the first part of \"src\" can't be removed.\n                 // In addition, to support multi-level local directory.\n                 var linkArray = link.split('/').filter(function(elem){\n                   return elem != '';\n                 });\n                 var srcArray = src.split('/').filter(function(elem){\n                   return elem != '' && elem != '.';\n                 });\n                 if(srcArray.length > 1)\n                   srcArray.shift();\n                 src = srcArray.join('/');\n                 $(this).attr('src', config.root + link + src);\n                 console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n               }\n           }else{\n               console.info&&console.info(\"no src attr, skipped...\");\n               console.info&&console.info($(this));\n           }\n         });\n         data[key] = $.html();\n       }\n     }\n   });\n   ```\n\n   然后即可添加图片，参考[Typora](#Typora)\n\n   \n\n7. 删除文章\n\n   删除本地对应文件，然后执行如下命令\n\n   ```\n   hexo g\n   hexo d\n   ```\n\n####  **Typora**\n\n配置如下，将图片拖拽到md文档中，即可复制到指定目录下：\n\n![image-20210923104949941](image-20210923104949941.png)\n\n在md文档中，直接使用图片名称，预览或发布后即可看到图片\n\n![image-20210923105008730](image-20210923105008730.png)\n\n\n\n\n\n\n\n\n\n\n\n**参考：**\n\nhttps://www.jianshu.com/p/390f202c5b0e\n\nhttps://zhuanlan.zhihu.com/p/155996962\n\nhttps://www.jianshu.com/p/f72aaad7b852\n\n","source":"_posts/Github-Hexo搭建笔记.md","raw":"---\ntitle: Github+Hexo搭建笔记\ndate: 2021-09-18 16:51:31\ntags: hexo\ncategories: hexo\n---\n\n#### **一. Github**\n\n1. gihub中创建仓库，仓库名为：<github昵称>.github.io\n\n   ![image-20210918165516634](image-20210918165516634.png)\n\n   >2021年8月13日之后github不在支持密码登录，使用**personal access token**替代\n   >\n   >在github的Settings -- Developer settings -- personal access token 中配置\n\n#### **二. Hexo**\n\n1. 安装hexo\n\n   ```javascript\n   npm install -g hexo\n   ```\n\n2. hexo初始化\n\n   ```javascript\n   hexo init\n   ```\n\n3. 本地运行命令\n\n   ```javascript\n   hexo s // hexo server\n   ```\n\n4. 部署到github，打开hexo文件夹中的_config.xml，文末添加deploy的对应内容，参考如下：\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/one-command-deployment\n   deploy:\n     type: git\n     repo: https://github.com/zhengcurry/zhengcurry.github.io\n     branch: master\n   ```\n\n   然后执行\n\n   ```javascript\n   npm install hexo-deployer-git --save\n   ```\n\n   部署：\n\n   ```undefined\n   hexo clean\n   \n   hexo deploy\n   ```\n\n5. 新建文章\n\n   ```\n   hexo new xxxx\n   ```\n\n6. 添加图片\n\n   ```undefined\n   npm install hexo-asset-image --save\n   ```\n\n   hexo文件夹中的_config.xml，把post_asset_folder值改为false\n\n   打开/node_modules/hexo-asset-image/index.js文件，替换如下\n\n   ```bash\n   'use strict';\n   var cheerio = require('cheerio');\n   \n   // http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\n   function getPosition(str, m, i) {\n     return str.split(m, i).join(m).length;\n   }\n   \n   var version = String(hexo.version).split('.');\n   hexo.extend.filter.register('after_post_render', function(data){\n     var config = hexo.config;\n     if(config.post_asset_folder){\n           var link = data.permalink;\n       if(version.length > 0 && Number(version[0]) == 3)\n          var beginPos = getPosition(link, '/', 1) + 1;\n       else\n          var beginPos = getPosition(link, '/', 3) + 1;\n       // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n       var endPos = link.lastIndexOf('/') + 1;\n       link = link.substring(beginPos, endPos);\n   \n       var toprocess = ['excerpt', 'more', 'content'];\n       for(var i = 0; i < toprocess.length; i++){\n         var key = toprocess[i];\n    \n         var $ = cheerio.load(data[key], {\n           ignoreWhitespace: false,\n           xmlMode: false,\n           lowerCaseTags: false,\n           decodeEntities: false\n         });\n   \n         $('img').each(function(){\n           if ($(this).attr('src')){\n               // For windows style path, we replace '\\' to '/'.\n               var src = $(this).attr('src').replace('\\\\', '/');\n               if(!/http[s]*.*|\\/\\/.*/.test(src) &&\n                  !/^\\s*\\//.test(src)) {\n                 // For \"about\" page, the first part of \"src\" can't be removed.\n                 // In addition, to support multi-level local directory.\n                 var linkArray = link.split('/').filter(function(elem){\n                   return elem != '';\n                 });\n                 var srcArray = src.split('/').filter(function(elem){\n                   return elem != '' && elem != '.';\n                 });\n                 if(srcArray.length > 1)\n                   srcArray.shift();\n                 src = srcArray.join('/');\n                 $(this).attr('src', config.root + link + src);\n                 console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n               }\n           }else{\n               console.info&&console.info(\"no src attr, skipped...\");\n               console.info&&console.info($(this));\n           }\n         });\n         data[key] = $.html();\n       }\n     }\n   });\n   ```\n\n   然后即可添加图片，参考[Typora](#Typora)\n\n   \n\n7. 删除文章\n\n   删除本地对应文件，然后执行如下命令\n\n   ```\n   hexo g\n   hexo d\n   ```\n\n####  **Typora**\n\n配置如下，将图片拖拽到md文档中，即可复制到指定目录下：\n\n![image-20210923104949941](image-20210923104949941.png)\n\n在md文档中，直接使用图片名称，预览或发布后即可看到图片\n\n![image-20210923105008730](image-20210923105008730.png)\n\n\n\n\n\n\n\n\n\n\n\n**参考：**\n\nhttps://www.jianshu.com/p/390f202c5b0e\n\nhttps://zhuanlan.zhihu.com/p/155996962\n\nhttps://www.jianshu.com/p/f72aaad7b852\n\n","slug":"Github-Hexo搭建笔记","published":1,"updated":"2021-10-08T08:41:46.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep3000j7wgsaz66cf80","content":"<h4 id=\"一-Github\"><a href=\"#一-Github\" class=\"headerlink\" title=\"一. Github\"></a><strong>一. Github</strong></h4><ol>\n<li><p>gihub中创建仓库，仓库名为：&lt;github昵称&gt;.github.io</p>\n<p><img src=\"/2021/09/18/Github-Hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210918165516634.png\" alt=\"image-20210918165516634\"></p>\n<blockquote>\n<p>2021年8月13日之后github不在支持密码登录，使用<strong>personal access token</strong>替代</p>\n<p>在github的Settings – Developer settings – personal access token 中配置</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"二-Hexo\"><a href=\"#二-Hexo\" class=\"headerlink\" title=\"二. Hexo\"></a><strong>二. Hexo</strong></h4><ol>\n<li><p>安装hexo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure></li>\n<li><p>hexo初始化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></li>\n<li><p>本地运行命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s <span class=\"comment\">// hexo server</span></span><br></pre></td></tr></table></figure></li>\n<li><p>部署到github，打开hexo文件夹中的_config.xml，文末添加deploy的对应内容，参考如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/zhengcurry/zhengcurry.github.io</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>然后执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>部署：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></li>\n<li><p>新建文章</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new xxxx</span><br></pre></td></tr></table></figure></li>\n<li><p>添加图片</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n\n<p>hexo文件夹中的_config.xml，把post_asset_folder值改为false</p>\n<p>打开/node_modules/hexo-asset-image/index.js文件，替换如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\">var cheerio = require(<span class=\"string\">&#x27;cheerio&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class=\"line\"><span class=\"keyword\">function</span> getPosition(str, m, i) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> str.split(m, i).join(m).length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var version = String(hexo.version).split(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;after_post_render&#x27;</span>, <span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">  var config = hexo.config;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(config.post_asset_folder)&#123;</span><br><span class=\"line\">        var link = data.permalink;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class=\"line\">       var beginPos = getPosition(link, <span class=\"string\">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">       var beginPos = getPosition(link, <span class=\"string\">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class=\"line\">    // In hexo 3.1.1, the permalink of <span class=\"string\">&quot;about&quot;</span> page is like <span class=\"string\">&quot;.../about/index.html&quot;</span>.</span><br><span class=\"line\">    var endPos = link.lastIndexOf(<span class=\"string\">&#x27;/&#x27;</span>) + 1;</span><br><span class=\"line\">    link = link.substring(beginPos, endPos);</span><br><span class=\"line\"></span><br><span class=\"line\">    var toprocess = [<span class=\"string\">&#x27;excerpt&#x27;</span>, <span class=\"string\">&#x27;more&#x27;</span>, <span class=\"string\">&#x27;content&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class=\"line\">      var key = toprocess[i];</span><br><span class=\"line\"> </span><br><span class=\"line\">      var $ = cheerio.load(data[key], &#123;</span><br><span class=\"line\">        ignoreWhitespace: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        xmlMode: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        lowerCaseTags: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        decodeEntities: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      $(<span class=\"string\">&#x27;img&#x27;</span>).each(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($(this).attr(<span class=\"string\">&#x27;src&#x27;</span>))&#123;</span><br><span class=\"line\">            // For windows style path, we replace <span class=\"string\">&#x27;\\&#x27;</span> to <span class=\"string\">&#x27;/&#x27;</span>.</span><br><span class=\"line\">            var src = $(this).attr(<span class=\"string\">&#x27;src&#x27;</span>).replace(<span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!/http[s]*.*|\\/\\/.*/.<span class=\"built_in\">test</span>(src) &amp;&amp;</span><br><span class=\"line\">               !/^\\s*\\//.<span class=\"built_in\">test</span>(src)) &#123;</span><br><span class=\"line\">              // For <span class=\"string\">&quot;about&quot;</span> page, the first part of <span class=\"string\">&quot;src&quot;</span> can<span class=\"string\">&#x27;t be removed.</span></span><br><span class=\"line\"><span class=\"string\">              // In addition, to support multi-level local directory.</span></span><br><span class=\"line\"><span class=\"string\">              var linkArray = link.split(&#x27;</span>/<span class=\"string\">&#x27;).filter(function(elem)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                return elem != &#x27;</span><span class=\"string\">&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">              &#125;);</span></span><br><span class=\"line\"><span class=\"string\">              var srcArray = src.split(&#x27;</span>/<span class=\"string\">&#x27;).filter(function(elem)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                return elem != &#x27;</span><span class=\"string\">&#x27; &amp;&amp; elem != &#x27;</span>.<span class=\"string\">&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">              &#125;);</span></span><br><span class=\"line\"><span class=\"string\">              if(srcArray.length &gt; 1)</span></span><br><span class=\"line\"><span class=\"string\">                srcArray.shift();</span></span><br><span class=\"line\"><span class=\"string\">              src = srcArray.join(&#x27;</span>/<span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">              $(this).attr(&#x27;</span>src<span class=\"string\">&#x27;, config.root + link + src);</span></span><br><span class=\"line\"><span class=\"string\">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class=\"line\"><span class=\"string\">            console.info&amp;&amp;console.info($(this));</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;);</span></span><br><span class=\"line\"><span class=\"string\">      data[key] = $.html();</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<p>然后即可添加图片，参考<a href=\"#Typora\">Typora</a></p>\n</li>\n<li><p>删除文章</p>\n<p>删除本地对应文件，然后执行如下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a><strong>Typora</strong></h4><p>配置如下，将图片拖拽到md文档中，即可复制到指定目录下：</p>\n<p><img src=\"/2021/09/18/Github-Hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210923104949941.png\" alt=\"image-20210923104949941\"></p>\n<p>在md文档中，直接使用图片名称，预览或发布后即可看到图片</p>\n<p><img src=\"/2021/09/18/Github-Hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210923105008730.png\" alt=\"image-20210923105008730\"></p>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://www.jianshu.com/p/390f202c5b0e\">https://www.jianshu.com/p/390f202c5b0e</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/155996962\">https://zhuanlan.zhihu.com/p/155996962</a></p>\n<p><a href=\"https://www.jianshu.com/p/f72aaad7b852\">https://www.jianshu.com/p/f72aaad7b852</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一-Github\"><a href=\"#一-Github\" class=\"headerlink\" title=\"一. Github\"></a><strong>一. Github</strong></h4><ol>\n<li><p>gihub中创建仓库，仓库名为：&lt;github昵称&gt;.github.io</p>\n<p><img src=\"/2021/09/18/Github-Hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210918165516634.png\" alt=\"image-20210918165516634\"></p>\n<blockquote>\n<p>2021年8月13日之后github不在支持密码登录，使用<strong>personal access token</strong>替代</p>\n<p>在github的Settings – Developer settings – personal access token 中配置</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"二-Hexo\"><a href=\"#二-Hexo\" class=\"headerlink\" title=\"二. Hexo\"></a><strong>二. Hexo</strong></h4><ol>\n<li><p>安装hexo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure></li>\n<li><p>hexo初始化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></li>\n<li><p>本地运行命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s <span class=\"comment\">// hexo server</span></span><br></pre></td></tr></table></figure></li>\n<li><p>部署到github，打开hexo文件夹中的_config.xml，文末添加deploy的对应内容，参考如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/zhengcurry/zhengcurry.github.io</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>然后执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>部署：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></li>\n<li><p>新建文章</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new xxxx</span><br></pre></td></tr></table></figure></li>\n<li><p>添加图片</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n\n<p>hexo文件夹中的_config.xml，把post_asset_folder值改为false</p>\n<p>打开/node_modules/hexo-asset-image/index.js文件，替换如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\">var cheerio = require(<span class=\"string\">&#x27;cheerio&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class=\"line\"><span class=\"keyword\">function</span> getPosition(str, m, i) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> str.split(m, i).join(m).length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var version = String(hexo.version).split(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;after_post_render&#x27;</span>, <span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">  var config = hexo.config;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(config.post_asset_folder)&#123;</span><br><span class=\"line\">        var link = data.permalink;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class=\"line\">       var beginPos = getPosition(link, <span class=\"string\">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">       var beginPos = getPosition(link, <span class=\"string\">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class=\"line\">    // In hexo 3.1.1, the permalink of <span class=\"string\">&quot;about&quot;</span> page is like <span class=\"string\">&quot;.../about/index.html&quot;</span>.</span><br><span class=\"line\">    var endPos = link.lastIndexOf(<span class=\"string\">&#x27;/&#x27;</span>) + 1;</span><br><span class=\"line\">    link = link.substring(beginPos, endPos);</span><br><span class=\"line\"></span><br><span class=\"line\">    var toprocess = [<span class=\"string\">&#x27;excerpt&#x27;</span>, <span class=\"string\">&#x27;more&#x27;</span>, <span class=\"string\">&#x27;content&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class=\"line\">      var key = toprocess[i];</span><br><span class=\"line\"> </span><br><span class=\"line\">      var $ = cheerio.load(data[key], &#123;</span><br><span class=\"line\">        ignoreWhitespace: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        xmlMode: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        lowerCaseTags: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        decodeEntities: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      $(<span class=\"string\">&#x27;img&#x27;</span>).each(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($(this).attr(<span class=\"string\">&#x27;src&#x27;</span>))&#123;</span><br><span class=\"line\">            // For windows style path, we replace <span class=\"string\">&#x27;\\&#x27;</span> to <span class=\"string\">&#x27;/&#x27;</span>.</span><br><span class=\"line\">            var src = $(this).attr(<span class=\"string\">&#x27;src&#x27;</span>).replace(<span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!/http[s]*.*|\\/\\/.*/.<span class=\"built_in\">test</span>(src) &amp;&amp;</span><br><span class=\"line\">               !/^\\s*\\//.<span class=\"built_in\">test</span>(src)) &#123;</span><br><span class=\"line\">              // For <span class=\"string\">&quot;about&quot;</span> page, the first part of <span class=\"string\">&quot;src&quot;</span> can<span class=\"string\">&#x27;t be removed.</span></span><br><span class=\"line\"><span class=\"string\">              // In addition, to support multi-level local directory.</span></span><br><span class=\"line\"><span class=\"string\">              var linkArray = link.split(&#x27;</span>/<span class=\"string\">&#x27;).filter(function(elem)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                return elem != &#x27;</span><span class=\"string\">&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">              &#125;);</span></span><br><span class=\"line\"><span class=\"string\">              var srcArray = src.split(&#x27;</span>/<span class=\"string\">&#x27;).filter(function(elem)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                return elem != &#x27;</span><span class=\"string\">&#x27; &amp;&amp; elem != &#x27;</span>.<span class=\"string\">&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">              &#125;);</span></span><br><span class=\"line\"><span class=\"string\">              if(srcArray.length &gt; 1)</span></span><br><span class=\"line\"><span class=\"string\">                srcArray.shift();</span></span><br><span class=\"line\"><span class=\"string\">              src = srcArray.join(&#x27;</span>/<span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">              $(this).attr(&#x27;</span>src<span class=\"string\">&#x27;, config.root + link + src);</span></span><br><span class=\"line\"><span class=\"string\">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class=\"line\"><span class=\"string\">            console.info&amp;&amp;console.info($(this));</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;);</span></span><br><span class=\"line\"><span class=\"string\">      data[key] = $.html();</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<p>然后即可添加图片，参考<a href=\"#Typora\">Typora</a></p>\n</li>\n<li><p>删除文章</p>\n<p>删除本地对应文件，然后执行如下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a><strong>Typora</strong></h4><p>配置如下，将图片拖拽到md文档中，即可复制到指定目录下：</p>\n<p><img src=\"/2021/09/18/Github-Hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210923104949941.png\" alt=\"image-20210923104949941\"></p>\n<p>在md文档中，直接使用图片名称，预览或发布后即可看到图片</p>\n<p><img src=\"/2021/09/18/Github-Hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210923105008730.png\" alt=\"image-20210923105008730\"></p>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://www.jianshu.com/p/390f202c5b0e\">https://www.jianshu.com/p/390f202c5b0e</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/155996962\">https://zhuanlan.zhihu.com/p/155996962</a></p>\n<p><a href=\"https://www.jianshu.com/p/f72aaad7b852\">https://www.jianshu.com/p/f72aaad7b852</a></p>\n"},{"title":"Java常见的数据结构","date":"2021-10-22T02:19:36.000Z","_content":"\n#### **堆**\n\n#### **栈**\n#### **队列**\n#### **数组**\n#### **链表**\n#### **二叉树**\n#### **红黑树**\n\n\nhttps://www.jianshu.com/p/8e54797ec3e0\nhttps://zhuanlan.zhihu.com/p/63138829","source":"_posts/Java常见的数据结构.md","raw":"title: Java常见的数据结构\ndate: 2021-10-22 10:19:36\ntags: Android\ncategories: Android\n\n------\n\n#### **堆**\n\n#### **栈**\n#### **队列**\n#### **数组**\n#### **链表**\n#### **二叉树**\n#### **红黑树**\n\n\nhttps://www.jianshu.com/p/8e54797ec3e0\nhttps://zhuanlan.zhihu.com/p/63138829","slug":"Java常见的数据结构","published":1,"updated":"2021-10-22T07:36:42.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep4000k7wgs0i3tdwdw","content":"<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a><strong>堆</strong></h4><h4 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a><strong>栈</strong></h4><h4 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a><strong>队列</strong></h4><h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a><strong>数组</strong></h4><h4 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a><strong>链表</strong></h4><h4 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a><strong>二叉树</strong></h4><h4 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a><strong>红黑树</strong></h4><p><a href=\"https://www.jianshu.com/p/8e54797ec3e0\">https://www.jianshu.com/p/8e54797ec3e0</a><br><a href=\"https://zhuanlan.zhihu.com/p/63138829\">https://zhuanlan.zhihu.com/p/63138829</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a><strong>堆</strong></h4><h4 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a><strong>栈</strong></h4><h4 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a><strong>队列</strong></h4><h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a><strong>数组</strong></h4><h4 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a><strong>链表</strong></h4><h4 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a><strong>二叉树</strong></h4><h4 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a><strong>红黑树</strong></h4><p><a href=\"https://www.jianshu.com/p/8e54797ec3e0\">https://www.jianshu.com/p/8e54797ec3e0</a><br><a href=\"https://zhuanlan.zhihu.com/p/63138829\">https://zhuanlan.zhihu.com/p/63138829</a></p>\n"},{"title":"LiveData","date":"2021-10-25T05:40:08.000Z","_content":"\n**LiveData源码的注释翻译如下：**\n\n> LiveData 是一个可以在给定生命周期内观察到的数据持有者类。 这意味着Observer可以与LifecycleOwner成对添加，并且仅当配对的 LifecycleOwner 处于活动状态时，才会通知此观察者有关包装数据的修改。 如果它的状态是Lifecycle.State.STARTED或Lifecycle.State.RESUMED ，LifecycleOwner 被认为是活动的。 \n>\n> 通过observeForever(Observer)添加的observeForever(Observer)被视为始终处于活动状态，因此将始终收到有关修改的通知。 对于这些观察者，您应该手动调用removeObserver(Observer) 。\n> 如果相应的 Lifecycle 移动到Lifecycle.State.DESTROYED状态，则会自动删除添加了 Lifecycle 的观察者。 这对于活动和片段特别有用，它们可以安全地观察 LiveData 而不必担心泄漏：它们在被销毁时会立即取消订阅。\n> 此外，LiveData 有onActive()和onInactive()方法，可以在活动Observer的数量在 0 和 1 之间变化时得到通知。这允许 LiveData 在没有任何 Observer 正在积极观察时释放任何大量资源。\n> 此类旨在保存ViewModel各个数据字段，但也可用于以解耦方式在应用程序中的不同模块之间共享数据\n\n由此官方已经给出了LiveData的用途和优点；\n\n\n\n#### \n\n```java\npublic abstract class LiveData<T> {\n    ...\n    \n    /**\n     * 这里是postValue()开启的线程用于主线程设置数据\n     */\n    private final Runnable mPostValueRunnable = new Runnable() {\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        public void run() {\n            Object newValue;\n            synchronized (mDataLock) {\n                newValue = mPendingData;\n                mPendingData = NOT_SET;\n            }\n            setValue((T) newValue);\n        }\n    };\n    \n    public LiveData(T value) {\n        mData = value;\n        mVersion = START_VERSION + 1;\n    }\n\n    public LiveData() {\n        mData = NOT_SET;\n        mVersion = START_VERSION;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private void considerNotify(ObserverWrapper observer) {\n        if (!observer.mActive) {\n            return;\n        }\n        // Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.\n        //\n        // we still first check observer.active to keep it as the entrance for events. So even if\n        // the observer moved to an active state, if we've not received that event, we better not\n        // notify for a more predictable notification order.\n        if (!observer.shouldBeActive()) {\n            observer.activeStateChanged(false);\n            return;\n        }\n        if (observer.mLastVersion >= mVersion) {\n            return;\n        }\n        observer.mLastVersion = mVersion;\n        observer.mObserver.onChanged((T) mData);\n    }\n\n    @SuppressWarnings(\"WeakerAccess\") /* synthetic access */\n    void dispatchingValue(@Nullable ObserverWrapper initiator) {\n        if (mDispatchingValue) {\n            mDispatchInvalidated = true;\n            return;\n        }\n        mDispatchingValue = true;\n        do {\n            mDispatchInvalidated = false;\n            if (initiator != null) {\n                considerNotify(initiator);\n                initiator = null;\n            } else {\n                for (Iterator<Map.Entry<Observer<? super T>, ObserverWrapper>> iterator =\n                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\n                    considerNotify(iterator.next().getValue());\n                    if (mDispatchInvalidated) {\n                        break;\n                    }\n                }\n            }\n        } while (mDispatchInvalidated);\n        mDispatchingValue = false;\n    }\n\n    /**\n     * 在给定所有者的生命周期内将给定观察者添加到观察者列表中。 事件在主线程上调度。 如果 LiveData 已经有数据集，它将被传递给观察者。\n     * 如果所有者处于Lifecycle.State.STARTED或Lifecycle.State.RESUMED状态（活动），观察者将仅接收事件。\n     * 如果所有者移动到Lifecycle.State.DESTROYED状态，观察者将被自动移除。\n     * 当owner不活动时数据发生变化时，它将不会收到任何更新。 如果它再次变为活动状态，它将自动接收最后可用的数据。\n     * 只要给定的 LifecycleOwner 没有被销毁，LiveData 就会保持对观察者和所有者的强引用。 当它被销毁时，LiveData 删除对观察者和所有者的引用。\n     * 如果给定的所有者已经处于Lifecycle.State.DESTROYED状态，LiveData 会忽略调用。\n     * 如果给定的所有者、观察者元组已经在列表中，则忽略该调用。 如果观察者已经与另一个所有者在列表中，则 LiveData 会抛出IllegalArgumentException。\n     */\n    @MainThread\n    public void observe(@NonNull LifecycleOwner owner, @NonNull Observer<? super T> observer) {\n        assertMainThread(\"observe\");\n        if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n            // ignore\n            return;\n        }\n        LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing != null && !existing.isAttachedTo(owner)) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        owner.getLifecycle().addObserver(wrapper);\n    }\n\n    /**\n     * Adds the given observer to the observers list. This call is similar to\n     * {@link LiveData#observe(LifecycleOwner, Observer)} with a LifecycleOwner, which\n     * is always active. This means that the given observer will receive all events and will never\n     * be automatically removed. You should manually call {@link #removeObserver(Observer)} to stop\n     * observing this LiveData.\n     * While LiveData has one of such observers, it will be considered\n     * as active.\n     * <p>\n     * If the observer was already added with an owner to this LiveData, LiveData throws an\n     * {@link IllegalArgumentException}.\n     *\n     * @param observer The observer that will receive the events\n     */\n    @MainThread\n    public void observeForever(@NonNull Observer<? super T> observer) {\n        assertMainThread(\"observeForever\");\n        AlwaysActiveObserver wrapper = new AlwaysActiveObserver(observer);\n        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing instanceof LiveData.LifecycleBoundObserver) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        wrapper.activeStateChanged(true);\n    }\n\n    /**\n     * Removes the given observer from the observers list.\n     *\n     * @param observer The Observer to receive events.\n     */\n    @MainThread\n    public void removeObserver(@NonNull final Observer<? super T> observer) {\n        assertMainThread(\"removeObserver\");\n        ObserverWrapper removed = mObservers.remove(observer);\n        if (removed == null) {\n            return;\n        }\n        removed.detachObserver();\n        removed.activeStateChanged(false);\n    }\n\n    /**\n     * Removes all observers that are tied to the given {@link LifecycleOwner}.\n     *\n     * @param owner The {@code LifecycleOwner} scope for the observers to be removed.\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    @MainThread\n    public void removeObservers(@NonNull final LifecycleOwner owner) {\n        assertMainThread(\"removeObservers\");\n        for (Map.Entry<Observer<? super T>, ObserverWrapper> entry : mObservers) {\n            if (entry.getValue().isAttachedTo(owner)) {\n                removeObserver(entry.getKey());\n            }\n        }\n    }\n\n    /**\n     * Posts a task to a main thread to set the given value. So if you have a following code\n     * executed in the main thread:\n     * <pre class=\"prettyprint\">\n     * liveData.postValue(\"a\");\n     * liveData.setValue(\"b\");\n     * </pre>\n     * The value \"b\" would be set at first and later the main thread would override it with\n     * the value \"a\".\n     * <p>\n     * If you called this method multiple times before a main thread executed a posted task, only\n     * the last value would be dispatched.\n     *\n     * @param value The new value\n     */\n    protected void postValue(T value) {\n        boolean postTask;\n        synchronized (mDataLock) {\n            postTask = mPendingData == NOT_SET;\n            mPendingData = value;\n        }\n        if (!postTask) {\n            return;\n        }\n        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n    }\n\n    /**\n     * Sets the value. If there are active observers, the value will be dispatched to them.\n     * <p>\n     * This method must be called from the main thread. If you need set a value from a background\n     * thread, you can use {@link #postValue(Object)}\n     *\n     * @param value The new value\n     */\n    @MainThread\n    protected void setValue(T value) {\n        assertMainThread(\"setValue\");\n        mVersion++;\n        mData = value;\n        dispatchingValue(null);\n    }\n\n    /**\n     * Returns the current value.\n     * Note that calling this method on a background thread does not guarantee that the latest\n     * value set will be received.\n     *\n     * @return the current value\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Nullable\n    public T getValue() {\n        Object data = mData;\n        if (data != NOT_SET) {\n            return (T) data;\n        }\n        return null;\n    }\n\n    int getVersion() {\n        return mVersion;\n    }\n\n    /**\n     * Called when the number of active observers change from 0 to 1.\n     * <p>\n     * This callback can be used to know that this LiveData is being used thus should be kept\n     * up to date.\n     */\n    protected void onActive() {\n\n    }\n\n    /**\n     * Called when the number of active observers change from 1 to 0.\n     * <p>\n     * This does not mean that there are no observers left, there may still be observers but their\n     * lifecycle states aren't {@link Lifecycle.State#STARTED} or {@link Lifecycle.State#RESUMED}\n     * (like an Activity in the back stack).\n     * <p>\n     * You can check if there are observers via {@link #hasObservers()}.\n     */\n    protected void onInactive() {\n\n    }\n\n    /**\n     * Returns true if this LiveData has observers.\n     *\n     * @return true if this LiveData has observers\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public boolean hasObservers() {\n        return mObservers.size() > 0;\n    }\n\n    /**\n     * Returns true if this LiveData has active observers.\n     *\n     * @return true if this LiveData has active observers\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public boolean hasActiveObservers() {\n        return mActiveCount > 0;\n    }\n\n    @MainThread\n    void changeActiveCounter(int change) {\n        int previousActiveCount = mActiveCount;\n        mActiveCount += change;\n        if (mChangingActiveState) {\n            return;\n        }\n        mChangingActiveState = true;\n        try {\n            while (previousActiveCount != mActiveCount) {\n                boolean needToCallActive = previousActiveCount == 0 && mActiveCount > 0;\n                boolean needToCallInactive = previousActiveCount > 0 && mActiveCount == 0;\n                previousActiveCount = mActiveCount;\n                if (needToCallActive) {\n                    onActive();\n                } else if (needToCallInactive) {\n                    onInactive();\n                }\n            }\n        } finally {\n            mChangingActiveState = false;\n        }\n    }\n\n    class LifecycleBoundObserver extends ObserverWrapper implements LifecycleEventObserver {\n        @NonNull\n        final LifecycleOwner mOwner;\n\n        LifecycleBoundObserver(@NonNull LifecycleOwner owner, Observer<? super T> observer) {\n            super(observer);\n            mOwner = owner;\n        }\n\n        @Override\n        boolean shouldBeActive() {\n            return mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);\n        }\n\n        @Override\n        public void onStateChanged(@NonNull LifecycleOwner source,\n                @NonNull Lifecycle.Event event) {\n            Lifecycle.State currentState = mOwner.getLifecycle().getCurrentState();\n            if (currentState == DESTROYED) {\n                removeObserver(mObserver);\n                return;\n            }\n            Lifecycle.State prevState = null;\n            while (prevState != currentState) {\n                prevState = currentState;\n                activeStateChanged(shouldBeActive());\n                currentState = mOwner.getLifecycle().getCurrentState();\n            }\n        }\n\n        @Override\n        boolean isAttachedTo(LifecycleOwner owner) {\n            return mOwner == owner;\n        }\n\n        @Override\n        void detachObserver() {\n            mOwner.getLifecycle().removeObserver(this);\n        }\n    }\n\n    private abstract class ObserverWrapper {\n        final Observer<? super T> mObserver;\n        boolean mActive;\n        int mLastVersion = START_VERSION;\n\n        ObserverWrapper(Observer<? super T> observer) {\n            mObserver = observer;\n        }\n\n        abstract boolean shouldBeActive();\n\n        boolean isAttachedTo(LifecycleOwner owner) {\n            return false;\n        }\n\n        void detachObserver() {\n        }\n\n        void activeStateChanged(boolean newActive) {\n            if (newActive == mActive) {\n                return;\n            }\n            // immediately set active state, so we'd never dispatch anything to inactive\n            // owner\n            mActive = newActive;\n            changeActiveCounter(mActive ? 1 : -1);\n            if (mActive) {\n                dispatchingValue(this);\n            }\n        }\n    }\n\n    private class AlwaysActiveObserver extends ObserverWrapper {\n\n        AlwaysActiveObserver(Observer<? super T> observer) {\n            super(observer);\n        }\n\n        @Override\n        boolean shouldBeActive() {\n            return true;\n        }\n    }\n\n    static void assertMainThread(String methodName) {\n        if (!ArchTaskExecutor.getInstance().isMainThread()) {\n            throw new IllegalStateException(\"Cannot invoke \" + methodName + \" on a background\"\n                    + \" thread\");\n        }\n    }\n}\n\n```\n\n\n\n涉及到Lifecycle，LifecycleOwner，LifecycleBoundObserver，ObserverWrapper，LifecycleEventObserver\n\n感知生命周期，是因为observe（）方法传入了LifecycleOwner，ComponentActivity实现了此接口，获取到了Lifecycle\n\n#### **总结**\n\n\n\n\n\npost是怎样执行的？\n\n开启了一个主线程，由此可以得知设置livedata的值只能在主线程中。\n\n\n\n\n\n\n\n\n\n\n\n何为粘性事件？\n即发射的事件如果早于注册，那么注册之后依然可以接收到的事件称为粘性事件\n\n“数据倒灌”一词出自[KunMinX](https://links.jianshu.com/go?to=https%3A%2F%2Fxiaozhuanlan.com%2Fu%2Fkunminx)的Blog[**重学安卓：LiveData 数据倒灌 背景缘由全貌 独家解析**](https://links.jianshu.com/go?to=https%3A%2F%2Fxiaozhuanlan.com%2Ftopic%2F6719328450),即在setValue后,observe对此次set的value值会进行多次消费。比如进行第二次observe的时候获取到的数据是第一次的旧数据。这样会带来不可预期的后果。\n\n\n\nhttps://www.jianshu.com/p/e08287ec62cd\n\nhttps://mp.weixin.qq.com/s/o61NDIptP94X4HspKwiR2w\n\nhttps://www.jianshu.com/p/d0244c4c7cc9\n","source":"_posts/LiveData.md","raw":"---\ntitle: LiveData\ndate: 2021-10-25 13:40:08\ntags: Android\ncategories: Android\n\n---\n\n**LiveData源码的注释翻译如下：**\n\n> LiveData 是一个可以在给定生命周期内观察到的数据持有者类。 这意味着Observer可以与LifecycleOwner成对添加，并且仅当配对的 LifecycleOwner 处于活动状态时，才会通知此观察者有关包装数据的修改。 如果它的状态是Lifecycle.State.STARTED或Lifecycle.State.RESUMED ，LifecycleOwner 被认为是活动的。 \n>\n> 通过observeForever(Observer)添加的observeForever(Observer)被视为始终处于活动状态，因此将始终收到有关修改的通知。 对于这些观察者，您应该手动调用removeObserver(Observer) 。\n> 如果相应的 Lifecycle 移动到Lifecycle.State.DESTROYED状态，则会自动删除添加了 Lifecycle 的观察者。 这对于活动和片段特别有用，它们可以安全地观察 LiveData 而不必担心泄漏：它们在被销毁时会立即取消订阅。\n> 此外，LiveData 有onActive()和onInactive()方法，可以在活动Observer的数量在 0 和 1 之间变化时得到通知。这允许 LiveData 在没有任何 Observer 正在积极观察时释放任何大量资源。\n> 此类旨在保存ViewModel各个数据字段，但也可用于以解耦方式在应用程序中的不同模块之间共享数据\n\n由此官方已经给出了LiveData的用途和优点；\n\n\n\n#### \n\n```java\npublic abstract class LiveData<T> {\n    ...\n    \n    /**\n     * 这里是postValue()开启的线程用于主线程设置数据\n     */\n    private final Runnable mPostValueRunnable = new Runnable() {\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        public void run() {\n            Object newValue;\n            synchronized (mDataLock) {\n                newValue = mPendingData;\n                mPendingData = NOT_SET;\n            }\n            setValue((T) newValue);\n        }\n    };\n    \n    public LiveData(T value) {\n        mData = value;\n        mVersion = START_VERSION + 1;\n    }\n\n    public LiveData() {\n        mData = NOT_SET;\n        mVersion = START_VERSION;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private void considerNotify(ObserverWrapper observer) {\n        if (!observer.mActive) {\n            return;\n        }\n        // Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.\n        //\n        // we still first check observer.active to keep it as the entrance for events. So even if\n        // the observer moved to an active state, if we've not received that event, we better not\n        // notify for a more predictable notification order.\n        if (!observer.shouldBeActive()) {\n            observer.activeStateChanged(false);\n            return;\n        }\n        if (observer.mLastVersion >= mVersion) {\n            return;\n        }\n        observer.mLastVersion = mVersion;\n        observer.mObserver.onChanged((T) mData);\n    }\n\n    @SuppressWarnings(\"WeakerAccess\") /* synthetic access */\n    void dispatchingValue(@Nullable ObserverWrapper initiator) {\n        if (mDispatchingValue) {\n            mDispatchInvalidated = true;\n            return;\n        }\n        mDispatchingValue = true;\n        do {\n            mDispatchInvalidated = false;\n            if (initiator != null) {\n                considerNotify(initiator);\n                initiator = null;\n            } else {\n                for (Iterator<Map.Entry<Observer<? super T>, ObserverWrapper>> iterator =\n                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\n                    considerNotify(iterator.next().getValue());\n                    if (mDispatchInvalidated) {\n                        break;\n                    }\n                }\n            }\n        } while (mDispatchInvalidated);\n        mDispatchingValue = false;\n    }\n\n    /**\n     * 在给定所有者的生命周期内将给定观察者添加到观察者列表中。 事件在主线程上调度。 如果 LiveData 已经有数据集，它将被传递给观察者。\n     * 如果所有者处于Lifecycle.State.STARTED或Lifecycle.State.RESUMED状态（活动），观察者将仅接收事件。\n     * 如果所有者移动到Lifecycle.State.DESTROYED状态，观察者将被自动移除。\n     * 当owner不活动时数据发生变化时，它将不会收到任何更新。 如果它再次变为活动状态，它将自动接收最后可用的数据。\n     * 只要给定的 LifecycleOwner 没有被销毁，LiveData 就会保持对观察者和所有者的强引用。 当它被销毁时，LiveData 删除对观察者和所有者的引用。\n     * 如果给定的所有者已经处于Lifecycle.State.DESTROYED状态，LiveData 会忽略调用。\n     * 如果给定的所有者、观察者元组已经在列表中，则忽略该调用。 如果观察者已经与另一个所有者在列表中，则 LiveData 会抛出IllegalArgumentException。\n     */\n    @MainThread\n    public void observe(@NonNull LifecycleOwner owner, @NonNull Observer<? super T> observer) {\n        assertMainThread(\"observe\");\n        if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n            // ignore\n            return;\n        }\n        LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing != null && !existing.isAttachedTo(owner)) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        owner.getLifecycle().addObserver(wrapper);\n    }\n\n    /**\n     * Adds the given observer to the observers list. This call is similar to\n     * {@link LiveData#observe(LifecycleOwner, Observer)} with a LifecycleOwner, which\n     * is always active. This means that the given observer will receive all events and will never\n     * be automatically removed. You should manually call {@link #removeObserver(Observer)} to stop\n     * observing this LiveData.\n     * While LiveData has one of such observers, it will be considered\n     * as active.\n     * <p>\n     * If the observer was already added with an owner to this LiveData, LiveData throws an\n     * {@link IllegalArgumentException}.\n     *\n     * @param observer The observer that will receive the events\n     */\n    @MainThread\n    public void observeForever(@NonNull Observer<? super T> observer) {\n        assertMainThread(\"observeForever\");\n        AlwaysActiveObserver wrapper = new AlwaysActiveObserver(observer);\n        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing instanceof LiveData.LifecycleBoundObserver) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        wrapper.activeStateChanged(true);\n    }\n\n    /**\n     * Removes the given observer from the observers list.\n     *\n     * @param observer The Observer to receive events.\n     */\n    @MainThread\n    public void removeObserver(@NonNull final Observer<? super T> observer) {\n        assertMainThread(\"removeObserver\");\n        ObserverWrapper removed = mObservers.remove(observer);\n        if (removed == null) {\n            return;\n        }\n        removed.detachObserver();\n        removed.activeStateChanged(false);\n    }\n\n    /**\n     * Removes all observers that are tied to the given {@link LifecycleOwner}.\n     *\n     * @param owner The {@code LifecycleOwner} scope for the observers to be removed.\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    @MainThread\n    public void removeObservers(@NonNull final LifecycleOwner owner) {\n        assertMainThread(\"removeObservers\");\n        for (Map.Entry<Observer<? super T>, ObserverWrapper> entry : mObservers) {\n            if (entry.getValue().isAttachedTo(owner)) {\n                removeObserver(entry.getKey());\n            }\n        }\n    }\n\n    /**\n     * Posts a task to a main thread to set the given value. So if you have a following code\n     * executed in the main thread:\n     * <pre class=\"prettyprint\">\n     * liveData.postValue(\"a\");\n     * liveData.setValue(\"b\");\n     * </pre>\n     * The value \"b\" would be set at first and later the main thread would override it with\n     * the value \"a\".\n     * <p>\n     * If you called this method multiple times before a main thread executed a posted task, only\n     * the last value would be dispatched.\n     *\n     * @param value The new value\n     */\n    protected void postValue(T value) {\n        boolean postTask;\n        synchronized (mDataLock) {\n            postTask = mPendingData == NOT_SET;\n            mPendingData = value;\n        }\n        if (!postTask) {\n            return;\n        }\n        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n    }\n\n    /**\n     * Sets the value. If there are active observers, the value will be dispatched to them.\n     * <p>\n     * This method must be called from the main thread. If you need set a value from a background\n     * thread, you can use {@link #postValue(Object)}\n     *\n     * @param value The new value\n     */\n    @MainThread\n    protected void setValue(T value) {\n        assertMainThread(\"setValue\");\n        mVersion++;\n        mData = value;\n        dispatchingValue(null);\n    }\n\n    /**\n     * Returns the current value.\n     * Note that calling this method on a background thread does not guarantee that the latest\n     * value set will be received.\n     *\n     * @return the current value\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Nullable\n    public T getValue() {\n        Object data = mData;\n        if (data != NOT_SET) {\n            return (T) data;\n        }\n        return null;\n    }\n\n    int getVersion() {\n        return mVersion;\n    }\n\n    /**\n     * Called when the number of active observers change from 0 to 1.\n     * <p>\n     * This callback can be used to know that this LiveData is being used thus should be kept\n     * up to date.\n     */\n    protected void onActive() {\n\n    }\n\n    /**\n     * Called when the number of active observers change from 1 to 0.\n     * <p>\n     * This does not mean that there are no observers left, there may still be observers but their\n     * lifecycle states aren't {@link Lifecycle.State#STARTED} or {@link Lifecycle.State#RESUMED}\n     * (like an Activity in the back stack).\n     * <p>\n     * You can check if there are observers via {@link #hasObservers()}.\n     */\n    protected void onInactive() {\n\n    }\n\n    /**\n     * Returns true if this LiveData has observers.\n     *\n     * @return true if this LiveData has observers\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public boolean hasObservers() {\n        return mObservers.size() > 0;\n    }\n\n    /**\n     * Returns true if this LiveData has active observers.\n     *\n     * @return true if this LiveData has active observers\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public boolean hasActiveObservers() {\n        return mActiveCount > 0;\n    }\n\n    @MainThread\n    void changeActiveCounter(int change) {\n        int previousActiveCount = mActiveCount;\n        mActiveCount += change;\n        if (mChangingActiveState) {\n            return;\n        }\n        mChangingActiveState = true;\n        try {\n            while (previousActiveCount != mActiveCount) {\n                boolean needToCallActive = previousActiveCount == 0 && mActiveCount > 0;\n                boolean needToCallInactive = previousActiveCount > 0 && mActiveCount == 0;\n                previousActiveCount = mActiveCount;\n                if (needToCallActive) {\n                    onActive();\n                } else if (needToCallInactive) {\n                    onInactive();\n                }\n            }\n        } finally {\n            mChangingActiveState = false;\n        }\n    }\n\n    class LifecycleBoundObserver extends ObserverWrapper implements LifecycleEventObserver {\n        @NonNull\n        final LifecycleOwner mOwner;\n\n        LifecycleBoundObserver(@NonNull LifecycleOwner owner, Observer<? super T> observer) {\n            super(observer);\n            mOwner = owner;\n        }\n\n        @Override\n        boolean shouldBeActive() {\n            return mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);\n        }\n\n        @Override\n        public void onStateChanged(@NonNull LifecycleOwner source,\n                @NonNull Lifecycle.Event event) {\n            Lifecycle.State currentState = mOwner.getLifecycle().getCurrentState();\n            if (currentState == DESTROYED) {\n                removeObserver(mObserver);\n                return;\n            }\n            Lifecycle.State prevState = null;\n            while (prevState != currentState) {\n                prevState = currentState;\n                activeStateChanged(shouldBeActive());\n                currentState = mOwner.getLifecycle().getCurrentState();\n            }\n        }\n\n        @Override\n        boolean isAttachedTo(LifecycleOwner owner) {\n            return mOwner == owner;\n        }\n\n        @Override\n        void detachObserver() {\n            mOwner.getLifecycle().removeObserver(this);\n        }\n    }\n\n    private abstract class ObserverWrapper {\n        final Observer<? super T> mObserver;\n        boolean mActive;\n        int mLastVersion = START_VERSION;\n\n        ObserverWrapper(Observer<? super T> observer) {\n            mObserver = observer;\n        }\n\n        abstract boolean shouldBeActive();\n\n        boolean isAttachedTo(LifecycleOwner owner) {\n            return false;\n        }\n\n        void detachObserver() {\n        }\n\n        void activeStateChanged(boolean newActive) {\n            if (newActive == mActive) {\n                return;\n            }\n            // immediately set active state, so we'd never dispatch anything to inactive\n            // owner\n            mActive = newActive;\n            changeActiveCounter(mActive ? 1 : -1);\n            if (mActive) {\n                dispatchingValue(this);\n            }\n        }\n    }\n\n    private class AlwaysActiveObserver extends ObserverWrapper {\n\n        AlwaysActiveObserver(Observer<? super T> observer) {\n            super(observer);\n        }\n\n        @Override\n        boolean shouldBeActive() {\n            return true;\n        }\n    }\n\n    static void assertMainThread(String methodName) {\n        if (!ArchTaskExecutor.getInstance().isMainThread()) {\n            throw new IllegalStateException(\"Cannot invoke \" + methodName + \" on a background\"\n                    + \" thread\");\n        }\n    }\n}\n\n```\n\n\n\n涉及到Lifecycle，LifecycleOwner，LifecycleBoundObserver，ObserverWrapper，LifecycleEventObserver\n\n感知生命周期，是因为observe（）方法传入了LifecycleOwner，ComponentActivity实现了此接口，获取到了Lifecycle\n\n#### **总结**\n\n\n\n\n\npost是怎样执行的？\n\n开启了一个主线程，由此可以得知设置livedata的值只能在主线程中。\n\n\n\n\n\n\n\n\n\n\n\n何为粘性事件？\n即发射的事件如果早于注册，那么注册之后依然可以接收到的事件称为粘性事件\n\n“数据倒灌”一词出自[KunMinX](https://links.jianshu.com/go?to=https%3A%2F%2Fxiaozhuanlan.com%2Fu%2Fkunminx)的Blog[**重学安卓：LiveData 数据倒灌 背景缘由全貌 独家解析**](https://links.jianshu.com/go?to=https%3A%2F%2Fxiaozhuanlan.com%2Ftopic%2F6719328450),即在setValue后,observe对此次set的value值会进行多次消费。比如进行第二次observe的时候获取到的数据是第一次的旧数据。这样会带来不可预期的后果。\n\n\n\nhttps://www.jianshu.com/p/e08287ec62cd\n\nhttps://mp.weixin.qq.com/s/o61NDIptP94X4HspKwiR2w\n\nhttps://www.jianshu.com/p/d0244c4c7cc9\n","slug":"LiveData","published":1,"updated":"2021-10-26T06:00:51.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep6000o7wgsgtlrcq8k","content":"<p><strong>LiveData源码的注释翻译如下：</strong></p>\n<blockquote>\n<p>LiveData 是一个可以在给定生命周期内观察到的数据持有者类。 这意味着Observer可以与LifecycleOwner成对添加，并且仅当配对的 LifecycleOwner 处于活动状态时，才会通知此观察者有关包装数据的修改。 如果它的状态是Lifecycle.State.STARTED或Lifecycle.State.RESUMED ，LifecycleOwner 被认为是活动的。 </p>\n<p>通过observeForever(Observer)添加的observeForever(Observer)被视为始终处于活动状态，因此将始终收到有关修改的通知。 对于这些观察者，您应该手动调用removeObserver(Observer) 。<br>如果相应的 Lifecycle 移动到Lifecycle.State.DESTROYED状态，则会自动删除添加了 Lifecycle 的观察者。 这对于活动和片段特别有用，它们可以安全地观察 LiveData 而不必担心泄漏：它们在被销毁时会立即取消订阅。<br>此外，LiveData 有onActive()和onInactive()方法，可以在活动Observer的数量在 0 和 1 之间变化时得到通知。这允许 LiveData 在没有任何 Observer 正在积极观察时释放任何大量资源。<br>此类旨在保存ViewModel各个数据字段，但也可用于以解耦方式在应用程序中的不同模块之间共享数据</p>\n</blockquote>\n<p>由此官方已经给出了LiveData的用途和优点；</p>\n<h4 id><a href=\"#\" class=\"headerlink\" title></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveData</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里是postValue()开启的线程用于主线程设置数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Object newValue;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">                newValue = mPendingData;</span><br><span class=\"line\">                mPendingData = NOT_SET;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            setValue((T) newValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LiveData</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        mData = value;</span><br><span class=\"line\">        mVersion = START_VERSION + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LiveData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mData = NOT_SET;</span><br><span class=\"line\">        mVersion = START_VERSION;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(ObserverWrapper observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.mActive) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Check latest state b4 dispatch. Maybe it changed state but we didn&#x27;t get the event yet.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// we still first check observer.active to keep it as the entrance for events. So even if</span></span><br><span class=\"line\">        <span class=\"comment\">// the observer moved to an active state, if we&#x27;ve not received that event, we better not</span></span><br><span class=\"line\">        <span class=\"comment\">// notify for a more predictable notification order.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.shouldBeActive()) &#123;</span><br><span class=\"line\">            observer.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.mLastVersion &gt;= mVersion) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer.mLastVersion = mVersion;</span><br><span class=\"line\">        observer.mObserver.onChanged((T) mData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class=\"comment\">/* synthetic access */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ObserverWrapper initiator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDispatchingValue) &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                considerNotify(initiator);</span><br><span class=\"line\">                initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class=\"keyword\">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class=\"line\">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                    considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在给定所有者的生命周期内将给定观察者添加到观察者列表中。 事件在主线程上调度。 如果 LiveData 已经有数据集，它将被传递给观察者。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果所有者处于Lifecycle.State.STARTED或Lifecycle.State.RESUMED状态（活动），观察者将仅接收事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果所有者移动到Lifecycle.State.DESTROYED状态，观察者将被自动移除。</span></span><br><span class=\"line\"><span class=\"comment\">     * 当owner不活动时数据发生变化时，它将不会收到任何更新。 如果它再次变为活动状态，它将自动接收最后可用的数据。</span></span><br><span class=\"line\"><span class=\"comment\">     * 只要给定的 LifecycleOwner 没有被销毁，LiveData 就会保持对观察者和所有者的强引用。 当它被销毁时，LiveData 删除对观察者和所有者的引用。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果给定的所有者已经处于Lifecycle.State.DESTROYED状态，LiveData 会忽略调用。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果给定的所有者、观察者元组已经在列表中，则忽略该调用。 如果观察者已经与另一个所有者在列表中，则 LiveData 会抛出IllegalArgumentException。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, <span class=\"meta\">@NonNull</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;observe&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ignore</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\">        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Adds the given observer to the observers list. This call is similar to</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> LiveData#observe(LifecycleOwner, Observer)&#125; with a LifecycleOwner, which</span></span><br><span class=\"line\"><span class=\"comment\">     * is always active. This means that the given observer will receive all events and will never</span></span><br><span class=\"line\"><span class=\"comment\">     * be automatically removed. You should manually call &#123;<span class=\"doctag\">@link</span> #removeObserver(Observer)&#125; to stop</span></span><br><span class=\"line\"><span class=\"comment\">     * observing this LiveData.</span></span><br><span class=\"line\"><span class=\"comment\">     * While LiveData has one of such observers, it will be considered</span></span><br><span class=\"line\"><span class=\"comment\">     * as active.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * If the observer was already added with an owner to this LiveData, LiveData throws an</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> IllegalArgumentException&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> observer The observer that will receive the events</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observeForever</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;observeForever&quot;</span>);</span><br><span class=\"line\">        AlwaysActiveObserver wrapper = <span class=\"keyword\">new</span> AlwaysActiveObserver(observer);</span><br><span class=\"line\">        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing <span class=\"keyword\">instanceof</span> LiveData.LifecycleBoundObserver) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        wrapper.activeStateChanged(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Removes the given observer from the observers list.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> observer The Observer to receive events.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;removeObserver&quot;</span>);</span><br><span class=\"line\">        ObserverWrapper removed = mObservers.remove(observer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (removed == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        removed.detachObserver();</span><br><span class=\"line\">        removed.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Removes all observers that are tied to the given &#123;<span class=\"doctag\">@link</span> LifecycleOwner&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> owner The &#123;<span class=\"doctag\">@code</span> LifecycleOwner&#125; scope for the observers to be removed.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObservers</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;removeObservers&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Observer&lt;? <span class=\"keyword\">super</span> T&gt;, ObserverWrapper&gt; entry : mObservers) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (entry.getValue().isAttachedTo(owner)) &#123;</span><br><span class=\"line\">                removeObserver(entry.getKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Posts a task to a main thread to set the given value. So if you have a following code</span></span><br><span class=\"line\"><span class=\"comment\">     * executed in the main thread:</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;pre class=&quot;prettyprint&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * liveData.postValue(&quot;a&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">     * liveData.setValue(&quot;b&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * The value &quot;b&quot; would be set at first and later the main thread would override it with</span></span><br><span class=\"line\"><span class=\"comment\">     * the value &quot;a&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * If you called this method multiple times before a main thread executed a posted task, only</span></span><br><span class=\"line\"><span class=\"comment\">     * the last value would be dispatched.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value The new value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">            postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">            mPendingData = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!postTask) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets the value. If there are active observers, the value will be dispatched to them.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This method must be called from the main thread. If you need set a value from a background</span></span><br><span class=\"line\"><span class=\"comment\">     * thread, you can use &#123;<span class=\"doctag\">@link</span> #postValue(Object)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value The new value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;setValue&quot;</span>);</span><br><span class=\"line\">        mVersion++;</span><br><span class=\"line\">        mData = value;</span><br><span class=\"line\">        dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that calling this method on a background thread does not guarantee that the latest</span></span><br><span class=\"line\"><span class=\"comment\">     * value set will be received.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the current value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object data = mData;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data != NOT_SET) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVersion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mVersion;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Called when the number of active observers change from 0 to 1.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This callback can be used to know that this LiveData is being used thus should be kept</span></span><br><span class=\"line\"><span class=\"comment\">     * up to date.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Called when the number of active observers change from 1 to 0.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This does not mean that there are no observers left, there may still be observers but their</span></span><br><span class=\"line\"><span class=\"comment\">     * lifecycle states aren&#x27;t &#123;<span class=\"doctag\">@link</span> Lifecycle.State#STARTED&#125; or &#123;<span class=\"doctag\">@link</span> Lifecycle.State#RESUMED&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * (like an Activity in the back stack).</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * You can check if there are observers via &#123;<span class=\"doctag\">@link</span> #hasObservers()&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onInactive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns true if this LiveData has observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this LiveData has observers</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mObservers.size() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns true if this LiveData has active observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this LiveData has active observers</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasActiveObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mActiveCount &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">changeActiveCounter</span><span class=\"params\">(<span class=\"keyword\">int</span> change)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> previousActiveCount = mActiveCount;</span><br><span class=\"line\">        mActiveCount += change;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mChangingActiveState) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mChangingActiveState = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (previousActiveCount != mActiveCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> needToCallActive = previousActiveCount == <span class=\"number\">0</span> &amp;&amp; mActiveCount &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> needToCallInactive = previousActiveCount &gt; <span class=\"number\">0</span> &amp;&amp; mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">                previousActiveCount = mActiveCount;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (needToCallActive) &#123;</span><br><span class=\"line\">                    onActive();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (needToCallInactive) &#123;</span><br><span class=\"line\">                    onInactive();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            mChangingActiveState = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleEventObserver</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> LifecycleOwner mOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">        LifecycleBoundObserver(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(observer);</span><br><span class=\"line\">            mOwner = owner;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner source,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">            Lifecycle.State currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentState == DESTROYED) &#123;</span><br><span class=\"line\">                removeObserver(mObserver);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Lifecycle.State prevState = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (prevState != currentState) &#123;</span><br><span class=\"line\">                prevState = currentState;</span><br><span class=\"line\">                activeStateChanged(shouldBeActive());</span><br><span class=\"line\">                currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mOwner == owner;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            mOwner.getLifecycle().removeObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverWrapper</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; mObserver;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> mActive;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mLastVersion = START_VERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">        ObserverWrapper(Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">            mObserver = observer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newActive == mActive) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// immediately set active state, so we&#x27;d never dispatch anything to inactive</span></span><br><span class=\"line\">            <span class=\"comment\">// owner</span></span><br><span class=\"line\">            mActive = newActive;</span><br><span class=\"line\">            changeActiveCounter(mActive ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mActive) &#123;</span><br><span class=\"line\">                dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlwaysActiveObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        AlwaysActiveObserver(Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">assertMainThread</span><span class=\"params\">(String methodName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ArchTaskExecutor.getInstance().isMainThread()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Cannot invoke &quot;</span> + methodName + <span class=\"string\">&quot; on a background&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; thread&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>涉及到Lifecycle，LifecycleOwner，LifecycleBoundObserver，ObserverWrapper，LifecycleEventObserver</p>\n<p>感知生命周期，是因为observe（）方法传入了LifecycleOwner，ComponentActivity实现了此接口，获取到了Lifecycle</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h4><p>post是怎样执行的？</p>\n<p>开启了一个主线程，由此可以得知设置livedata的值只能在主线程中。</p>\n<p>何为粘性事件？<br>即发射的事件如果早于注册，那么注册之后依然可以接收到的事件称为粘性事件</p>\n<p>“数据倒灌”一词出自<a href=\"https://links.jianshu.com/go?to=https://xiaozhuanlan.com/u/kunminx\">KunMinX</a>的Blog<a href=\"https://links.jianshu.com/go?to=https://xiaozhuanlan.com/topic/6719328450\"><strong>重学安卓：LiveData 数据倒灌 背景缘由全貌 独家解析</strong></a>,即在setValue后,observe对此次set的value值会进行多次消费。比如进行第二次observe的时候获取到的数据是第一次的旧数据。这样会带来不可预期的后果。</p>\n<p><a href=\"https://www.jianshu.com/p/e08287ec62cd\">https://www.jianshu.com/p/e08287ec62cd</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/o61NDIptP94X4HspKwiR2w\">https://mp.weixin.qq.com/s/o61NDIptP94X4HspKwiR2w</a></p>\n<p><a href=\"https://www.jianshu.com/p/d0244c4c7cc9\">https://www.jianshu.com/p/d0244c4c7cc9</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>LiveData源码的注释翻译如下：</strong></p>\n<blockquote>\n<p>LiveData 是一个可以在给定生命周期内观察到的数据持有者类。 这意味着Observer可以与LifecycleOwner成对添加，并且仅当配对的 LifecycleOwner 处于活动状态时，才会通知此观察者有关包装数据的修改。 如果它的状态是Lifecycle.State.STARTED或Lifecycle.State.RESUMED ，LifecycleOwner 被认为是活动的。 </p>\n<p>通过observeForever(Observer)添加的observeForever(Observer)被视为始终处于活动状态，因此将始终收到有关修改的通知。 对于这些观察者，您应该手动调用removeObserver(Observer) 。<br>如果相应的 Lifecycle 移动到Lifecycle.State.DESTROYED状态，则会自动删除添加了 Lifecycle 的观察者。 这对于活动和片段特别有用，它们可以安全地观察 LiveData 而不必担心泄漏：它们在被销毁时会立即取消订阅。<br>此外，LiveData 有onActive()和onInactive()方法，可以在活动Observer的数量在 0 和 1 之间变化时得到通知。这允许 LiveData 在没有任何 Observer 正在积极观察时释放任何大量资源。<br>此类旨在保存ViewModel各个数据字段，但也可用于以解耦方式在应用程序中的不同模块之间共享数据</p>\n</blockquote>\n<p>由此官方已经给出了LiveData的用途和优点；</p>\n<h4 id><a href=\"#\" class=\"headerlink\" title></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveData</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里是postValue()开启的线程用于主线程设置数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Object newValue;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">                newValue = mPendingData;</span><br><span class=\"line\">                mPendingData = NOT_SET;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            setValue((T) newValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LiveData</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        mData = value;</span><br><span class=\"line\">        mVersion = START_VERSION + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LiveData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mData = NOT_SET;</span><br><span class=\"line\">        mVersion = START_VERSION;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(ObserverWrapper observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.mActive) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Check latest state b4 dispatch. Maybe it changed state but we didn&#x27;t get the event yet.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// we still first check observer.active to keep it as the entrance for events. So even if</span></span><br><span class=\"line\">        <span class=\"comment\">// the observer moved to an active state, if we&#x27;ve not received that event, we better not</span></span><br><span class=\"line\">        <span class=\"comment\">// notify for a more predictable notification order.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.shouldBeActive()) &#123;</span><br><span class=\"line\">            observer.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.mLastVersion &gt;= mVersion) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer.mLastVersion = mVersion;</span><br><span class=\"line\">        observer.mObserver.onChanged((T) mData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class=\"comment\">/* synthetic access */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ObserverWrapper initiator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDispatchingValue) &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                considerNotify(initiator);</span><br><span class=\"line\">                initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class=\"keyword\">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class=\"line\">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                    considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在给定所有者的生命周期内将给定观察者添加到观察者列表中。 事件在主线程上调度。 如果 LiveData 已经有数据集，它将被传递给观察者。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果所有者处于Lifecycle.State.STARTED或Lifecycle.State.RESUMED状态（活动），观察者将仅接收事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果所有者移动到Lifecycle.State.DESTROYED状态，观察者将被自动移除。</span></span><br><span class=\"line\"><span class=\"comment\">     * 当owner不活动时数据发生变化时，它将不会收到任何更新。 如果它再次变为活动状态，它将自动接收最后可用的数据。</span></span><br><span class=\"line\"><span class=\"comment\">     * 只要给定的 LifecycleOwner 没有被销毁，LiveData 就会保持对观察者和所有者的强引用。 当它被销毁时，LiveData 删除对观察者和所有者的引用。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果给定的所有者已经处于Lifecycle.State.DESTROYED状态，LiveData 会忽略调用。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果给定的所有者、观察者元组已经在列表中，则忽略该调用。 如果观察者已经与另一个所有者在列表中，则 LiveData 会抛出IllegalArgumentException。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, <span class=\"meta\">@NonNull</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;observe&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ignore</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\">        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Adds the given observer to the observers list. This call is similar to</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> LiveData#observe(LifecycleOwner, Observer)&#125; with a LifecycleOwner, which</span></span><br><span class=\"line\"><span class=\"comment\">     * is always active. This means that the given observer will receive all events and will never</span></span><br><span class=\"line\"><span class=\"comment\">     * be automatically removed. You should manually call &#123;<span class=\"doctag\">@link</span> #removeObserver(Observer)&#125; to stop</span></span><br><span class=\"line\"><span class=\"comment\">     * observing this LiveData.</span></span><br><span class=\"line\"><span class=\"comment\">     * While LiveData has one of such observers, it will be considered</span></span><br><span class=\"line\"><span class=\"comment\">     * as active.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * If the observer was already added with an owner to this LiveData, LiveData throws an</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> IllegalArgumentException&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> observer The observer that will receive the events</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observeForever</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;observeForever&quot;</span>);</span><br><span class=\"line\">        AlwaysActiveObserver wrapper = <span class=\"keyword\">new</span> AlwaysActiveObserver(observer);</span><br><span class=\"line\">        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing <span class=\"keyword\">instanceof</span> LiveData.LifecycleBoundObserver) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        wrapper.activeStateChanged(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Removes the given observer from the observers list.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> observer The Observer to receive events.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;removeObserver&quot;</span>);</span><br><span class=\"line\">        ObserverWrapper removed = mObservers.remove(observer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (removed == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        removed.detachObserver();</span><br><span class=\"line\">        removed.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Removes all observers that are tied to the given &#123;<span class=\"doctag\">@link</span> LifecycleOwner&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> owner The &#123;<span class=\"doctag\">@code</span> LifecycleOwner&#125; scope for the observers to be removed.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObservers</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;removeObservers&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Observer&lt;? <span class=\"keyword\">super</span> T&gt;, ObserverWrapper&gt; entry : mObservers) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (entry.getValue().isAttachedTo(owner)) &#123;</span><br><span class=\"line\">                removeObserver(entry.getKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Posts a task to a main thread to set the given value. So if you have a following code</span></span><br><span class=\"line\"><span class=\"comment\">     * executed in the main thread:</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;pre class=&quot;prettyprint&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * liveData.postValue(&quot;a&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">     * liveData.setValue(&quot;b&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * The value &quot;b&quot; would be set at first and later the main thread would override it with</span></span><br><span class=\"line\"><span class=\"comment\">     * the value &quot;a&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * If you called this method multiple times before a main thread executed a posted task, only</span></span><br><span class=\"line\"><span class=\"comment\">     * the last value would be dispatched.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value The new value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">            postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">            mPendingData = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!postTask) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets the value. If there are active observers, the value will be dispatched to them.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This method must be called from the main thread. If you need set a value from a background</span></span><br><span class=\"line\"><span class=\"comment\">     * thread, you can use &#123;<span class=\"doctag\">@link</span> #postValue(Object)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value The new value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;setValue&quot;</span>);</span><br><span class=\"line\">        mVersion++;</span><br><span class=\"line\">        mData = value;</span><br><span class=\"line\">        dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that calling this method on a background thread does not guarantee that the latest</span></span><br><span class=\"line\"><span class=\"comment\">     * value set will be received.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the current value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object data = mData;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data != NOT_SET) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVersion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mVersion;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Called when the number of active observers change from 0 to 1.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This callback can be used to know that this LiveData is being used thus should be kept</span></span><br><span class=\"line\"><span class=\"comment\">     * up to date.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Called when the number of active observers change from 1 to 0.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This does not mean that there are no observers left, there may still be observers but their</span></span><br><span class=\"line\"><span class=\"comment\">     * lifecycle states aren&#x27;t &#123;<span class=\"doctag\">@link</span> Lifecycle.State#STARTED&#125; or &#123;<span class=\"doctag\">@link</span> Lifecycle.State#RESUMED&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * (like an Activity in the back stack).</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * You can check if there are observers via &#123;<span class=\"doctag\">@link</span> #hasObservers()&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onInactive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns true if this LiveData has observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this LiveData has observers</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mObservers.size() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns true if this LiveData has active observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this LiveData has active observers</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasActiveObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mActiveCount &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">changeActiveCounter</span><span class=\"params\">(<span class=\"keyword\">int</span> change)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> previousActiveCount = mActiveCount;</span><br><span class=\"line\">        mActiveCount += change;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mChangingActiveState) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mChangingActiveState = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (previousActiveCount != mActiveCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> needToCallActive = previousActiveCount == <span class=\"number\">0</span> &amp;&amp; mActiveCount &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> needToCallInactive = previousActiveCount &gt; <span class=\"number\">0</span> &amp;&amp; mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">                previousActiveCount = mActiveCount;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (needToCallActive) &#123;</span><br><span class=\"line\">                    onActive();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (needToCallInactive) &#123;</span><br><span class=\"line\">                    onInactive();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            mChangingActiveState = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleEventObserver</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> LifecycleOwner mOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">        LifecycleBoundObserver(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(observer);</span><br><span class=\"line\">            mOwner = owner;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner source,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">            Lifecycle.State currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentState == DESTROYED) &#123;</span><br><span class=\"line\">                removeObserver(mObserver);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Lifecycle.State prevState = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (prevState != currentState) &#123;</span><br><span class=\"line\">                prevState = currentState;</span><br><span class=\"line\">                activeStateChanged(shouldBeActive());</span><br><span class=\"line\">                currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mOwner == owner;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            mOwner.getLifecycle().removeObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverWrapper</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; mObserver;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> mActive;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mLastVersion = START_VERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">        ObserverWrapper(Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">            mObserver = observer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newActive == mActive) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// immediately set active state, so we&#x27;d never dispatch anything to inactive</span></span><br><span class=\"line\">            <span class=\"comment\">// owner</span></span><br><span class=\"line\">            mActive = newActive;</span><br><span class=\"line\">            changeActiveCounter(mActive ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mActive) &#123;</span><br><span class=\"line\">                dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlwaysActiveObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        AlwaysActiveObserver(Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">assertMainThread</span><span class=\"params\">(String methodName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ArchTaskExecutor.getInstance().isMainThread()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Cannot invoke &quot;</span> + methodName + <span class=\"string\">&quot; on a background&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; thread&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>涉及到Lifecycle，LifecycleOwner，LifecycleBoundObserver，ObserverWrapper，LifecycleEventObserver</p>\n<p>感知生命周期，是因为observe（）方法传入了LifecycleOwner，ComponentActivity实现了此接口，获取到了Lifecycle</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h4><p>post是怎样执行的？</p>\n<p>开启了一个主线程，由此可以得知设置livedata的值只能在主线程中。</p>\n<p>何为粘性事件？<br>即发射的事件如果早于注册，那么注册之后依然可以接收到的事件称为粘性事件</p>\n<p>“数据倒灌”一词出自<a href=\"https://links.jianshu.com/go?to=https://xiaozhuanlan.com/u/kunminx\">KunMinX</a>的Blog<a href=\"https://links.jianshu.com/go?to=https://xiaozhuanlan.com/topic/6719328450\"><strong>重学安卓：LiveData 数据倒灌 背景缘由全貌 独家解析</strong></a>,即在setValue后,observe对此次set的value值会进行多次消费。比如进行第二次observe的时候获取到的数据是第一次的旧数据。这样会带来不可预期的后果。</p>\n<p><a href=\"https://www.jianshu.com/p/e08287ec62cd\">https://www.jianshu.com/p/e08287ec62cd</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/o61NDIptP94X4HspKwiR2w\">https://mp.weixin.qq.com/s/o61NDIptP94X4HspKwiR2w</a></p>\n<p><a href=\"https://www.jianshu.com/p/d0244c4c7cc9\">https://www.jianshu.com/p/d0244c4c7cc9</a></p>\n"},{"title":"T.()->Unit","date":"2021-09-24T05:57:58.000Z","_content":"\nT.()->Unit相当于是给类T定义了一个扩展函数，该函数没有形参，没有返回值；\n\n```kotlin\ntypealias CallBack<T> = TestCallBack<T>.()->Unit\n\nfun test(callback:CallBack<T>){\n    val test = TestCallBack<T>()\n    test.callback()\n}\n```\n\n这里callback就相当于一个TestCallBack的扩展函数，所以可以test.callback()\n\n","source":"_posts/T-Unit.md","raw":"---\ntitle: T.()->Unit\ndate: 2021-09-24 13:57:58\ntags: Kotlin\ncategories: Kotlin\n---\n\nT.()->Unit相当于是给类T定义了一个扩展函数，该函数没有形参，没有返回值；\n\n```kotlin\ntypealias CallBack<T> = TestCallBack<T>.()->Unit\n\nfun test(callback:CallBack<T>){\n    val test = TestCallBack<T>()\n    test.callback()\n}\n```\n\n这里callback就相当于一个TestCallBack的扩展函数，所以可以test.callback()\n\n","slug":"T-Unit","published":1,"updated":"2021-10-08T08:41:46.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep7000q7wgsew13dyx5","content":"<p>T.()-&gt;Unit相当于是给类T定义了一个扩展函数，该函数没有形参，没有返回值；</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> CallBack&lt;T&gt; = TestCallBack&lt;T&gt;.()-&gt;<span class=\"built_in\">Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">(callback:<span class=\"type\">CallBack</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> test = TestCallBack&lt;T&gt;()</span><br><span class=\"line\">    test.callback()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里callback就相当于一个TestCallBack的扩展函数，所以可以test.callback()</p>\n","site":{"data":{}},"excerpt":"","more":"<p>T.()-&gt;Unit相当于是给类T定义了一个扩展函数，该函数没有形参，没有返回值；</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> CallBack&lt;T&gt; = TestCallBack&lt;T&gt;.()-&gt;<span class=\"built_in\">Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">(callback:<span class=\"type\">CallBack</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> test = TestCallBack&lt;T&gt;()</span><br><span class=\"line\">    test.callback()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里callback就相当于一个TestCallBack的扩展函数，所以可以test.callback()</p>\n"},{"title":"TypeError: line.matchAll is not a function","date":"2021-09-25T03:14:32.000Z","categroies":"hexo","_content":"\n执行`hexo server`，报错：\n\n![image-20210925111618240](image-20210925111618240.png)\n\n\n\n此问题是node版本较老导致的；查看node版本，是v10.15.3，因此需要进行升级；\n\n**node升级（MAC）**\n\n1. 安装node版本管理模块\n\n   ```java\n   npm -g i -n\n   //mac电脑，若无权限，需执行：\n   sudo npm -g i -n\n   ```\n\n   \n\n2. 执行升级命令\n\n   ```java\n   n stable  //安装稳定版本\n   n latest  //安装最新版本\n   n (指定版本号)  //n 14.17.6\n   ```\n\n   \n\n","source":"_posts/TypeError-line-matchAll-is-not-a-function.md","raw":"---\ntitle: 'TypeError: line.matchAll is not a function'\ndate: 2021-09-25 11:14:32\ntags: hexo\ncategroies: hexo\n---\n\n执行`hexo server`，报错：\n\n![image-20210925111618240](image-20210925111618240.png)\n\n\n\n此问题是node版本较老导致的；查看node版本，是v10.15.3，因此需要进行升级；\n\n**node升级（MAC）**\n\n1. 安装node版本管理模块\n\n   ```java\n   npm -g i -n\n   //mac电脑，若无权限，需执行：\n   sudo npm -g i -n\n   ```\n\n   \n\n2. 执行升级命令\n\n   ```java\n   n stable  //安装稳定版本\n   n latest  //安装最新版本\n   n (指定版本号)  //n 14.17.6\n   ```\n\n   \n\n","slug":"TypeError-line-matchAll-is-not-a-function","published":1,"updated":"2021-10-08T08:41:46.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep9000v7wgsgqz8765k","content":"<p>执行<code>hexo server</code>，报错：</p>\n<p><img src=\"/2021/09/25/TypeError-line-matchAll-is-not-a-function/image-20210925111618240.png\" alt=\"image-20210925111618240\"></p>\n<p>此问题是node版本较老导致的；查看node版本，是v10.15.3，因此需要进行升级；</p>\n<p><strong>node升级（MAC）</strong></p>\n<ol>\n<li><p>安装node版本管理模块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g i -n</span><br><span class=\"line\"><span class=\"comment\">//mac电脑，若无权限，需执行：</span></span><br><span class=\"line\">sudo npm -g i -n</span><br></pre></td></tr></table></figure></li>\n<li><p>执行升级命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n stable  <span class=\"comment\">//安装稳定版本</span></span><br><span class=\"line\">n latest  <span class=\"comment\">//安装最新版本</span></span><br><span class=\"line\">n (指定版本号)  <span class=\"comment\">//n 14.17.6</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>执行<code>hexo server</code>，报错：</p>\n<p><img src=\"/2021/09/25/TypeError-line-matchAll-is-not-a-function/image-20210925111618240.png\" alt=\"image-20210925111618240\"></p>\n<p>此问题是node版本较老导致的；查看node版本，是v10.15.3，因此需要进行升级；</p>\n<p><strong>node升级（MAC）</strong></p>\n<ol>\n<li><p>安装node版本管理模块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g i -n</span><br><span class=\"line\"><span class=\"comment\">//mac电脑，若无权限，需执行：</span></span><br><span class=\"line\">sudo npm -g i -n</span><br></pre></td></tr></table></figure></li>\n<li><p>执行升级命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n stable  <span class=\"comment\">//安装稳定版本</span></span><br><span class=\"line\">n latest  <span class=\"comment\">//安装最新版本</span></span><br><span class=\"line\">n (指定版本号)  <span class=\"comment\">//n 14.17.6</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"ViewModel如何数据共享","date":"2021-10-22T05:51:37.000Z","_content":"\n当我们创建一个ViewModel类，获取其实例是通过ViewModelProvider\n```\nval testViewModel = ViewModelProvider(this).get(TestViewModel::class.java)\n```\n或者采用kotlin中的viewModels\n```\nprivate val testViewModel by viewModels<TestViewModel>()\n```\n\nactivity和fragment组件之间的数据共享，这个不用多说，因为ViewModel是activity销毁的时候才clear，作用域是activity的生命周期，因此fragment可以持有同一个ViewModel的示例，从而共享activity的数据\n\n\n\nViewModelProvider(this) 的参数是ViewModelStoreOwner接口，ComponentActivity实现了ViewModelStoreOwner；由此把ViewModel和Activity关联起来\n\n\n\nViewModel的作用：\n\n```\nViewModel 是一个负责为Activity或Fragment准备和管理数据的类。 它还处理 Activity/Fragment 与应用程序其余部分的通信（例如调用业务逻辑类）。\nViewModel 始终与作用域（片段或活动）相关联地创建，并且只要作用域处于活动状态就会保留。 例如，如果它是一个活动，直到它完成。\n换句话说，这意味着如果 ViewModel 的所有者因配置更改（例如旋转）而被销毁，则它不会被销毁。 新的所有者实例只是重新连接到现有模型。\nViewModel 的目的是获取和保存 Activity 或 Fragment 所需的信息。 Activity 或 Fragment 应该能够观察到 ViewModel 中的变化。 ViewModel 通常通过LiveData或 Android 数据绑定公开这些信息。 您还可以使用您喜欢的框架中的任何可观察性构造。\nViewModel 的唯一职责是管理 UI 的数据。 它永远不应该访问您的视图层次结构或保留对 Activity 或 Fragment 的引用。\n```\n\n- 1.规范化了`ViewModel`的基类；\n- 2.`ViewModel`不会随着`Activity`的屏幕旋转而销毁；\n- 3.在对应的作用域内，保正只生产出对应的唯一实例，保证UI组件间的通信\n\n\n\n\n\n**如何实现屏幕旋转数据也会保存的？**\n\n```java\n//----ComponentActivity\t\n\t/**\n     * Retain all appropriate non-config state.  You can NOT\n     * override this yourself!  Use a {@link androidx.lifecycle.ViewModel} if you want to\n     * retain your own non config state.\n     * 保留所有适当的非配置状态。 你不能自己覆盖它！ \n     * 如果您想保留自己的非配置状态，请使用androidx.lifecycle.ViewModel \n     */\n    @Override\n    @Nullable\n\t//保留非配置实例\n    public final Object onRetainNonConfigurationInstance() {\n        Object custom = onRetainCustomNonConfigurationInstance();\n\n        ViewModelStore viewModelStore = mViewModelStore;\n        if (viewModelStore == null) {\n            // No one called getViewModelStore(), so see if there was an existing\n            // ViewModelStore from our last NonConfigurationInstance\n            NonConfigurationInstances nc =\n                    (NonConfigurationInstances) getLastNonConfigurationInstance();\n            if (nc != null) {\n                viewModelStore = nc.viewModelStore;\n            }\n        }\n\n        if (viewModelStore == null && custom == null) {\n            return null;\n        }\n\n        NonConfigurationInstances nci = new NonConfigurationInstances();\n        nci.custom = custom;\n        nci.viewModelStore = viewModelStore;\n        return nci;\n    }\n\n\t/**\n     * Returns the {@link ViewModelStore} associated with this activity\n     * <p>\n     * 返回与此activity关联的ViewModelStore\n     */\n    @NonNull\n    @Override\n    public ViewModelStore getViewModelStore() {\n        ...\n        if (mViewModelStore == null) {\n            NonConfigurationInstances nc =\n                    (NonConfigurationInstances) getLastNonConfigurationInstance();\n            if (nc != null) {\n                // Restore the ViewModelStore from NonConfigurationInstances\n                mViewModelStore = nc.viewModelStore;\n            }\n            if (mViewModelStore == null) {\n                mViewModelStore = new ViewModelStore();\n            }\n        }\n        return mViewModelStore;\n    }\n```\n\n根据上面ComponentActivity中的源码，可以看到当调用getViewModelStore（）时，会先去获取之前的实例getLastNonConfigurationInstance()，也是就是我们ViewModel中的数据，而方法onRetainNonConfigurationInstance（）是覆写的，其触发方式，父类Activity中的方法注释也指出`Called by the system`\n\n\n\n\n\n\n\n```java\n/**\n     * Returns an existing ViewModel or creates a new one in the scope (usually, a fragment or\n     * an activity), associated with this {@code ViewModelProvider}.\n     * <p>\n     * The created ViewModel is associated with the given scope and will be retained\n     * as long as the scope is alive (e.g. if it is an activity, until it is\n     * finished or process is killed).\n     */\n    @NonNull\n    @MainThread\n    public <T extends ViewModel> T get(@NonNull Class<T> modelClass) {\n        String canonicalName = modelClass.getCanonicalName();\n        if (canonicalName == null) {\n            throw new IllegalArgumentException(\"Local and anonymous classes can not be ViewModels\");\n        }\n        return get(DEFAULT_KEY + \":\" + canonicalName, modelClass);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @NonNull\n    @MainThread\n    public <T extends ViewModel> T get(@NonNull String key, @NonNull Class<T> modelClass) {\n        ViewModel viewModel = mViewModelStore.get(key);\n\n        if (modelClass.isInstance(viewModel)) {\n            if (mFactory instanceof OnRequeryFactory) {\n                ((OnRequeryFactory) mFactory).onRequery(viewModel);\n            }\n            return (T) viewModel;\n        } else {\n            //noinspection StatementWithEmptyBody\n            if (viewModel != null) {\n                // TODO: log a warning.\n            }\n        }\n        if (mFactory instanceof KeyedFactory) {\n            viewModel = ((KeyedFactory) mFactory).create(key, modelClass);\n        } else {\n            viewModel = mFactory.create(modelClass);\n        }\n        mViewModelStore.put(key, viewModel);\n        return (T) viewModel;\n    }\n```\n\n\n\nViewModel和ViewModelStore的源码都很简单\n\n\n\nViewModelStore内部就是HashMap存储ViewModel\n\n```java\npublic class ViewModelStore {\n\n    private final HashMap<String, ViewModel> mMap = new HashMap<>();\n\n    final void put(String key, ViewModel viewModel) {\n        ViewModel oldViewModel = mMap.put(key, viewModel);\n        if (oldViewModel != null) {\n            oldViewModel.onCleared();\n        }\n    }\n\n    final ViewModel get(String key) {\n        return mMap.get(key);\n    }\n\n    Set<String> keys() {\n        return new HashSet<>(mMap.keySet());\n    }\n\n    /**\n     *  Clears internal storage and notifies ViewModels that they are no longer used.\n     */\n    public final void clear() {\n        for (ViewModel vm : mMap.values()) {\n            vm.clear();\n        }\n        mMap.clear();\n    }\n}\n```\n\n","source":"_posts/ViewModel如何数据共享.md","raw":"title: ViewModel如何数据共享\ndate: 2021-10-22 13:51:37\ntags: Android\ncategories: Android\n\n------\n\n当我们创建一个ViewModel类，获取其实例是通过ViewModelProvider\n```\nval testViewModel = ViewModelProvider(this).get(TestViewModel::class.java)\n```\n或者采用kotlin中的viewModels\n```\nprivate val testViewModel by viewModels<TestViewModel>()\n```\n\nactivity和fragment组件之间的数据共享，这个不用多说，因为ViewModel是activity销毁的时候才clear，作用域是activity的生命周期，因此fragment可以持有同一个ViewModel的示例，从而共享activity的数据\n\n\n\nViewModelProvider(this) 的参数是ViewModelStoreOwner接口，ComponentActivity实现了ViewModelStoreOwner；由此把ViewModel和Activity关联起来\n\n\n\nViewModel的作用：\n\n```\nViewModel 是一个负责为Activity或Fragment准备和管理数据的类。 它还处理 Activity/Fragment 与应用程序其余部分的通信（例如调用业务逻辑类）。\nViewModel 始终与作用域（片段或活动）相关联地创建，并且只要作用域处于活动状态就会保留。 例如，如果它是一个活动，直到它完成。\n换句话说，这意味着如果 ViewModel 的所有者因配置更改（例如旋转）而被销毁，则它不会被销毁。 新的所有者实例只是重新连接到现有模型。\nViewModel 的目的是获取和保存 Activity 或 Fragment 所需的信息。 Activity 或 Fragment 应该能够观察到 ViewModel 中的变化。 ViewModel 通常通过LiveData或 Android 数据绑定公开这些信息。 您还可以使用您喜欢的框架中的任何可观察性构造。\nViewModel 的唯一职责是管理 UI 的数据。 它永远不应该访问您的视图层次结构或保留对 Activity 或 Fragment 的引用。\n```\n\n- 1.规范化了`ViewModel`的基类；\n- 2.`ViewModel`不会随着`Activity`的屏幕旋转而销毁；\n- 3.在对应的作用域内，保正只生产出对应的唯一实例，保证UI组件间的通信\n\n\n\n\n\n**如何实现屏幕旋转数据也会保存的？**\n\n```java\n//----ComponentActivity\t\n\t/**\n     * Retain all appropriate non-config state.  You can NOT\n     * override this yourself!  Use a {@link androidx.lifecycle.ViewModel} if you want to\n     * retain your own non config state.\n     * 保留所有适当的非配置状态。 你不能自己覆盖它！ \n     * 如果您想保留自己的非配置状态，请使用androidx.lifecycle.ViewModel \n     */\n    @Override\n    @Nullable\n\t//保留非配置实例\n    public final Object onRetainNonConfigurationInstance() {\n        Object custom = onRetainCustomNonConfigurationInstance();\n\n        ViewModelStore viewModelStore = mViewModelStore;\n        if (viewModelStore == null) {\n            // No one called getViewModelStore(), so see if there was an existing\n            // ViewModelStore from our last NonConfigurationInstance\n            NonConfigurationInstances nc =\n                    (NonConfigurationInstances) getLastNonConfigurationInstance();\n            if (nc != null) {\n                viewModelStore = nc.viewModelStore;\n            }\n        }\n\n        if (viewModelStore == null && custom == null) {\n            return null;\n        }\n\n        NonConfigurationInstances nci = new NonConfigurationInstances();\n        nci.custom = custom;\n        nci.viewModelStore = viewModelStore;\n        return nci;\n    }\n\n\t/**\n     * Returns the {@link ViewModelStore} associated with this activity\n     * <p>\n     * 返回与此activity关联的ViewModelStore\n     */\n    @NonNull\n    @Override\n    public ViewModelStore getViewModelStore() {\n        ...\n        if (mViewModelStore == null) {\n            NonConfigurationInstances nc =\n                    (NonConfigurationInstances) getLastNonConfigurationInstance();\n            if (nc != null) {\n                // Restore the ViewModelStore from NonConfigurationInstances\n                mViewModelStore = nc.viewModelStore;\n            }\n            if (mViewModelStore == null) {\n                mViewModelStore = new ViewModelStore();\n            }\n        }\n        return mViewModelStore;\n    }\n```\n\n根据上面ComponentActivity中的源码，可以看到当调用getViewModelStore（）时，会先去获取之前的实例getLastNonConfigurationInstance()，也是就是我们ViewModel中的数据，而方法onRetainNonConfigurationInstance（）是覆写的，其触发方式，父类Activity中的方法注释也指出`Called by the system`\n\n\n\n\n\n\n\n```java\n/**\n     * Returns an existing ViewModel or creates a new one in the scope (usually, a fragment or\n     * an activity), associated with this {@code ViewModelProvider}.\n     * <p>\n     * The created ViewModel is associated with the given scope and will be retained\n     * as long as the scope is alive (e.g. if it is an activity, until it is\n     * finished or process is killed).\n     */\n    @NonNull\n    @MainThread\n    public <T extends ViewModel> T get(@NonNull Class<T> modelClass) {\n        String canonicalName = modelClass.getCanonicalName();\n        if (canonicalName == null) {\n            throw new IllegalArgumentException(\"Local and anonymous classes can not be ViewModels\");\n        }\n        return get(DEFAULT_KEY + \":\" + canonicalName, modelClass);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @NonNull\n    @MainThread\n    public <T extends ViewModel> T get(@NonNull String key, @NonNull Class<T> modelClass) {\n        ViewModel viewModel = mViewModelStore.get(key);\n\n        if (modelClass.isInstance(viewModel)) {\n            if (mFactory instanceof OnRequeryFactory) {\n                ((OnRequeryFactory) mFactory).onRequery(viewModel);\n            }\n            return (T) viewModel;\n        } else {\n            //noinspection StatementWithEmptyBody\n            if (viewModel != null) {\n                // TODO: log a warning.\n            }\n        }\n        if (mFactory instanceof KeyedFactory) {\n            viewModel = ((KeyedFactory) mFactory).create(key, modelClass);\n        } else {\n            viewModel = mFactory.create(modelClass);\n        }\n        mViewModelStore.put(key, viewModel);\n        return (T) viewModel;\n    }\n```\n\n\n\nViewModel和ViewModelStore的源码都很简单\n\n\n\nViewModelStore内部就是HashMap存储ViewModel\n\n```java\npublic class ViewModelStore {\n\n    private final HashMap<String, ViewModel> mMap = new HashMap<>();\n\n    final void put(String key, ViewModel viewModel) {\n        ViewModel oldViewModel = mMap.put(key, viewModel);\n        if (oldViewModel != null) {\n            oldViewModel.onCleared();\n        }\n    }\n\n    final ViewModel get(String key) {\n        return mMap.get(key);\n    }\n\n    Set<String> keys() {\n        return new HashSet<>(mMap.keySet());\n    }\n\n    /**\n     *  Clears internal storage and notifies ViewModels that they are no longer used.\n     */\n    public final void clear() {\n        for (ViewModel vm : mMap.values()) {\n            vm.clear();\n        }\n        mMap.clear();\n    }\n}\n```\n\n","slug":"ViewModel如何数据共享","published":1,"updated":"2021-10-22T07:53:13.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepb000y7wgsawx41keh","content":"<p>当我们创建一个ViewModel类，获取其实例是通过ViewModelProvider</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val testViewModel = ViewModelProvider(this).get(TestViewModel::class.java)</span><br></pre></td></tr></table></figure>\n<p>或者采用kotlin中的viewModels</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private val testViewModel by viewModels&lt;TestViewModel&gt;()</span><br></pre></td></tr></table></figure>\n\n<p>activity和fragment组件之间的数据共享，这个不用多说，因为ViewModel是activity销毁的时候才clear，作用域是activity的生命周期，因此fragment可以持有同一个ViewModel的示例，从而共享activity的数据</p>\n<p>ViewModelProvider(this) 的参数是ViewModelStoreOwner接口，ComponentActivity实现了ViewModelStoreOwner；由此把ViewModel和Activity关联起来</p>\n<p>ViewModel的作用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewModel 是一个负责为Activity或Fragment准备和管理数据的类。 它还处理 Activity/Fragment 与应用程序其余部分的通信（例如调用业务逻辑类）。</span><br><span class=\"line\">ViewModel 始终与作用域（片段或活动）相关联地创建，并且只要作用域处于活动状态就会保留。 例如，如果它是一个活动，直到它完成。</span><br><span class=\"line\">换句话说，这意味着如果 ViewModel 的所有者因配置更改（例如旋转）而被销毁，则它不会被销毁。 新的所有者实例只是重新连接到现有模型。</span><br><span class=\"line\">ViewModel 的目的是获取和保存 Activity 或 Fragment 所需的信息。 Activity 或 Fragment 应该能够观察到 ViewModel 中的变化。 ViewModel 通常通过LiveData或 Android 数据绑定公开这些信息。 您还可以使用您喜欢的框架中的任何可观察性构造。</span><br><span class=\"line\">ViewModel 的唯一职责是管理 UI 的数据。 它永远不应该访问您的视图层次结构或保留对 Activity 或 Fragment 的引用。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>1.规范化了<code>ViewModel</code>的基类；</li>\n<li>2.<code>ViewModel</code>不会随着<code>Activity</code>的屏幕旋转而销毁；</li>\n<li>3.在对应的作用域内，保正只生产出对应的唯一实例，保证UI组件间的通信</li>\n</ul>\n<p><strong>如何实现屏幕旋转数据也会保存的？</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//----ComponentActivity\t</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Retain all appropriate non-config state.  You can NOT</span></span><br><span class=\"line\"><span class=\"comment\">     * override this yourself!  Use a &#123;<span class=\"doctag\">@link</span> androidx.lifecycle.ViewModel&#125; if you want to</span></span><br><span class=\"line\"><span class=\"comment\">     * retain your own non config state.</span></span><br><span class=\"line\"><span class=\"comment\">     * 保留所有适当的非配置状态。 你不能自己覆盖它！ </span></span><br><span class=\"line\"><span class=\"comment\">     * 如果您想保留自己的非配置状态，请使用androidx.lifecycle.ViewModel </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"comment\">//保留非配置实例</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Object <span class=\"title\">onRetainNonConfigurationInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object custom = onRetainCustomNonConfigurationInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        ViewModelStore viewModelStore = mViewModelStore;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (viewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No one called getViewModelStore(), so see if there was an existing</span></span><br><span class=\"line\">            <span class=\"comment\">// ViewModelStore from our last NonConfigurationInstance</span></span><br><span class=\"line\">            NonConfigurationInstances nc =</span><br><span class=\"line\">                    (NonConfigurationInstances) getLastNonConfigurationInstance();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nc != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                viewModelStore = nc.viewModelStore;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (viewModelStore == <span class=\"keyword\">null</span> &amp;&amp; custom == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        NonConfigurationInstances nci = <span class=\"keyword\">new</span> NonConfigurationInstances();</span><br><span class=\"line\">        nci.custom = custom;</span><br><span class=\"line\">        nci.viewModelStore = viewModelStore;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nci;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the &#123;<span class=\"doctag\">@link</span> ViewModelStore&#125; associated with this activity</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回与此activity关联的ViewModelStore</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ViewModelStore <span class=\"title\">getViewModelStore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mViewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            NonConfigurationInstances nc =</span><br><span class=\"line\">                    (NonConfigurationInstances) getLastNonConfigurationInstance();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nc != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Restore the ViewModelStore from NonConfigurationInstances</span></span><br><span class=\"line\">                mViewModelStore = nc.viewModelStore;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mViewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mViewModelStore = <span class=\"keyword\">new</span> ViewModelStore();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mViewModelStore;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据上面ComponentActivity中的源码，可以看到当调用getViewModelStore（）时，会先去获取之前的实例getLastNonConfigurationInstance()，也是就是我们ViewModel中的数据，而方法onRetainNonConfigurationInstance（）是覆写的，其触发方式，父类Activity中的方法注释也指出<code>Called by the system</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns an existing ViewModel or creates a new one in the scope (usually, a fragment or</span></span><br><span class=\"line\"><span class=\"comment\">     * an activity), associated with this &#123;<span class=\"doctag\">@code</span> ViewModelProvider&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * The created ViewModel is associated with the given scope and will be retained</span></span><br><span class=\"line\"><span class=\"comment\">     * as long as the scope is alive (e.g. if it is an activity, until it is</span></span><br><span class=\"line\"><span class=\"comment\">     * finished or process is killed).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class=\"line\">        String canonicalName = modelClass.getCanonicalName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (canonicalName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Local and anonymous classes can not be ViewModels&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(DEFAULT_KEY + <span class=\"string\">&quot;:&quot;</span> + canonicalName, modelClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> String key, <span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class=\"line\">        ViewModel viewModel = mViewModelStore.get(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFactory <span class=\"keyword\">instanceof</span> OnRequeryFactory) &#123;</span><br><span class=\"line\">                ((OnRequeryFactory) mFactory).onRequery(viewModel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//noinspection StatementWithEmptyBody</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (viewModel != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> log a warning.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory <span class=\"keyword\">instanceof</span> KeyedFactory) &#123;</span><br><span class=\"line\">            viewModel = ((KeyedFactory) mFactory).create(key, modelClass);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            viewModel = mFactory.create(modelClass);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mViewModelStore.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>ViewModel和ViewModelStore的源码都很简单</p>\n<p>ViewModelStore内部就是HashMap存储ViewModel</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelStore</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class=\"line\">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldViewModel != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            oldViewModel.onCleared();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> ViewModel <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mMap.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Set&lt;String&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;&gt;(mMap.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Clears internal storage and notifies ViewModels that they are no longer used.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ViewModel vm : mMap.values()) &#123;</span><br><span class=\"line\">            vm.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mMap.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>当我们创建一个ViewModel类，获取其实例是通过ViewModelProvider</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val testViewModel = ViewModelProvider(this).get(TestViewModel::class.java)</span><br></pre></td></tr></table></figure>\n<p>或者采用kotlin中的viewModels</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private val testViewModel by viewModels&lt;TestViewModel&gt;()</span><br></pre></td></tr></table></figure>\n\n<p>activity和fragment组件之间的数据共享，这个不用多说，因为ViewModel是activity销毁的时候才clear，作用域是activity的生命周期，因此fragment可以持有同一个ViewModel的示例，从而共享activity的数据</p>\n<p>ViewModelProvider(this) 的参数是ViewModelStoreOwner接口，ComponentActivity实现了ViewModelStoreOwner；由此把ViewModel和Activity关联起来</p>\n<p>ViewModel的作用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewModel 是一个负责为Activity或Fragment准备和管理数据的类。 它还处理 Activity/Fragment 与应用程序其余部分的通信（例如调用业务逻辑类）。</span><br><span class=\"line\">ViewModel 始终与作用域（片段或活动）相关联地创建，并且只要作用域处于活动状态就会保留。 例如，如果它是一个活动，直到它完成。</span><br><span class=\"line\">换句话说，这意味着如果 ViewModel 的所有者因配置更改（例如旋转）而被销毁，则它不会被销毁。 新的所有者实例只是重新连接到现有模型。</span><br><span class=\"line\">ViewModel 的目的是获取和保存 Activity 或 Fragment 所需的信息。 Activity 或 Fragment 应该能够观察到 ViewModel 中的变化。 ViewModel 通常通过LiveData或 Android 数据绑定公开这些信息。 您还可以使用您喜欢的框架中的任何可观察性构造。</span><br><span class=\"line\">ViewModel 的唯一职责是管理 UI 的数据。 它永远不应该访问您的视图层次结构或保留对 Activity 或 Fragment 的引用。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>1.规范化了<code>ViewModel</code>的基类；</li>\n<li>2.<code>ViewModel</code>不会随着<code>Activity</code>的屏幕旋转而销毁；</li>\n<li>3.在对应的作用域内，保正只生产出对应的唯一实例，保证UI组件间的通信</li>\n</ul>\n<p><strong>如何实现屏幕旋转数据也会保存的？</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//----ComponentActivity\t</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Retain all appropriate non-config state.  You can NOT</span></span><br><span class=\"line\"><span class=\"comment\">     * override this yourself!  Use a &#123;<span class=\"doctag\">@link</span> androidx.lifecycle.ViewModel&#125; if you want to</span></span><br><span class=\"line\"><span class=\"comment\">     * retain your own non config state.</span></span><br><span class=\"line\"><span class=\"comment\">     * 保留所有适当的非配置状态。 你不能自己覆盖它！ </span></span><br><span class=\"line\"><span class=\"comment\">     * 如果您想保留自己的非配置状态，请使用androidx.lifecycle.ViewModel </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"comment\">//保留非配置实例</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Object <span class=\"title\">onRetainNonConfigurationInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object custom = onRetainCustomNonConfigurationInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        ViewModelStore viewModelStore = mViewModelStore;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (viewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No one called getViewModelStore(), so see if there was an existing</span></span><br><span class=\"line\">            <span class=\"comment\">// ViewModelStore from our last NonConfigurationInstance</span></span><br><span class=\"line\">            NonConfigurationInstances nc =</span><br><span class=\"line\">                    (NonConfigurationInstances) getLastNonConfigurationInstance();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nc != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                viewModelStore = nc.viewModelStore;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (viewModelStore == <span class=\"keyword\">null</span> &amp;&amp; custom == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        NonConfigurationInstances nci = <span class=\"keyword\">new</span> NonConfigurationInstances();</span><br><span class=\"line\">        nci.custom = custom;</span><br><span class=\"line\">        nci.viewModelStore = viewModelStore;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nci;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the &#123;<span class=\"doctag\">@link</span> ViewModelStore&#125; associated with this activity</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回与此activity关联的ViewModelStore</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ViewModelStore <span class=\"title\">getViewModelStore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mViewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            NonConfigurationInstances nc =</span><br><span class=\"line\">                    (NonConfigurationInstances) getLastNonConfigurationInstance();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nc != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Restore the ViewModelStore from NonConfigurationInstances</span></span><br><span class=\"line\">                mViewModelStore = nc.viewModelStore;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mViewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mViewModelStore = <span class=\"keyword\">new</span> ViewModelStore();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mViewModelStore;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据上面ComponentActivity中的源码，可以看到当调用getViewModelStore（）时，会先去获取之前的实例getLastNonConfigurationInstance()，也是就是我们ViewModel中的数据，而方法onRetainNonConfigurationInstance（）是覆写的，其触发方式，父类Activity中的方法注释也指出<code>Called by the system</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns an existing ViewModel or creates a new one in the scope (usually, a fragment or</span></span><br><span class=\"line\"><span class=\"comment\">     * an activity), associated with this &#123;<span class=\"doctag\">@code</span> ViewModelProvider&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * The created ViewModel is associated with the given scope and will be retained</span></span><br><span class=\"line\"><span class=\"comment\">     * as long as the scope is alive (e.g. if it is an activity, until it is</span></span><br><span class=\"line\"><span class=\"comment\">     * finished or process is killed).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class=\"line\">        String canonicalName = modelClass.getCanonicalName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (canonicalName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Local and anonymous classes can not be ViewModels&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(DEFAULT_KEY + <span class=\"string\">&quot;:&quot;</span> + canonicalName, modelClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> String key, <span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class=\"line\">        ViewModel viewModel = mViewModelStore.get(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFactory <span class=\"keyword\">instanceof</span> OnRequeryFactory) &#123;</span><br><span class=\"line\">                ((OnRequeryFactory) mFactory).onRequery(viewModel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//noinspection StatementWithEmptyBody</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (viewModel != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> log a warning.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory <span class=\"keyword\">instanceof</span> KeyedFactory) &#123;</span><br><span class=\"line\">            viewModel = ((KeyedFactory) mFactory).create(key, modelClass);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            viewModel = mFactory.create(modelClass);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mViewModelStore.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>ViewModel和ViewModelStore的源码都很简单</p>\n<p>ViewModelStore内部就是HashMap存储ViewModel</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelStore</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class=\"line\">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldViewModel != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            oldViewModel.onCleared();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> ViewModel <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mMap.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Set&lt;String&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;&gt;(mMap.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Clears internal storage and notifies ViewModels that they are no longer used.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ViewModel vm : mMap.values()) &#123;</span><br><span class=\"line\">            vm.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mMap.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Android View绘制的完整流程及知识点","date":"2021-10-04T05:21:09.000Z","_content":"\n具体源码整理如下[流程图](https://www.processon.com/view/link/61600cfbf346fb0e99a6d639)\n\n![源码流程图](源码流程图.png)\n\n梳理过源码后，再看相关的知识点：\n\n1. 首次 View 的绘制流程是在什么时候触发的？\n2. ViewRootImpl 创建的时机？\n3. ViewRootImpl 和 DecorView 的关系是什么？\n4. DecorView 的布局是什么样的？\n5. DecorView 的创建时机？\n6. setContentView 的流程\n7. LayoutInflate 的流程\n8. Activity、PhoneWindow、DecorView、ViewRootImpl 的关系？\n9. PhoneWindow 的创建时机？\n10. 如何触发重新绘制？\n11. requestLayout 和 invalidate 的流程\n12. requestLayout 和 invalidate 的区别\n13. 简单介绍下MeasureSpec\n14. MeasureSpec的确定\n15. 子View的MeasureSpec由父View根据自身的MeasureSpec和子View的LayoutParams来共同确定子View的MeasureSpec，注意，即使确定了子View的MeasureSpec并不一定决定了子View的大小，自定义View可以根据需要修改这个值，最终通过setMeasuredDimension（width,height）设置最终大小。\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/6989232-799ff8ac91e38316?imageMogr2/auto-orient/strip|imageView2/2/w/1080/format/webp)\n\n**5、View执行onMeasure,onLayout的次数**\n\n分析ViewRootImpl的源码，scheduleTraversales()内部会执行postCallBack触发mTraversalRunnable重新走一遍performTraversals(),第二次执行performTraversals()就会触发performDraw()。所以performTraversals()走了两次，那么肯定会走2次measure方法，但不一定走2次onMeasure()，读过View measure方法源码的都应知道measure方法做了2级测量优化：\n\n- 1.如果flag不为forceLayout或者与上次测量规格（MeasureSpec）相比未改变，那么将不会进行重新测量（执行onMeasure方法），直接使用上次的测量值；\n- 2.如果满足非强制测量的条件，即前后二次测量规格不一致，会先根据目前测量规格生成的key索引缓存数据，索引到就无需进行重新测量;如果targetSDK小于API 20则二级测量优化无效，依旧会重新测量，不会采用缓存测量值。\n\n**6、getWidth()和getMeasuredWidth()的区别**\n\ngetMeasuredWidth()、getMeasuredHeight()必须在onMeasure之后使用才有效）getMeasuredWidth() 的取值最终来源于 setMeasuredDimension() 方法调用时传递的参数, getWidth()返回的是，mRight - mLeft，mRight、mLeft 变量分别表示 View 相对父容器的左右边缘位置，getWidth()与getHeight()方法必须在layout(int l, int t, int r, int b)执行之后才有效\n\n**7、如何在onCreate中拿到View的宽度和高度**\n\n- **View.post(runnable)**\n\n\n\n```java\nview.post(new Runnable() {            \n            @Override\n            public void run() {\n                int width = view.getWidth();\n                int measuredWidth = view.getMeasuredWidth();\n                Log.i(TAG, \"width: \" + width);\n                Log.i(TAG, \"measuredWidth: \" + measuredWidth);\n            }\n        });      \n```\n\n利用Handler通信机制，发送一个Runnable到MessageQueue中，当View布局处理完成时，自动发送消息，通知UI进程。借此机制，巧妙获取View的高宽属性，代码简洁，相比ViewTreeObserver监听处理，还不需要手动移除观察者监听事件。\n\n- **ViewTreeObserver.addOnGlobalLayoutListener()**\n\n监听View的onLayout()绘制过程，一旦layout触发变化，立即回调onLayoutChange方法。\n 注意，使用完也要主要调用removeOnGlobalListener()方法移除监听事件。避免后续每一次发生全局View变化均触发该事件，影响性能。\n\n\n\n```java\nViewTreeObserver vto = view.getViewTreeObserver();       \n       vto.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                view.getViewTreeObserver().removeGlobalOnLayoutListener(this);\n                Log.i(TAG, \"width: \" + view.getWidth());\n                Log.i(TAG, \"height: \" + view.getHeight());\n            }\n        });\n```\n\n**8、invalidate和postInvalidate区别**\n\n二者都会出发刷新View，并且当这个View的可见性为VISIBLE的时候，View的onDraw()方法将会被调用，invalidate()方法在 UI 线程中调用，重绘当前 UI。postInvalidate() 方法在非 UI 线程中调用，通过Handler通知 UI 线程重绘。\n\n**9、requestLayout()的作用**\n\nrequestLayout()也可以达到重绘view的目的，但是与前两者不同，它会先调用onLayout()重新排版，再调用ondraw()方法。当view确定自身已经不再适合现有的区域时，该view本身调用这个方法要求parent view（父类的视图）重新调用他的onMeasure、onLayout来重新设置自己位置。特别是当view的layoutparameter发生改变，并且它的值还没能应用到view上时，这时候适合调用这个方法requestLayout()。\n\n**10、onDraw() 和dispatchDraw()的区别**\n\n- 绘制View本身的内容，通过调用View.onDraw(canvas)函数实现\n- 绘制自己的孩子通过dispatchDraw（canvas）实现\n\ndraw过程会调用onDraw(Canvas canvas)方法，然后就是dispatchDraw(Canvas canvas)方法, dispatchDraw()主要是分发给子组件进行绘制，我们通常定制组件的时候重写的是onDraw()方法。值得注意的是ViewGroup容器组件的绘制，当它没有背景时直接调用的是dispatchDraw()方法, 而绕过了draw()方法，当它有背景的时候就调用draw()方法，而draw()方法里包含了dispatchDraw()方法的调用。因此要在ViewGroup上绘制东西的时候往往重写的是dispatchDraw()方法而不是onDraw()方法，或者自定制一个Drawable，重写它的draw(Canvas c)和 getIntrinsicWidth()方法，然后设为背景。\n\n\n\n\n\nhttps://www.jianshu.com/p/5a71014e7b1b\n\nhttps://blog.csdn.net/sinat_27154507/article/details/79748010\n\nhttps://www.cnblogs.com/andy-songwei/p/10955062.html\n\nhttps://blog.csdn.net/Innost/article/details/6172893\n\nhttps://blog.csdn.net/a553181867/article/details/51477040\n\nhttps://juejin.cn/post/6872140986579943438\n\nhttps://www.jianshu.com/p/c5d200dde486\n","source":"_posts/androidview的绘制流程.md","raw":"---\ntitle: Android View绘制的完整流程及知识点\ndate: 2021-10-04 13:21:09\ntags: Android\ncategories: Android\n\n---\n\n具体源码整理如下[流程图](https://www.processon.com/view/link/61600cfbf346fb0e99a6d639)\n\n![源码流程图](源码流程图.png)\n\n梳理过源码后，再看相关的知识点：\n\n1. 首次 View 的绘制流程是在什么时候触发的？\n2. ViewRootImpl 创建的时机？\n3. ViewRootImpl 和 DecorView 的关系是什么？\n4. DecorView 的布局是什么样的？\n5. DecorView 的创建时机？\n6. setContentView 的流程\n7. LayoutInflate 的流程\n8. Activity、PhoneWindow、DecorView、ViewRootImpl 的关系？\n9. PhoneWindow 的创建时机？\n10. 如何触发重新绘制？\n11. requestLayout 和 invalidate 的流程\n12. requestLayout 和 invalidate 的区别\n13. 简单介绍下MeasureSpec\n14. MeasureSpec的确定\n15. 子View的MeasureSpec由父View根据自身的MeasureSpec和子View的LayoutParams来共同确定子View的MeasureSpec，注意，即使确定了子View的MeasureSpec并不一定决定了子View的大小，自定义View可以根据需要修改这个值，最终通过setMeasuredDimension（width,height）设置最终大小。\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/6989232-799ff8ac91e38316?imageMogr2/auto-orient/strip|imageView2/2/w/1080/format/webp)\n\n**5、View执行onMeasure,onLayout的次数**\n\n分析ViewRootImpl的源码，scheduleTraversales()内部会执行postCallBack触发mTraversalRunnable重新走一遍performTraversals(),第二次执行performTraversals()就会触发performDraw()。所以performTraversals()走了两次，那么肯定会走2次measure方法，但不一定走2次onMeasure()，读过View measure方法源码的都应知道measure方法做了2级测量优化：\n\n- 1.如果flag不为forceLayout或者与上次测量规格（MeasureSpec）相比未改变，那么将不会进行重新测量（执行onMeasure方法），直接使用上次的测量值；\n- 2.如果满足非强制测量的条件，即前后二次测量规格不一致，会先根据目前测量规格生成的key索引缓存数据，索引到就无需进行重新测量;如果targetSDK小于API 20则二级测量优化无效，依旧会重新测量，不会采用缓存测量值。\n\n**6、getWidth()和getMeasuredWidth()的区别**\n\ngetMeasuredWidth()、getMeasuredHeight()必须在onMeasure之后使用才有效）getMeasuredWidth() 的取值最终来源于 setMeasuredDimension() 方法调用时传递的参数, getWidth()返回的是，mRight - mLeft，mRight、mLeft 变量分别表示 View 相对父容器的左右边缘位置，getWidth()与getHeight()方法必须在layout(int l, int t, int r, int b)执行之后才有效\n\n**7、如何在onCreate中拿到View的宽度和高度**\n\n- **View.post(runnable)**\n\n\n\n```java\nview.post(new Runnable() {            \n            @Override\n            public void run() {\n                int width = view.getWidth();\n                int measuredWidth = view.getMeasuredWidth();\n                Log.i(TAG, \"width: \" + width);\n                Log.i(TAG, \"measuredWidth: \" + measuredWidth);\n            }\n        });      \n```\n\n利用Handler通信机制，发送一个Runnable到MessageQueue中，当View布局处理完成时，自动发送消息，通知UI进程。借此机制，巧妙获取View的高宽属性，代码简洁，相比ViewTreeObserver监听处理，还不需要手动移除观察者监听事件。\n\n- **ViewTreeObserver.addOnGlobalLayoutListener()**\n\n监听View的onLayout()绘制过程，一旦layout触发变化，立即回调onLayoutChange方法。\n 注意，使用完也要主要调用removeOnGlobalListener()方法移除监听事件。避免后续每一次发生全局View变化均触发该事件，影响性能。\n\n\n\n```java\nViewTreeObserver vto = view.getViewTreeObserver();       \n       vto.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                view.getViewTreeObserver().removeGlobalOnLayoutListener(this);\n                Log.i(TAG, \"width: \" + view.getWidth());\n                Log.i(TAG, \"height: \" + view.getHeight());\n            }\n        });\n```\n\n**8、invalidate和postInvalidate区别**\n\n二者都会出发刷新View，并且当这个View的可见性为VISIBLE的时候，View的onDraw()方法将会被调用，invalidate()方法在 UI 线程中调用，重绘当前 UI。postInvalidate() 方法在非 UI 线程中调用，通过Handler通知 UI 线程重绘。\n\n**9、requestLayout()的作用**\n\nrequestLayout()也可以达到重绘view的目的，但是与前两者不同，它会先调用onLayout()重新排版，再调用ondraw()方法。当view确定自身已经不再适合现有的区域时，该view本身调用这个方法要求parent view（父类的视图）重新调用他的onMeasure、onLayout来重新设置自己位置。特别是当view的layoutparameter发生改变，并且它的值还没能应用到view上时，这时候适合调用这个方法requestLayout()。\n\n**10、onDraw() 和dispatchDraw()的区别**\n\n- 绘制View本身的内容，通过调用View.onDraw(canvas)函数实现\n- 绘制自己的孩子通过dispatchDraw（canvas）实现\n\ndraw过程会调用onDraw(Canvas canvas)方法，然后就是dispatchDraw(Canvas canvas)方法, dispatchDraw()主要是分发给子组件进行绘制，我们通常定制组件的时候重写的是onDraw()方法。值得注意的是ViewGroup容器组件的绘制，当它没有背景时直接调用的是dispatchDraw()方法, 而绕过了draw()方法，当它有背景的时候就调用draw()方法，而draw()方法里包含了dispatchDraw()方法的调用。因此要在ViewGroup上绘制东西的时候往往重写的是dispatchDraw()方法而不是onDraw()方法，或者自定制一个Drawable，重写它的draw(Canvas c)和 getIntrinsicWidth()方法，然后设为背景。\n\n\n\n\n\nhttps://www.jianshu.com/p/5a71014e7b1b\n\nhttps://blog.csdn.net/sinat_27154507/article/details/79748010\n\nhttps://www.cnblogs.com/andy-songwei/p/10955062.html\n\nhttps://blog.csdn.net/Innost/article/details/6172893\n\nhttps://blog.csdn.net/a553181867/article/details/51477040\n\nhttps://juejin.cn/post/6872140986579943438\n\nhttps://www.jianshu.com/p/c5d200dde486\n","slug":"androidview的绘制流程","published":1,"updated":"2021-12-05T07:12:34.739Z","_id":"ckvw4iepc00137wgsbxxadxo5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>具体源码整理如下<a href=\"https://www.processon.com/view/link/61600cfbf346fb0e99a6d639\">流程图</a></p>\n<p><img src=\"/2021/10/04/androidview%E7%9A%84%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B/%E6%BA%90%E7%A0%81%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"源码流程图\"></p>\n<p>梳理过源码后，再看相关的知识点：</p>\n<ol>\n<li>首次 View 的绘制流程是在什么时候触发的？</li>\n<li>ViewRootImpl 创建的时机？</li>\n<li>ViewRootImpl 和 DecorView 的关系是什么？</li>\n<li>DecorView 的布局是什么样的？</li>\n<li>DecorView 的创建时机？</li>\n<li>setContentView 的流程</li>\n<li>LayoutInflate 的流程</li>\n<li>Activity、PhoneWindow、DecorView、ViewRootImpl 的关系？</li>\n<li>PhoneWindow 的创建时机？</li>\n<li>如何触发重新绘制？</li>\n<li>requestLayout 和 invalidate 的流程</li>\n<li>requestLayout 和 invalidate 的区别</li>\n<li>简单介绍下MeasureSpec</li>\n<li>MeasureSpec的确定</li>\n<li>子View的MeasureSpec由父View根据自身的MeasureSpec和子View的LayoutParams来共同确定子View的MeasureSpec，注意，即使确定了子View的MeasureSpec并不一定决定了子View的大小，自定义View可以根据需要修改这个值，最终通过setMeasuredDimension（width,height）设置最终大小。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6989232-799ff8ac91e38316?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/format/webp\" alt=\"img\"></p>\n<p><strong>5、View执行onMeasure,onLayout的次数</strong></p>\n<p>分析ViewRootImpl的源码，scheduleTraversales()内部会执行postCallBack触发mTraversalRunnable重新走一遍performTraversals(),第二次执行performTraversals()就会触发performDraw()。所以performTraversals()走了两次，那么肯定会走2次measure方法，但不一定走2次onMeasure()，读过View measure方法源码的都应知道measure方法做了2级测量优化：</p>\n<ul>\n<li>1.如果flag不为forceLayout或者与上次测量规格（MeasureSpec）相比未改变，那么将不会进行重新测量（执行onMeasure方法），直接使用上次的测量值；</li>\n<li>2.如果满足非强制测量的条件，即前后二次测量规格不一致，会先根据目前测量规格生成的key索引缓存数据，索引到就无需进行重新测量;如果targetSDK小于API 20则二级测量优化无效，依旧会重新测量，不会采用缓存测量值。</li>\n</ul>\n<p><strong>6、getWidth()和getMeasuredWidth()的区别</strong></p>\n<p>getMeasuredWidth()、getMeasuredHeight()必须在onMeasure之后使用才有效）getMeasuredWidth() 的取值最终来源于 setMeasuredDimension() 方法调用时传递的参数, getWidth()返回的是，mRight - mLeft，mRight、mLeft 变量分别表示 View 相对父容器的左右边缘位置，getWidth()与getHeight()方法必须在layout(int l, int t, int r, int b)执行之后才有效</p>\n<p><strong>7、如何在onCreate中拿到View的宽度和高度</strong></p>\n<ul>\n<li><strong>View.post(runnable)</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.post(<span class=\"keyword\">new</span> Runnable() &#123;            </span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> width = view.getWidth();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> measuredWidth = view.getMeasuredWidth();</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;width: &quot;</span> + width);</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;measuredWidth: &quot;</span> + measuredWidth);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);      </span><br></pre></td></tr></table></figure>\n\n<p>利用Handler通信机制，发送一个Runnable到MessageQueue中，当View布局处理完成时，自动发送消息，通知UI进程。借此机制，巧妙获取View的高宽属性，代码简洁，相比ViewTreeObserver监听处理，还不需要手动移除观察者监听事件。</p>\n<ul>\n<li><strong>ViewTreeObserver.addOnGlobalLayoutListener()</strong></li>\n</ul>\n<p>监听View的onLayout()绘制过程，一旦layout触发变化，立即回调onLayoutChange方法。<br> 注意，使用完也要主要调用removeOnGlobalListener()方法移除监听事件。避免后续每一次发生全局View变化均触发该事件，影响性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewTreeObserver vto = view.getViewTreeObserver();       </span><br><span class=\"line\">       vto.addOnGlobalLayoutListener(<span class=\"keyword\">new</span> OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                view.getViewTreeObserver().removeGlobalOnLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;width: &quot;</span> + view.getWidth());</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;height: &quot;</span> + view.getHeight());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>8、invalidate和postInvalidate区别</strong></p>\n<p>二者都会出发刷新View，并且当这个View的可见性为VISIBLE的时候，View的onDraw()方法将会被调用，invalidate()方法在 UI 线程中调用，重绘当前 UI。postInvalidate() 方法在非 UI 线程中调用，通过Handler通知 UI 线程重绘。</p>\n<p><strong>9、requestLayout()的作用</strong></p>\n<p>requestLayout()也可以达到重绘view的目的，但是与前两者不同，它会先调用onLayout()重新排版，再调用ondraw()方法。当view确定自身已经不再适合现有的区域时，该view本身调用这个方法要求parent view（父类的视图）重新调用他的onMeasure、onLayout来重新设置自己位置。特别是当view的layoutparameter发生改变，并且它的值还没能应用到view上时，这时候适合调用这个方法requestLayout()。</p>\n<p><strong>10、onDraw() 和dispatchDraw()的区别</strong></p>\n<ul>\n<li>绘制View本身的内容，通过调用View.onDraw(canvas)函数实现</li>\n<li>绘制自己的孩子通过dispatchDraw（canvas）实现</li>\n</ul>\n<p>draw过程会调用onDraw(Canvas canvas)方法，然后就是dispatchDraw(Canvas canvas)方法, dispatchDraw()主要是分发给子组件进行绘制，我们通常定制组件的时候重写的是onDraw()方法。值得注意的是ViewGroup容器组件的绘制，当它没有背景时直接调用的是dispatchDraw()方法, 而绕过了draw()方法，当它有背景的时候就调用draw()方法，而draw()方法里包含了dispatchDraw()方法的调用。因此要在ViewGroup上绘制东西的时候往往重写的是dispatchDraw()方法而不是onDraw()方法，或者自定制一个Drawable，重写它的draw(Canvas c)和 getIntrinsicWidth()方法，然后设为背景。</p>\n<p><a href=\"https://www.jianshu.com/p/5a71014e7b1b\">https://www.jianshu.com/p/5a71014e7b1b</a></p>\n<p><a href=\"https://blog.csdn.net/sinat_27154507/article/details/79748010\">https://blog.csdn.net/sinat_27154507/article/details/79748010</a></p>\n<p><a href=\"https://www.cnblogs.com/andy-songwei/p/10955062.html\">https://www.cnblogs.com/andy-songwei/p/10955062.html</a></p>\n<p><a href=\"https://blog.csdn.net/Innost/article/details/6172893\">https://blog.csdn.net/Innost/article/details/6172893</a></p>\n<p><a href=\"https://blog.csdn.net/a553181867/article/details/51477040\">https://blog.csdn.net/a553181867/article/details/51477040</a></p>\n<p><a href=\"https://juejin.cn/post/6872140986579943438\">https://juejin.cn/post/6872140986579943438</a></p>\n<p><a href=\"https://www.jianshu.com/p/c5d200dde486\">https://www.jianshu.com/p/c5d200dde486</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>具体源码整理如下<a href=\"https://www.processon.com/view/link/61600cfbf346fb0e99a6d639\">流程图</a></p>\n<p><img src=\"/2021/10/04/androidview%E7%9A%84%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B/%E6%BA%90%E7%A0%81%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"源码流程图\"></p>\n<p>梳理过源码后，再看相关的知识点：</p>\n<ol>\n<li>首次 View 的绘制流程是在什么时候触发的？</li>\n<li>ViewRootImpl 创建的时机？</li>\n<li>ViewRootImpl 和 DecorView 的关系是什么？</li>\n<li>DecorView 的布局是什么样的？</li>\n<li>DecorView 的创建时机？</li>\n<li>setContentView 的流程</li>\n<li>LayoutInflate 的流程</li>\n<li>Activity、PhoneWindow、DecorView、ViewRootImpl 的关系？</li>\n<li>PhoneWindow 的创建时机？</li>\n<li>如何触发重新绘制？</li>\n<li>requestLayout 和 invalidate 的流程</li>\n<li>requestLayout 和 invalidate 的区别</li>\n<li>简单介绍下MeasureSpec</li>\n<li>MeasureSpec的确定</li>\n<li>子View的MeasureSpec由父View根据自身的MeasureSpec和子View的LayoutParams来共同确定子View的MeasureSpec，注意，即使确定了子View的MeasureSpec并不一定决定了子View的大小，自定义View可以根据需要修改这个值，最终通过setMeasuredDimension（width,height）设置最终大小。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6989232-799ff8ac91e38316?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/format/webp\" alt=\"img\"></p>\n<p><strong>5、View执行onMeasure,onLayout的次数</strong></p>\n<p>分析ViewRootImpl的源码，scheduleTraversales()内部会执行postCallBack触发mTraversalRunnable重新走一遍performTraversals(),第二次执行performTraversals()就会触发performDraw()。所以performTraversals()走了两次，那么肯定会走2次measure方法，但不一定走2次onMeasure()，读过View measure方法源码的都应知道measure方法做了2级测量优化：</p>\n<ul>\n<li>1.如果flag不为forceLayout或者与上次测量规格（MeasureSpec）相比未改变，那么将不会进行重新测量（执行onMeasure方法），直接使用上次的测量值；</li>\n<li>2.如果满足非强制测量的条件，即前后二次测量规格不一致，会先根据目前测量规格生成的key索引缓存数据，索引到就无需进行重新测量;如果targetSDK小于API 20则二级测量优化无效，依旧会重新测量，不会采用缓存测量值。</li>\n</ul>\n<p><strong>6、getWidth()和getMeasuredWidth()的区别</strong></p>\n<p>getMeasuredWidth()、getMeasuredHeight()必须在onMeasure之后使用才有效）getMeasuredWidth() 的取值最终来源于 setMeasuredDimension() 方法调用时传递的参数, getWidth()返回的是，mRight - mLeft，mRight、mLeft 变量分别表示 View 相对父容器的左右边缘位置，getWidth()与getHeight()方法必须在layout(int l, int t, int r, int b)执行之后才有效</p>\n<p><strong>7、如何在onCreate中拿到View的宽度和高度</strong></p>\n<ul>\n<li><strong>View.post(runnable)</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.post(<span class=\"keyword\">new</span> Runnable() &#123;            </span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> width = view.getWidth();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> measuredWidth = view.getMeasuredWidth();</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;width: &quot;</span> + width);</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;measuredWidth: &quot;</span> + measuredWidth);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);      </span><br></pre></td></tr></table></figure>\n\n<p>利用Handler通信机制，发送一个Runnable到MessageQueue中，当View布局处理完成时，自动发送消息，通知UI进程。借此机制，巧妙获取View的高宽属性，代码简洁，相比ViewTreeObserver监听处理，还不需要手动移除观察者监听事件。</p>\n<ul>\n<li><strong>ViewTreeObserver.addOnGlobalLayoutListener()</strong></li>\n</ul>\n<p>监听View的onLayout()绘制过程，一旦layout触发变化，立即回调onLayoutChange方法。<br> 注意，使用完也要主要调用removeOnGlobalListener()方法移除监听事件。避免后续每一次发生全局View变化均触发该事件，影响性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewTreeObserver vto = view.getViewTreeObserver();       </span><br><span class=\"line\">       vto.addOnGlobalLayoutListener(<span class=\"keyword\">new</span> OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                view.getViewTreeObserver().removeGlobalOnLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;width: &quot;</span> + view.getWidth());</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;height: &quot;</span> + view.getHeight());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>8、invalidate和postInvalidate区别</strong></p>\n<p>二者都会出发刷新View，并且当这个View的可见性为VISIBLE的时候，View的onDraw()方法将会被调用，invalidate()方法在 UI 线程中调用，重绘当前 UI。postInvalidate() 方法在非 UI 线程中调用，通过Handler通知 UI 线程重绘。</p>\n<p><strong>9、requestLayout()的作用</strong></p>\n<p>requestLayout()也可以达到重绘view的目的，但是与前两者不同，它会先调用onLayout()重新排版，再调用ondraw()方法。当view确定自身已经不再适合现有的区域时，该view本身调用这个方法要求parent view（父类的视图）重新调用他的onMeasure、onLayout来重新设置自己位置。特别是当view的layoutparameter发生改变，并且它的值还没能应用到view上时，这时候适合调用这个方法requestLayout()。</p>\n<p><strong>10、onDraw() 和dispatchDraw()的区别</strong></p>\n<ul>\n<li>绘制View本身的内容，通过调用View.onDraw(canvas)函数实现</li>\n<li>绘制自己的孩子通过dispatchDraw（canvas）实现</li>\n</ul>\n<p>draw过程会调用onDraw(Canvas canvas)方法，然后就是dispatchDraw(Canvas canvas)方法, dispatchDraw()主要是分发给子组件进行绘制，我们通常定制组件的时候重写的是onDraw()方法。值得注意的是ViewGroup容器组件的绘制，当它没有背景时直接调用的是dispatchDraw()方法, 而绕过了draw()方法，当它有背景的时候就调用draw()方法，而draw()方法里包含了dispatchDraw()方法的调用。因此要在ViewGroup上绘制东西的时候往往重写的是dispatchDraw()方法而不是onDraw()方法，或者自定制一个Drawable，重写它的draw(Canvas c)和 getIntrinsicWidth()方法，然后设为背景。</p>\n<p><a href=\"https://www.jianshu.com/p/5a71014e7b1b\">https://www.jianshu.com/p/5a71014e7b1b</a></p>\n<p><a href=\"https://blog.csdn.net/sinat_27154507/article/details/79748010\">https://blog.csdn.net/sinat_27154507/article/details/79748010</a></p>\n<p><a href=\"https://www.cnblogs.com/andy-songwei/p/10955062.html\">https://www.cnblogs.com/andy-songwei/p/10955062.html</a></p>\n<p><a href=\"https://blog.csdn.net/Innost/article/details/6172893\">https://blog.csdn.net/Innost/article/details/6172893</a></p>\n<p><a href=\"https://blog.csdn.net/a553181867/article/details/51477040\">https://blog.csdn.net/a553181867/article/details/51477040</a></p>\n<p><a href=\"https://juejin.cn/post/6872140986579943438\">https://juejin.cn/post/6872140986579943438</a></p>\n<p><a href=\"https://www.jianshu.com/p/c5d200dde486\">https://www.jianshu.com/p/c5d200dde486</a></p>\n"},{"title":"android调用System.gc()有用么？","date":"2021-09-27T02:43:43.000Z","_content":"\n#### **结论**\n\n在Android中，仅调用System.gc(）并不起作用；\n\n若有需求，可采用方法：\n\n1. 直接调用`Runtime.getRuntime().gc()`\n2. 调用`System.runFinalization()`和`System.gc()`\n\n> 即使没有显式调用gc方法，虚拟机也会根据需要在单独的线程中自动执行此回收过程\n\n\n\n#### **源码分析**\n\n```java\n/**\n *\tSystem.gc(）源码\n *\t由此可见，真正起作用的是Runtime.getRuntime().gc()，\n *\t且仅当shouldRunGC=true时，才会执行；\n *\t而shouldRunGC的赋值取决于justRanFinaljuization\n */\npublic static void gc() {\n        boolean shouldRunGC;\n        synchronized (LOCK) {\n            shouldRunGC = justRanFinaljuization;\n            if (shouldRunGC) {\n                justRanFinalization = false;\n            } else {\n                runGC = true;\n            }\n        }\n        if (shouldRunGC) {\n            Runtime.getRuntime().gc();\n        }\n    }\n```\n\n```java\n/**\n *\tjustRanFinaljuization仅在runFinalization（）方法中赋值为true;\n *\t且runGC也仅在gc()方法中赋值为true\n * \t因此代码中仅调用System.gc()无用\n */\npublic static void runFinalization() {\n        boolean shouldRunGC;\n        synchronized (LOCK) {\n            shouldRunGC = runGC;\n            runGC = false;\n        }\n        if (shouldRunGC) {\n            Runtime.getRuntime().gc();\n        }\n        Runtime.getRuntime().runFinalization();\n        synchronized (LOCK) {\n            justRanFinalization = true;\n        }\n    }\n```\n","source":"_posts/android中的System-gc.md","raw":"---\ntitle: android调用System.gc()有用么？\ndate: 2021-09-27 10:43:43\ntags: Android\ncategories: Android\n\n---\n\n#### **结论**\n\n在Android中，仅调用System.gc(）并不起作用；\n\n若有需求，可采用方法：\n\n1. 直接调用`Runtime.getRuntime().gc()`\n2. 调用`System.runFinalization()`和`System.gc()`\n\n> 即使没有显式调用gc方法，虚拟机也会根据需要在单独的线程中自动执行此回收过程\n\n\n\n#### **源码分析**\n\n```java\n/**\n *\tSystem.gc(）源码\n *\t由此可见，真正起作用的是Runtime.getRuntime().gc()，\n *\t且仅当shouldRunGC=true时，才会执行；\n *\t而shouldRunGC的赋值取决于justRanFinaljuization\n */\npublic static void gc() {\n        boolean shouldRunGC;\n        synchronized (LOCK) {\n            shouldRunGC = justRanFinaljuization;\n            if (shouldRunGC) {\n                justRanFinalization = false;\n            } else {\n                runGC = true;\n            }\n        }\n        if (shouldRunGC) {\n            Runtime.getRuntime().gc();\n        }\n    }\n```\n\n```java\n/**\n *\tjustRanFinaljuization仅在runFinalization（）方法中赋值为true;\n *\t且runGC也仅在gc()方法中赋值为true\n * \t因此代码中仅调用System.gc()无用\n */\npublic static void runFinalization() {\n        boolean shouldRunGC;\n        synchronized (LOCK) {\n            shouldRunGC = runGC;\n            runGC = false;\n        }\n        if (shouldRunGC) {\n            Runtime.getRuntime().gc();\n        }\n        Runtime.getRuntime().runFinalization();\n        synchronized (LOCK) {\n            justRanFinalization = true;\n        }\n    }\n```\n","slug":"android中的System-gc","published":1,"updated":"2021-10-08T08:41:46.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepd00167wgs1zrh8qtd","content":"<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a><strong>结论</strong></h4><p>在Android中，仅调用System.gc(）并不起作用；</p>\n<p>若有需求，可采用方法：</p>\n<ol>\n<li>直接调用<code>Runtime.getRuntime().gc()</code></li>\n<li>调用<code>System.runFinalization()</code>和<code>System.gc()</code></li>\n</ol>\n<blockquote>\n<p>即使没有显式调用gc方法，虚拟机也会根据需要在单独的线程中自动执行此回收过程</p>\n</blockquote>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a><strong>源码分析</strong></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *\tSystem.gc(）源码</span></span><br><span class=\"line\"><span class=\"comment\"> *\t由此可见，真正起作用的是Runtime.getRuntime().gc()，</span></span><br><span class=\"line\"><span class=\"comment\"> *\t且仅当shouldRunGC=true时，才会执行；</span></span><br><span class=\"line\"><span class=\"comment\"> *\t而shouldRunGC的赋值取决于justRanFinaljuization</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> shouldRunGC;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LOCK) &#123;</span><br><span class=\"line\">            shouldRunGC = justRanFinaljuization;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldRunGC) &#123;</span><br><span class=\"line\">                justRanFinalization = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                runGC = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shouldRunGC) &#123;</span><br><span class=\"line\">            Runtime.getRuntime().gc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *\tjustRanFinaljuization仅在runFinalization（）方法中赋值为true;</span></span><br><span class=\"line\"><span class=\"comment\"> *\t且runGC也仅在gc()方法中赋值为true</span></span><br><span class=\"line\"><span class=\"comment\"> * \t因此代码中仅调用System.gc()无用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">runFinalization</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> shouldRunGC;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LOCK) &#123;</span><br><span class=\"line\">            shouldRunGC = runGC;</span><br><span class=\"line\">            runGC = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shouldRunGC) &#123;</span><br><span class=\"line\">            Runtime.getRuntime().gc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Runtime.getRuntime().runFinalization();</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LOCK) &#123;</span><br><span class=\"line\">            justRanFinalization = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a><strong>结论</strong></h4><p>在Android中，仅调用System.gc(）并不起作用；</p>\n<p>若有需求，可采用方法：</p>\n<ol>\n<li>直接调用<code>Runtime.getRuntime().gc()</code></li>\n<li>调用<code>System.runFinalization()</code>和<code>System.gc()</code></li>\n</ol>\n<blockquote>\n<p>即使没有显式调用gc方法，虚拟机也会根据需要在单独的线程中自动执行此回收过程</p>\n</blockquote>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a><strong>源码分析</strong></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *\tSystem.gc(）源码</span></span><br><span class=\"line\"><span class=\"comment\"> *\t由此可见，真正起作用的是Runtime.getRuntime().gc()，</span></span><br><span class=\"line\"><span class=\"comment\"> *\t且仅当shouldRunGC=true时，才会执行；</span></span><br><span class=\"line\"><span class=\"comment\"> *\t而shouldRunGC的赋值取决于justRanFinaljuization</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> shouldRunGC;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LOCK) &#123;</span><br><span class=\"line\">            shouldRunGC = justRanFinaljuization;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldRunGC) &#123;</span><br><span class=\"line\">                justRanFinalization = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                runGC = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shouldRunGC) &#123;</span><br><span class=\"line\">            Runtime.getRuntime().gc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *\tjustRanFinaljuization仅在runFinalization（）方法中赋值为true;</span></span><br><span class=\"line\"><span class=\"comment\"> *\t且runGC也仅在gc()方法中赋值为true</span></span><br><span class=\"line\"><span class=\"comment\"> * \t因此代码中仅调用System.gc()无用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">runFinalization</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> shouldRunGC;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LOCK) &#123;</span><br><span class=\"line\">            shouldRunGC = runGC;</span><br><span class=\"line\">            runGC = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shouldRunGC) &#123;</span><br><span class=\"line\">            Runtime.getRuntime().gc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Runtime.getRuntime().runFinalization();</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LOCK) &#123;</span><br><span class=\"line\">            justRanFinalization = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"git@github.com: Permission denied (publickey).","date":"2021-09-25T04:00:56.000Z","_content":"\n#### **问题描述**\n\n想通过命令删除远程分支 `git push origin --delete hexo` 时，出现\n\n```java\ncurry@MacBook-Pro blog % git push origin --delete hexo       \ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n#### **解决方法**\n\n1. `git config --global --list` 通过此命令查看全局邮箱是否与github注册的一致；\n\n   > 我这里不一致，因此需要执行第二部；若一直可以跳过\n\n2. `git config --global user.email \"邮箱\"` 通过此命令配置全局邮箱；\n\n   > 若用户名也想更改，执行`git config --global user.name \"xxx\"`\n\n3. `ssh-keygen -t rsa -C \"邮箱\"` 通过此命令生成ssh；\n\n   > 输入命令，一直回车即可；命令中会提示生成的文件路径；\n   >\n   > 例：Your public key has been saved in /Users/curry/.ssh/id_rsa.pub\n\n4. 将第三步骤中生成的id_rsa.pub文件其内容全部粘贴到github - Settings - SSH and GPG keys - New SSH Key中\n\n   ![image-20210925123231078](image-20210925123231078.png)\n\n5. 执行过以上步骤后，通常可以解决问题！\n\n6. 可以通过 `ssh -T git@github.com `  验证是否成功；若不成功，则执行（未出现，待验证）\n\n   ```\n   ssh-agent -s\n   ssh-add ~/.ssh/id_rsa\n   ```\n","source":"_posts/git-github-com-Permission-denied-publickey.md","raw":"---\ntitle: 'git@github.com: Permission denied (publickey).'\ndate: 2021-09-25 12:00:56\ntags: git\ncategories: git\n---\n\n#### **问题描述**\n\n想通过命令删除远程分支 `git push origin --delete hexo` 时，出现\n\n```java\ncurry@MacBook-Pro blog % git push origin --delete hexo       \ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n#### **解决方法**\n\n1. `git config --global --list` 通过此命令查看全局邮箱是否与github注册的一致；\n\n   > 我这里不一致，因此需要执行第二部；若一直可以跳过\n\n2. `git config --global user.email \"邮箱\"` 通过此命令配置全局邮箱；\n\n   > 若用户名也想更改，执行`git config --global user.name \"xxx\"`\n\n3. `ssh-keygen -t rsa -C \"邮箱\"` 通过此命令生成ssh；\n\n   > 输入命令，一直回车即可；命令中会提示生成的文件路径；\n   >\n   > 例：Your public key has been saved in /Users/curry/.ssh/id_rsa.pub\n\n4. 将第三步骤中生成的id_rsa.pub文件其内容全部粘贴到github - Settings - SSH and GPG keys - New SSH Key中\n\n   ![image-20210925123231078](image-20210925123231078.png)\n\n5. 执行过以上步骤后，通常可以解决问题！\n\n6. 可以通过 `ssh -T git@github.com `  验证是否成功；若不成功，则执行（未出现，待验证）\n\n   ```\n   ssh-agent -s\n   ssh-add ~/.ssh/id_rsa\n   ```\n","slug":"git-github-com-Permission-denied-publickey","published":1,"updated":"2021-10-08T08:41:46.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepf001b7wgs4hep9iz6","content":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a><strong>问题描述</strong></h4><p>想通过命令删除远程分支 <code>git push origin --delete hexo</code> 时，出现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curry<span class=\"meta\">@MacBook</span>-Pro blog % git push origin --delete hexo       </span><br><span class=\"line\">git<span class=\"meta\">@github</span>.com: <span class=\"function\">Permission <span class=\"title\">denied</span> <span class=\"params\">(publickey)</span>.</span></span><br><span class=\"line\"><span class=\"function\">fatal: Could not read from remote repository.</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Please make sure you have the correct access rights</span></span><br><span class=\"line\"><span class=\"function\">and the repository exists.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a><strong>解决方法</strong></h4><ol>\n<li><p><code>git config --global --list</code> 通过此命令查看全局邮箱是否与github注册的一致；</p>\n<blockquote>\n<p>我这里不一致，因此需要执行第二部；若一直可以跳过</p>\n</blockquote>\n</li>\n<li><p><code>git config --global user.email &quot;邮箱&quot;</code> 通过此命令配置全局邮箱；</p>\n<blockquote>\n<p>若用户名也想更改，执行<code>git config --global user.name &quot;xxx&quot;</code></p>\n</blockquote>\n</li>\n<li><p><code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code> 通过此命令生成ssh；</p>\n<blockquote>\n<p>输入命令，一直回车即可；命令中会提示生成的文件路径；</p>\n<p>例：Your public key has been saved in /Users/curry/.ssh/id_rsa.pub</p>\n</blockquote>\n</li>\n<li><p>将第三步骤中生成的id_rsa.pub文件其内容全部粘贴到github - Settings - SSH and GPG keys - New SSH Key中</p>\n<p><img src=\"/2021/09/25/git-github-com-Permission-denied-publickey/image-20210925123231078.png\" alt=\"image-20210925123231078\"></p>\n</li>\n<li><p>执行过以上步骤后，通常可以解决问题！</p>\n</li>\n<li><p>可以通过 <code>ssh -T git@github.com </code>  验证是否成功；若不成功，则执行（未出现，待验证）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent -s</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a><strong>问题描述</strong></h4><p>想通过命令删除远程分支 <code>git push origin --delete hexo</code> 时，出现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curry<span class=\"meta\">@MacBook</span>-Pro blog % git push origin --delete hexo       </span><br><span class=\"line\">git<span class=\"meta\">@github</span>.com: <span class=\"function\">Permission <span class=\"title\">denied</span> <span class=\"params\">(publickey)</span>.</span></span><br><span class=\"line\"><span class=\"function\">fatal: Could not read from remote repository.</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Please make sure you have the correct access rights</span></span><br><span class=\"line\"><span class=\"function\">and the repository exists.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a><strong>解决方法</strong></h4><ol>\n<li><p><code>git config --global --list</code> 通过此命令查看全局邮箱是否与github注册的一致；</p>\n<blockquote>\n<p>我这里不一致，因此需要执行第二部；若一直可以跳过</p>\n</blockquote>\n</li>\n<li><p><code>git config --global user.email &quot;邮箱&quot;</code> 通过此命令配置全局邮箱；</p>\n<blockquote>\n<p>若用户名也想更改，执行<code>git config --global user.name &quot;xxx&quot;</code></p>\n</blockquote>\n</li>\n<li><p><code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code> 通过此命令生成ssh；</p>\n<blockquote>\n<p>输入命令，一直回车即可；命令中会提示生成的文件路径；</p>\n<p>例：Your public key has been saved in /Users/curry/.ssh/id_rsa.pub</p>\n</blockquote>\n</li>\n<li><p>将第三步骤中生成的id_rsa.pub文件其内容全部粘贴到github - Settings - SSH and GPG keys - New SSH Key中</p>\n<p><img src=\"/2021/09/25/git-github-com-Permission-denied-publickey/image-20210925123231078.png\" alt=\"image-20210925123231078\"></p>\n</li>\n<li><p>执行过以上步骤后，通常可以解决问题！</p>\n</li>\n<li><p>可以通过 <code>ssh -T git@github.com </code>  验证是否成功；若不成功，则执行（未出现，待验证）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent -s</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"hexo YAMLException","date":"2021-09-24T07:00:22.000Z","_content":"\n保存准备发布文章时，提示如下报错：\n\n```\nERROR {\n  err: YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:\n...\n}\n```\n\n问题原因：**缺少空格**！\n\n```kotlin\n//错误示例（categories:hexo）\ntitle: hexo YAMLException\ndate: 2021-09-24 15:00:22\ntags: hexo\ncategories:hexo\n```\n\n```kotlin\n//正确示例（categories: hexo）\ntitle: hexo YAMLException\ndate: 2021-09-24 15:00:22\ntags: hexo\ncategories: hexo\n```\n\n\n\n[官方说明](https://hexo.io/zh-cn/docs/troubleshooting.html#YAML-%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF)\n\n![image-20210924151457951](image-20210924151457951.png)\n\n","source":"_posts/hexo-YAMLException.md","raw":"---\ntitle: hexo YAMLException\ndate: 2021-09-24 15:00:22\ntags: hexo\ncategories: hexo\n\n---\n\n保存准备发布文章时，提示如下报错：\n\n```\nERROR {\n  err: YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:\n...\n}\n```\n\n问题原因：**缺少空格**！\n\n```kotlin\n//错误示例（categories:hexo）\ntitle: hexo YAMLException\ndate: 2021-09-24 15:00:22\ntags: hexo\ncategories:hexo\n```\n\n```kotlin\n//正确示例（categories: hexo）\ntitle: hexo YAMLException\ndate: 2021-09-24 15:00:22\ntags: hexo\ncategories: hexo\n```\n\n\n\n[官方说明](https://hexo.io/zh-cn/docs/troubleshooting.html#YAML-%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF)\n\n![image-20210924151457951](image-20210924151457951.png)\n\n","slug":"hexo-YAMLException","published":1,"updated":"2021-10-08T08:41:46.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepg001e7wgsclda26ka","content":"<p>保存准备发布文章时，提示如下报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR &#123;</span><br><span class=\"line\">  err: YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题原因：<strong>缺少空格</strong>！</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误示例（categories:hexo）</span></span><br><span class=\"line\">title: hexo YAMLException</span><br><span class=\"line\">date: <span class=\"number\">2021</span>-09-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">00</span>:<span class=\"number\">22</span></span><br><span class=\"line\">tags: hexo</span><br><span class=\"line\">categories:hexo</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确示例（categories: hexo）</span></span><br><span class=\"line\">title: hexo YAMLException</span><br><span class=\"line\">date: <span class=\"number\">2021</span>-09-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">00</span>:<span class=\"number\">22</span></span><br><span class=\"line\">tags: hexo</span><br><span class=\"line\">categories: hexo</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a href=\"https://hexo.io/zh-cn/docs/troubleshooting.html#YAML-%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF\">官方说明</a></p>\n<p><img src=\"/2021/09/24/hexo-YAMLException/image-20210924151457951.png\" alt=\"image-20210924151457951\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>保存准备发布文章时，提示如下报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR &#123;</span><br><span class=\"line\">  err: YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题原因：<strong>缺少空格</strong>！</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误示例（categories:hexo）</span></span><br><span class=\"line\">title: hexo YAMLException</span><br><span class=\"line\">date: <span class=\"number\">2021</span>-09-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">00</span>:<span class=\"number\">22</span></span><br><span class=\"line\">tags: hexo</span><br><span class=\"line\">categories:hexo</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确示例（categories: hexo）</span></span><br><span class=\"line\">title: hexo YAMLException</span><br><span class=\"line\">date: <span class=\"number\">2021</span>-09-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">00</span>:<span class=\"number\">22</span></span><br><span class=\"line\">tags: hexo</span><br><span class=\"line\">categories: hexo</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a href=\"https://hexo.io/zh-cn/docs/troubleshooting.html#YAML-%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF\">官方说明</a></p>\n<p><img src=\"/2021/09/24/hexo-YAMLException/image-20210924151457951.png\" alt=\"image-20210924151457951\"></p>\n"},{"title":"hexo增加分类和标签","date":"2021-09-24T06:58:15.000Z","_content":"\n#### **创建“分类”选项**\n\n在hexo目录下，执行：\n\n```\nhexo new page categories\n```\n\nhexo\\source目录下会生成categories文件夹；编辑categories\\index.md，添加\ttype: \"categories\"；添加后保存并关闭文件。\n\n```\n---\ntitle: 分类\ndate: 2021-09-24 14:43:00\ntype: categories\n---\n```\n\n**给文章添加“categories”属性**\n\n打开需要添加分类的文章，为其添加categories属性。\n\n下方的categories:hexo表示这篇文章添加到到“hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。\n\n```\n---\ntitle: hexo增加分类和标签\ndate: 2021-09-24 14:43:00\ncategories: hexo\n---\n```\n\n\n\n#### **创建“标签”选项**（与添加分类操作类似）\n\n在hexo目录下，执行：\n\n```\nhexo new page tags\n```\n\nhexo\\source目录下会生成tags文件夹；编辑tags\\index.md，添加\ttype: \"tags\"；添加后保存并关闭文件。\n\n```\n---\ntitle: 标签\ndate: 2021-09-24 14:43:00\ntype: tags\n---\n```\n\n**给文章添加“tags”属性**\n\n打开需要添加标签的文章，为其添加tags属性。\n\n```\n---\ntitle: hexo增加分类和标签\ndate: 2019-04-24 15:40:24\ncategories: hexo\ntags: hexo\n---\n```\n\n**参考：**\n\nhttps://juejin.cn/post/6844903830216261645\n\n","source":"_posts/hexo增加分类和标签.md","raw":"---\ntitle: hexo增加分类和标签\ndate: 2021-09-24 14:58:15\ntags: hexo\ncategories: hexo\n---\n\n#### **创建“分类”选项**\n\n在hexo目录下，执行：\n\n```\nhexo new page categories\n```\n\nhexo\\source目录下会生成categories文件夹；编辑categories\\index.md，添加\ttype: \"categories\"；添加后保存并关闭文件。\n\n```\n---\ntitle: 分类\ndate: 2021-09-24 14:43:00\ntype: categories\n---\n```\n\n**给文章添加“categories”属性**\n\n打开需要添加分类的文章，为其添加categories属性。\n\n下方的categories:hexo表示这篇文章添加到到“hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。\n\n```\n---\ntitle: hexo增加分类和标签\ndate: 2021-09-24 14:43:00\ncategories: hexo\n---\n```\n\n\n\n#### **创建“标签”选项**（与添加分类操作类似）\n\n在hexo目录下，执行：\n\n```\nhexo new page tags\n```\n\nhexo\\source目录下会生成tags文件夹；编辑tags\\index.md，添加\ttype: \"tags\"；添加后保存并关闭文件。\n\n```\n---\ntitle: 标签\ndate: 2021-09-24 14:43:00\ntype: tags\n---\n```\n\n**给文章添加“tags”属性**\n\n打开需要添加标签的文章，为其添加tags属性。\n\n```\n---\ntitle: hexo增加分类和标签\ndate: 2019-04-24 15:40:24\ncategories: hexo\ntags: hexo\n---\n```\n\n**参考：**\n\nhttps://juejin.cn/post/6844903830216261645\n\n","slug":"hexo增加分类和标签","published":1,"updated":"2021-10-08T08:41:46.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4ieph001i7wgs20pc8fz7","content":"<h4 id=\"创建“分类”选项\"><a href=\"#创建“分类”选项\" class=\"headerlink\" title=\"创建“分类”选项\"></a><strong>创建“分类”选项</strong></h4><p>在hexo目录下，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>hexo\\source目录下会生成categories文件夹；编辑categories\\index.md，添加    type: “categories”；添加后保存并关闭文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分类</span><br><span class=\"line\">date: 2021-09-24 14:43:00</span><br><span class=\"line\">type: categories</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>给文章添加“categories”属性</strong></p>\n<p>打开需要添加分类的文章，为其添加categories属性。</p>\n<p>下方的categories:hexo表示这篇文章添加到到“hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hexo增加分类和标签</span><br><span class=\"line\">date: 2021-09-24 14:43:00</span><br><span class=\"line\">categories: hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建“标签”选项（与添加分类操作类似）\"><a href=\"#创建“标签”选项（与添加分类操作类似）\" class=\"headerlink\" title=\"创建“标签”选项（与添加分类操作类似）\"></a><strong>创建“标签”选项</strong>（与添加分类操作类似）</h4><p>在hexo目录下，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>hexo\\source目录下会生成tags文件夹；编辑tags\\index.md，添加    type: “tags”；添加后保存并关闭文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2021-09-24 14:43:00</span><br><span class=\"line\">type: tags</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>给文章添加“tags”属性</strong></p>\n<p>打开需要添加标签的文章，为其添加tags属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hexo增加分类和标签</span><br><span class=\"line\">date: 2019-04-24 15:40:24</span><br><span class=\"line\">categories: hexo</span><br><span class=\"line\">tags: hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>参考：</strong></p>\n<p><a href=\"https://juejin.cn/post/6844903830216261645\">https://juejin.cn/post/6844903830216261645</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"创建“分类”选项\"><a href=\"#创建“分类”选项\" class=\"headerlink\" title=\"创建“分类”选项\"></a><strong>创建“分类”选项</strong></h4><p>在hexo目录下，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>hexo\\source目录下会生成categories文件夹；编辑categories\\index.md，添加    type: “categories”；添加后保存并关闭文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分类</span><br><span class=\"line\">date: 2021-09-24 14:43:00</span><br><span class=\"line\">type: categories</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>给文章添加“categories”属性</strong></p>\n<p>打开需要添加分类的文章，为其添加categories属性。</p>\n<p>下方的categories:hexo表示这篇文章添加到到“hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hexo增加分类和标签</span><br><span class=\"line\">date: 2021-09-24 14:43:00</span><br><span class=\"line\">categories: hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建“标签”选项（与添加分类操作类似）\"><a href=\"#创建“标签”选项（与添加分类操作类似）\" class=\"headerlink\" title=\"创建“标签”选项（与添加分类操作类似）\"></a><strong>创建“标签”选项</strong>（与添加分类操作类似）</h4><p>在hexo目录下，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>hexo\\source目录下会生成tags文件夹；编辑tags\\index.md，添加    type: “tags”；添加后保存并关闭文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2021-09-24 14:43:00</span><br><span class=\"line\">type: tags</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>给文章添加“tags”属性</strong></p>\n<p>打开需要添加标签的文章，为其添加tags属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hexo增加分类和标签</span><br><span class=\"line\">date: 2019-04-24 15:40:24</span><br><span class=\"line\">categories: hexo</span><br><span class=\"line\">tags: hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>参考：</strong></p>\n<p><a href=\"https://juejin.cn/post/6844903830216261645\">https://juejin.cn/post/6844903830216261645</a></p>\n"},{"title":"hexo多电脑部署","date":"2021-09-25T02:33:30.000Z","_content":"\n> 当在办公室或家里都想输出文章，怎么办呢？\n\n在github已有仓库（xxx.github.io）中，新建分支（比如：命名为build分支），把已经创建的本地文件全部上传；\n\n这里可以把build作为默认分支（`新建的文章默认是提交到master分支上的`），这样每次有变更后，就如同提交代码一样，把本地文件提交到build上。\n\n在新的电脑上拉取build分支即可同步已经配置好的相关内容；\n\nclone到本地后，要确认相关环境是否都配置过，然后需要在clone的本地文件中执行 `npm install` 和 `npm install -g hexo` \n\n这样就可以继续输出文章啦~\n","source":"_posts/hexo多电脑部署.md","raw":"---\ntitle: hexo多电脑部署\ndate: 2021-09-25 10:33:30\ntags: hexo\ncategories: hexo\n\n---\n\n> 当在办公室或家里都想输出文章，怎么办呢？\n\n在github已有仓库（xxx.github.io）中，新建分支（比如：命名为build分支），把已经创建的本地文件全部上传；\n\n这里可以把build作为默认分支（`新建的文章默认是提交到master分支上的`），这样每次有变更后，就如同提交代码一样，把本地文件提交到build上。\n\n在新的电脑上拉取build分支即可同步已经配置好的相关内容；\n\nclone到本地后，要确认相关环境是否都配置过，然后需要在clone的本地文件中执行 `npm install` 和 `npm install -g hexo` \n\n这样就可以继续输出文章啦~\n","slug":"hexo多电脑部署","published":1,"updated":"2021-10-08T08:41:46.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepi001m7wgs1qkb2wia","content":"<blockquote>\n<p>当在办公室或家里都想输出文章，怎么办呢？</p>\n</blockquote>\n<p>在github已有仓库（xxx.github.io）中，新建分支（比如：命名为build分支），把已经创建的本地文件全部上传；</p>\n<p>这里可以把build作为默认分支（<code>新建的文章默认是提交到master分支上的</code>），这样每次有变更后，就如同提交代码一样，把本地文件提交到build上。</p>\n<p>在新的电脑上拉取build分支即可同步已经配置好的相关内容；</p>\n<p>clone到本地后，要确认相关环境是否都配置过，然后需要在clone的本地文件中执行 <code>npm install</code> 和 <code>npm install -g hexo</code> </p>\n<p>这样就可以继续输出文章啦~</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>当在办公室或家里都想输出文章，怎么办呢？</p>\n</blockquote>\n<p>在github已有仓库（xxx.github.io）中，新建分支（比如：命名为build分支），把已经创建的本地文件全部上传；</p>\n<p>这里可以把build作为默认分支（<code>新建的文章默认是提交到master分支上的</code>），这样每次有变更后，就如同提交代码一样，把本地文件提交到build上。</p>\n<p>在新的电脑上拉取build分支即可同步已经配置好的相关内容；</p>\n<p>clone到本地后，要确认相关环境是否都配置过，然后需要在clone的本地文件中执行 <code>npm install</code> 和 <code>npm install -g hexo</code> </p>\n<p>这样就可以继续输出文章啦~</p>\n"},{"title":"事件分发","date":"2021-11-08T07:38:05.000Z","_content":"\n\n\n1. 首先，要知道事件包含：按下，抬起，移动，取消；这也就是对应着MotionEvent中的ACTION_DOWN、ACTION_UP、ACTION_MOVE、ACTION_CANCEL...\n2. 其次，要知道分发，是在Activity、ViewGroup、View之间进行；\n3. 最后涉及到的主要方法：`dispatchTouchEvent（）、onTouchEvent（）、onInterceptTouchEvent（）`\n\n> onInterceptTouchEvent为ViewGroup独有的方法\n\n\n\n\n\n项目中实例：\n\n1. 当有屏幕上有触摸时，不能回到空闲状态，重写onTouchEvent（）判断ACTION_DOWN\\ACTION_MOVE状态 以及ACITON_UP\\ACTION_CANCEL\n2. 按钮按下抬起效果\n\n\n\n\n\n\n\nhttps://blog.csdn.net/A_pyf/article/details/113392655\n\nhttps://www.jianshu.com/p/1ac8d469f014\n\nhttps://juejin.cn/post/6844903991483039751\n\nhttps://www.jianshu.com/p/e99b5e8bd67b\n","source":"_posts/事件分发.md","raw":"---\ntitle: 事件分发\ndate: 2021-11-08 15:38:05\ntags: Android\ncategories: Android\n\n---\n\n\n\n1. 首先，要知道事件包含：按下，抬起，移动，取消；这也就是对应着MotionEvent中的ACTION_DOWN、ACTION_UP、ACTION_MOVE、ACTION_CANCEL...\n2. 其次，要知道分发，是在Activity、ViewGroup、View之间进行；\n3. 最后涉及到的主要方法：`dispatchTouchEvent（）、onTouchEvent（）、onInterceptTouchEvent（）`\n\n> onInterceptTouchEvent为ViewGroup独有的方法\n\n\n\n\n\n项目中实例：\n\n1. 当有屏幕上有触摸时，不能回到空闲状态，重写onTouchEvent（）判断ACTION_DOWN\\ACTION_MOVE状态 以及ACITON_UP\\ACTION_CANCEL\n2. 按钮按下抬起效果\n\n\n\n\n\n\n\nhttps://blog.csdn.net/A_pyf/article/details/113392655\n\nhttps://www.jianshu.com/p/1ac8d469f014\n\nhttps://juejin.cn/post/6844903991483039751\n\nhttps://www.jianshu.com/p/e99b5e8bd67b\n","slug":"事件分发","published":1,"updated":"2021-11-09T06:47:20.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepk001q7wgs4pwf93lj","content":"<ol>\n<li>首先，要知道事件包含：按下，抬起，移动，取消；这也就是对应着MotionEvent中的ACTION_DOWN、ACTION_UP、ACTION_MOVE、ACTION_CANCEL…</li>\n<li>其次，要知道分发，是在Activity、ViewGroup、View之间进行；</li>\n<li>最后涉及到的主要方法：<code>dispatchTouchEvent（）、onTouchEvent（）、onInterceptTouchEvent（）</code></li>\n</ol>\n<blockquote>\n<p>onInterceptTouchEvent为ViewGroup独有的方法</p>\n</blockquote>\n<p>项目中实例：</p>\n<ol>\n<li>当有屏幕上有触摸时，不能回到空闲状态，重写onTouchEvent（）判断ACTION_DOWN\\ACTION_MOVE状态 以及ACITON_UP\\ACTION_CANCEL</li>\n<li>按钮按下抬起效果</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/A_pyf/article/details/113392655\">https://blog.csdn.net/A_pyf/article/details/113392655</a></p>\n<p><a href=\"https://www.jianshu.com/p/1ac8d469f014\">https://www.jianshu.com/p/1ac8d469f014</a></p>\n<p><a href=\"https://juejin.cn/post/6844903991483039751\">https://juejin.cn/post/6844903991483039751</a></p>\n<p><a href=\"https://www.jianshu.com/p/e99b5e8bd67b\">https://www.jianshu.com/p/e99b5e8bd67b</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>首先，要知道事件包含：按下，抬起，移动，取消；这也就是对应着MotionEvent中的ACTION_DOWN、ACTION_UP、ACTION_MOVE、ACTION_CANCEL…</li>\n<li>其次，要知道分发，是在Activity、ViewGroup、View之间进行；</li>\n<li>最后涉及到的主要方法：<code>dispatchTouchEvent（）、onTouchEvent（）、onInterceptTouchEvent（）</code></li>\n</ol>\n<blockquote>\n<p>onInterceptTouchEvent为ViewGroup独有的方法</p>\n</blockquote>\n<p>项目中实例：</p>\n<ol>\n<li>当有屏幕上有触摸时，不能回到空闲状态，重写onTouchEvent（）判断ACTION_DOWN\\ACTION_MOVE状态 以及ACITON_UP\\ACTION_CANCEL</li>\n<li>按钮按下抬起效果</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/A_pyf/article/details/113392655\">https://blog.csdn.net/A_pyf/article/details/113392655</a></p>\n<p><a href=\"https://www.jianshu.com/p/1ac8d469f014\">https://www.jianshu.com/p/1ac8d469f014</a></p>\n<p><a href=\"https://juejin.cn/post/6844903991483039751\">https://juejin.cn/post/6844903991483039751</a></p>\n<p><a href=\"https://www.jianshu.com/p/e99b5e8bd67b\">https://www.jianshu.com/p/e99b5e8bd67b</a></p>\n"},{"title":"rn入门","date":"2021-10-13T01:43:44.000Z","_content":"### **环境搭建**\n\n```\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nCould not determine the dependencies of task ':app:compileDebugJavaWithJavac'.\n> Failed to install the following Android SDK packages as some licences have not been accepted.\n     patcher;v4 SDK Patch Applier v4\n     emulator Android Emulator\n     platforms;android-30 Android SDK Platform 30\n     build-tools;30.0.2 Android SDK Build-Tools 30.0.2\n     tools Android SDK Tools\n  To build this project, accept the SDK license agreements and install the missing components using the Android Studio SDK Manager.\n  Alternatively, to transfer the license agreements from one workstation to another, see http://d.android.com/r/studio-ui/export-licenses.html\n\n  Using Android SDK: C:\\android_sdk\\platform-tools\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\n\n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 28s\n\nerror Failed to install the app. Please accept all necessary Android SDK licenses using Android SDK Manager: \"$ANDROID_HOME/tools/bin/sdkmanager --licenses\".\nError: Command failed: gradlew.bat app:installDebug -PreactNativeDevServerPort=8081\n\n```\n\n经检查是环境变量配置有问题，导致找不到对应的路径；\n可以参考[官方文档](https://www.react-native.cn/docs/environment-setup)","source":"_posts/rn入门.md","raw":"title: rn入门\ntags: RN\ncategories: RN\ndate: 2021-10-13 09:43:44\n---\n### **环境搭建**\n\n```\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nCould not determine the dependencies of task ':app:compileDebugJavaWithJavac'.\n> Failed to install the following Android SDK packages as some licences have not been accepted.\n     patcher;v4 SDK Patch Applier v4\n     emulator Android Emulator\n     platforms;android-30 Android SDK Platform 30\n     build-tools;30.0.2 Android SDK Build-Tools 30.0.2\n     tools Android SDK Tools\n  To build this project, accept the SDK license agreements and install the missing components using the Android Studio SDK Manager.\n  Alternatively, to transfer the license agreements from one workstation to another, see http://d.android.com/r/studio-ui/export-licenses.html\n\n  Using Android SDK: C:\\android_sdk\\platform-tools\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\n\n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 28s\n\nerror Failed to install the app. Please accept all necessary Android SDK licenses using Android SDK Manager: \"$ANDROID_HOME/tools/bin/sdkmanager --licenses\".\nError: Command failed: gradlew.bat app:installDebug -PreactNativeDevServerPort=8081\n\n```\n\n经检查是环境变量配置有问题，导致找不到对应的路径；\n可以参考[官方文档](https://www.react-native.cn/docs/environment-setup)","slug":"rn入门","published":1,"updated":"2021-10-22T01:43:49.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepo001u7wgs6vsv5st3","content":"<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a><strong>环境搭建</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FAILURE: Build failed with an exception.</span><br><span class=\"line\"></span><br><span class=\"line\">* What went wrong:</span><br><span class=\"line\">Could not determine the dependencies of task &#x27;:app:compileDebugJavaWithJavac&#x27;.</span><br><span class=\"line\">&gt; Failed to install the following Android SDK packages as some licences have not been accepted.</span><br><span class=\"line\">     patcher;v4 SDK Patch Applier v4</span><br><span class=\"line\">     emulator Android Emulator</span><br><span class=\"line\">     platforms;android-30 Android SDK Platform 30</span><br><span class=\"line\">     build-tools;30.0.2 Android SDK Build-Tools 30.0.2</span><br><span class=\"line\">     tools Android SDK Tools</span><br><span class=\"line\">  To build this project, accept the SDK license agreements and install the missing components using the Android Studio SDK Manager.</span><br><span class=\"line\">  Alternatively, to transfer the license agreements from one workstation to another, see http://d.android.com/r/studio-ui/export-licenses.html</span><br><span class=\"line\"></span><br><span class=\"line\">  Using Android SDK: C:\\android_sdk\\platform-tools</span><br><span class=\"line\"></span><br><span class=\"line\">* Try:</span><br><span class=\"line\">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.</span><br><span class=\"line\"></span><br><span class=\"line\">* Get more help at https://help.gradle.org</span><br><span class=\"line\"></span><br><span class=\"line\">BUILD FAILED in 28s</span><br><span class=\"line\"></span><br><span class=\"line\">error Failed to install the app. Please accept all necessary Android SDK licenses using Android SDK Manager: &quot;$ANDROID_HOME/tools/bin/sdkmanager --licenses&quot;.</span><br><span class=\"line\">Error: Command failed: gradlew.bat app:installDebug -PreactNativeDevServerPort=8081</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>经检查是环境变量配置有问题，导致找不到对应的路径；<br>可以参考<a href=\"https://www.react-native.cn/docs/environment-setup\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a><strong>环境搭建</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FAILURE: Build failed with an exception.</span><br><span class=\"line\"></span><br><span class=\"line\">* What went wrong:</span><br><span class=\"line\">Could not determine the dependencies of task &#x27;:app:compileDebugJavaWithJavac&#x27;.</span><br><span class=\"line\">&gt; Failed to install the following Android SDK packages as some licences have not been accepted.</span><br><span class=\"line\">     patcher;v4 SDK Patch Applier v4</span><br><span class=\"line\">     emulator Android Emulator</span><br><span class=\"line\">     platforms;android-30 Android SDK Platform 30</span><br><span class=\"line\">     build-tools;30.0.2 Android SDK Build-Tools 30.0.2</span><br><span class=\"line\">     tools Android SDK Tools</span><br><span class=\"line\">  To build this project, accept the SDK license agreements and install the missing components using the Android Studio SDK Manager.</span><br><span class=\"line\">  Alternatively, to transfer the license agreements from one workstation to another, see http://d.android.com/r/studio-ui/export-licenses.html</span><br><span class=\"line\"></span><br><span class=\"line\">  Using Android SDK: C:\\android_sdk\\platform-tools</span><br><span class=\"line\"></span><br><span class=\"line\">* Try:</span><br><span class=\"line\">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.</span><br><span class=\"line\"></span><br><span class=\"line\">* Get more help at https://help.gradle.org</span><br><span class=\"line\"></span><br><span class=\"line\">BUILD FAILED in 28s</span><br><span class=\"line\"></span><br><span class=\"line\">error Failed to install the app. Please accept all necessary Android SDK licenses using Android SDK Manager: &quot;$ANDROID_HOME/tools/bin/sdkmanager --licenses&quot;.</span><br><span class=\"line\">Error: Command failed: gradlew.bat app:installDebug -PreactNativeDevServerPort=8081</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>经检查是环境变量配置有问题，导致找不到对应的路径；<br>可以参考<a href=\"https://www.react-native.cn/docs/environment-setup\">官方文档</a></p>\n"},{"title":"协程","date":"2021-10-26T07:39:49.000Z","_content":"\n> 定义新协程的范围。 每个协程构建器（如launch 、 async等）都是CoroutineScope的扩展，并继承其coroutineContext以自动传播其所有元素和取消。\n> 获得作用域独立实例的最佳方法是CoroutineScope()和MainScope()工厂函数，注意在不再需要这些协程作用域时取消它们（有关解释和示例，请参阅下面的自定义用法部分）。\n> 可以使用加号运算符将其他上下文元素附加到范围。\n> 结构化并发约定\n> 不建议手动实现此接口，应首选委托实现。 按照惯例，范围的上下文应该包含一个作业的实例，以通过取消传播来强制执行结构化并发的纪律。\n> 每个协程构建器（如launch 、 async等）和每个作用域函数（如coroutineScope 、 withContext等）都将自己的作用域和自己的Job实例提供到它运行的内部代码块中。 按照惯例，它们都等待其块内的所有协程完成，然后再完成自己，从而强制执行结构化并发。 有关更多详细信息，请参阅作业文档。\n> 安卓使用\n> Android 对具有生命周期的所有实体中的协程范围提供第一方支持。 请参阅相应的文档 。\n> 自定义用法\n> CoroutineScope应声明为实体的属性，该实体具有明确定义的生命周期，负责启动子协程。 CoroutineScope的相应实例应使用CoroutineScope()或MainScope()函数创建。 它们之间的区别仅在于CoroutineDispatcher ：\n> CoroutineScope()使用Dispatchers.Default作为其协程。\n> MainScope()使用Dispatchers.Main作为其协程。\n> CustomScope自定义使用的关键部分是取消它和生命周期的结束。 当不再需要启动协程的实体时，应使用CoroutineScope.cancel扩展函数。 它取消了所有可能仍在代表它运行的协程。\n\n简单介绍\n\nKotlin 中的协程：本质上，协程是轻量级的线程（官方说法）。协程就是 Kotlin 提供的一套线程封装的 API；是一个线程框架；\n\n```kotlin\nCoroutineScope\nGlobalScope//它的生命周期会和 app 一致，且不能取消\nMainScope\nlifecycleScope(LifecycleCoroutineScope)\nviewModelScope\nlaunch{}\nContinuation\nCoroutineContext\nrunBlocking{}//线程阻塞的\nwithContext{}\nsuspend\n```\n\n```kotlin\nCoroutineScope(Dispatchers.IO).launch { ... }\n```\n\n\n\n协程的优势：\n\n- 基于kotlin，更方便；\n\n- 用看起来同步的方式写出异步的代码（`非阻塞式挂起`）\n\n- 更方便处理并发任务（多线程），实现复杂的业务逻辑\n\n- 同一个代码块内，实现线程切换\n\n  \n\n在 Kotlin 中有这样一个语法糖：当函数的最后一个参数是 lambda 表达式时，可以将 lambda 写在括号外。这就是它的闭包原则。\n\n\n\n协程原理\n\n协程并发怎么处理，多个协程怎么保证数据安全\n\n协程lanuch有哪些参数\n\n```kotlin\n/**\n *\n在不阻塞当前线程的情况下启动一个新的协程，并将对协程的引用作为Job 返回。 当结果作业被取消时，协同程序被取消。\n协程上下文继承自CoroutineScope 。 可以使用上下文参数指定其他上下文元素。 如果上下文没有任何调度程序或任何其他ContinuationInterceptor ，则使用Dispatchers.Default 。 父作业也从CoroutineScope继承，但也可以用相应的上下文元素覆盖。\n默认情况下，协程会立即安排执行。 可以通过start参数指定其他启动选项。 有关详细信息，请参阅CoroutineStart 。 一个可选的启动参数可以设置为CoroutineStart.LAZY以延迟启动协程。 在这种情况下，协程Job以新状态创建。 它可以用start函数显式启动，并在第一次调用join 时隐式启动。\n该协程中的未捕获异常默认取消上下文中的父作业（除非明确指定CoroutineExceptionHandler ），这意味着当launch与另一个协程的上下文一起使用时，任何未捕获的异常都会导致父协程的取消。\n有关可用于新创建的协程的调试工具的描述，请参阅newCoroutineContext 。\n参数：\ncontext - 附加到CoroutineScope.coroutineContext协程的上下文。\nstart - 协程启动选项。 默认值为CoroutineStart.DEFAULT 。\nblock - 将在提供的范围的上下文中调用的协程代码\n **/\npublic fun CoroutineScope.launch(\n    context: CoroutineContext = EmptyCoroutineContext,\n    start: CoroutineStart = CoroutineStart.DEFAULT,\n    block: suspend CoroutineScope.() -> Unit\n): Job {\n    val newContext = newCoroutineContext(context)\n    val coroutine = if (start.isLazy)\n        LazyStandaloneCoroutine(newContext, block) else\n        StandaloneCoroutine(newContext, active = true)\n    coroutine.start(start, coroutine, block)\n    return coroutine\n}\n```\n\n\n\n\n\n#### ***挂起函数*** \n\n它不会造成线程阻塞，但是会 *挂起* 协程，并且只能在协程中使用\n\n协程内的`delay(timeMillis: Long)`也是一个挂起函数，由suspend修饰\n\n协程挂起和恢复的实现方式\n\n\n\nhttps://www.kotlincn.net/docs/reference/coroutines/basics.html\n\nhttps://github.com/Kotlin-zh/KEEP/blob/master/proposals/coroutines.md#%E5%8D%8F%E7%A8%8B%E6%A6%82%E8%BF%B0\n\nhttps://www.jianshu.com/p/92be626c594b\n","source":"_posts/协程.md","raw":"---\ntitle: 协程\ndate: 2021-10-26 15:39:49\ntags: Android\ncategories: Android\n\n---\n\n> 定义新协程的范围。 每个协程构建器（如launch 、 async等）都是CoroutineScope的扩展，并继承其coroutineContext以自动传播其所有元素和取消。\n> 获得作用域独立实例的最佳方法是CoroutineScope()和MainScope()工厂函数，注意在不再需要这些协程作用域时取消它们（有关解释和示例，请参阅下面的自定义用法部分）。\n> 可以使用加号运算符将其他上下文元素附加到范围。\n> 结构化并发约定\n> 不建议手动实现此接口，应首选委托实现。 按照惯例，范围的上下文应该包含一个作业的实例，以通过取消传播来强制执行结构化并发的纪律。\n> 每个协程构建器（如launch 、 async等）和每个作用域函数（如coroutineScope 、 withContext等）都将自己的作用域和自己的Job实例提供到它运行的内部代码块中。 按照惯例，它们都等待其块内的所有协程完成，然后再完成自己，从而强制执行结构化并发。 有关更多详细信息，请参阅作业文档。\n> 安卓使用\n> Android 对具有生命周期的所有实体中的协程范围提供第一方支持。 请参阅相应的文档 。\n> 自定义用法\n> CoroutineScope应声明为实体的属性，该实体具有明确定义的生命周期，负责启动子协程。 CoroutineScope的相应实例应使用CoroutineScope()或MainScope()函数创建。 它们之间的区别仅在于CoroutineDispatcher ：\n> CoroutineScope()使用Dispatchers.Default作为其协程。\n> MainScope()使用Dispatchers.Main作为其协程。\n> CustomScope自定义使用的关键部分是取消它和生命周期的结束。 当不再需要启动协程的实体时，应使用CoroutineScope.cancel扩展函数。 它取消了所有可能仍在代表它运行的协程。\n\n简单介绍\n\nKotlin 中的协程：本质上，协程是轻量级的线程（官方说法）。协程就是 Kotlin 提供的一套线程封装的 API；是一个线程框架；\n\n```kotlin\nCoroutineScope\nGlobalScope//它的生命周期会和 app 一致，且不能取消\nMainScope\nlifecycleScope(LifecycleCoroutineScope)\nviewModelScope\nlaunch{}\nContinuation\nCoroutineContext\nrunBlocking{}//线程阻塞的\nwithContext{}\nsuspend\n```\n\n```kotlin\nCoroutineScope(Dispatchers.IO).launch { ... }\n```\n\n\n\n协程的优势：\n\n- 基于kotlin，更方便；\n\n- 用看起来同步的方式写出异步的代码（`非阻塞式挂起`）\n\n- 更方便处理并发任务（多线程），实现复杂的业务逻辑\n\n- 同一个代码块内，实现线程切换\n\n  \n\n在 Kotlin 中有这样一个语法糖：当函数的最后一个参数是 lambda 表达式时，可以将 lambda 写在括号外。这就是它的闭包原则。\n\n\n\n协程原理\n\n协程并发怎么处理，多个协程怎么保证数据安全\n\n协程lanuch有哪些参数\n\n```kotlin\n/**\n *\n在不阻塞当前线程的情况下启动一个新的协程，并将对协程的引用作为Job 返回。 当结果作业被取消时，协同程序被取消。\n协程上下文继承自CoroutineScope 。 可以使用上下文参数指定其他上下文元素。 如果上下文没有任何调度程序或任何其他ContinuationInterceptor ，则使用Dispatchers.Default 。 父作业也从CoroutineScope继承，但也可以用相应的上下文元素覆盖。\n默认情况下，协程会立即安排执行。 可以通过start参数指定其他启动选项。 有关详细信息，请参阅CoroutineStart 。 一个可选的启动参数可以设置为CoroutineStart.LAZY以延迟启动协程。 在这种情况下，协程Job以新状态创建。 它可以用start函数显式启动，并在第一次调用join 时隐式启动。\n该协程中的未捕获异常默认取消上下文中的父作业（除非明确指定CoroutineExceptionHandler ），这意味着当launch与另一个协程的上下文一起使用时，任何未捕获的异常都会导致父协程的取消。\n有关可用于新创建的协程的调试工具的描述，请参阅newCoroutineContext 。\n参数：\ncontext - 附加到CoroutineScope.coroutineContext协程的上下文。\nstart - 协程启动选项。 默认值为CoroutineStart.DEFAULT 。\nblock - 将在提供的范围的上下文中调用的协程代码\n **/\npublic fun CoroutineScope.launch(\n    context: CoroutineContext = EmptyCoroutineContext,\n    start: CoroutineStart = CoroutineStart.DEFAULT,\n    block: suspend CoroutineScope.() -> Unit\n): Job {\n    val newContext = newCoroutineContext(context)\n    val coroutine = if (start.isLazy)\n        LazyStandaloneCoroutine(newContext, block) else\n        StandaloneCoroutine(newContext, active = true)\n    coroutine.start(start, coroutine, block)\n    return coroutine\n}\n```\n\n\n\n\n\n#### ***挂起函数*** \n\n它不会造成线程阻塞，但是会 *挂起* 协程，并且只能在协程中使用\n\n协程内的`delay(timeMillis: Long)`也是一个挂起函数，由suspend修饰\n\n协程挂起和恢复的实现方式\n\n\n\nhttps://www.kotlincn.net/docs/reference/coroutines/basics.html\n\nhttps://github.com/Kotlin-zh/KEEP/blob/master/proposals/coroutines.md#%E5%8D%8F%E7%A8%8B%E6%A6%82%E8%BF%B0\n\nhttps://www.jianshu.com/p/92be626c594b\n","slug":"协程","published":1,"updated":"2021-10-29T07:06:13.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepp001x7wgs44xi0oqo","content":"<blockquote>\n<p>定义新协程的范围。 每个协程构建器（如launch 、 async等）都是CoroutineScope的扩展，并继承其coroutineContext以自动传播其所有元素和取消。<br>获得作用域独立实例的最佳方法是CoroutineScope()和MainScope()工厂函数，注意在不再需要这些协程作用域时取消它们（有关解释和示例，请参阅下面的自定义用法部分）。<br>可以使用加号运算符将其他上下文元素附加到范围。<br>结构化并发约定<br>不建议手动实现此接口，应首选委托实现。 按照惯例，范围的上下文应该包含一个作业的实例，以通过取消传播来强制执行结构化并发的纪律。<br>每个协程构建器（如launch 、 async等）和每个作用域函数（如coroutineScope 、 withContext等）都将自己的作用域和自己的Job实例提供到它运行的内部代码块中。 按照惯例，它们都等待其块内的所有协程完成，然后再完成自己，从而强制执行结构化并发。 有关更多详细信息，请参阅作业文档。<br>安卓使用<br>Android 对具有生命周期的所有实体中的协程范围提供第一方支持。 请参阅相应的文档 。<br>自定义用法<br>CoroutineScope应声明为实体的属性，该实体具有明确定义的生命周期，负责启动子协程。 CoroutineScope的相应实例应使用CoroutineScope()或MainScope()函数创建。 它们之间的区别仅在于CoroutineDispatcher ：<br>CoroutineScope()使用Dispatchers.Default作为其协程。<br>MainScope()使用Dispatchers.Main作为其协程。<br>CustomScope自定义使用的关键部分是取消它和生命周期的结束。 当不再需要启动协程的实体时，应使用CoroutineScope.cancel扩展函数。 它取消了所有可能仍在代表它运行的协程。</p>\n</blockquote>\n<p>简单介绍</p>\n<p>Kotlin 中的协程：本质上，协程是轻量级的线程（官方说法）。协程就是 Kotlin 提供的一套线程封装的 API；是一个线程框架；</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CoroutineScope</span><br><span class=\"line\">GlobalScope<span class=\"comment\">//它的生命周期会和 app 一致，且不能取消</span></span><br><span class=\"line\">MainScope</span><br><span class=\"line\">lifecycleScope(LifecycleCoroutineScope)</span><br><span class=\"line\">viewModelScope</span><br><span class=\"line\">launch&#123;&#125;</span><br><span class=\"line\">Continuation</span><br><span class=\"line\">CoroutineContext</span><br><span class=\"line\">runBlocking&#123;&#125;<span class=\"comment\">//线程阻塞的</span></span><br><span class=\"line\">withContext&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">suspend</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CoroutineScope(Dispatchers.IO).launch &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>协程的优势：</p>\n<ul>\n<li><p>基于kotlin，更方便；</p>\n</li>\n<li><p>用看起来同步的方式写出异步的代码（<code>非阻塞式挂起</code>）</p>\n</li>\n<li><p>更方便处理并发任务（多线程），实现复杂的业务逻辑</p>\n</li>\n<li><p>同一个代码块内，实现线程切换</p>\n</li>\n</ul>\n<p>在 Kotlin 中有这样一个语法糖：当函数的最后一个参数是 lambda 表达式时，可以将 lambda 写在括号外。这就是它的闭包原则。</p>\n<p>协程原理</p>\n<p>协程并发怎么处理，多个协程怎么保证数据安全</p>\n<p>协程lanuch有哪些参数</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\">在不阻塞当前线程的情况下启动一个新的协程，并将对协程的引用作为Job 返回。 当结果作业被取消时，协同程序被取消。</span></span><br><span class=\"line\"><span class=\"comment\">协程上下文继承自CoroutineScope 。 可以使用上下文参数指定其他上下文元素。 如果上下文没有任何调度程序或任何其他ContinuationInterceptor ，则使用Dispatchers.Default 。 父作业也从CoroutineScope继承，但也可以用相应的上下文元素覆盖。</span></span><br><span class=\"line\"><span class=\"comment\">默认情况下，协程会立即安排执行。 可以通过start参数指定其他启动选项。 有关详细信息，请参阅CoroutineStart 。 一个可选的启动参数可以设置为CoroutineStart.LAZY以延迟启动协程。 在这种情况下，协程Job以新状态创建。 它可以用start函数显式启动，并在第一次调用join 时隐式启动。</span></span><br><span class=\"line\"><span class=\"comment\">该协程中的未捕获异常默认取消上下文中的父作业（除非明确指定CoroutineExceptionHandler ），这意味着当launch与另一个协程的上下文一起使用时，任何未捕获的异常都会导致父协程的取消。</span></span><br><span class=\"line\"><span class=\"comment\">有关可用于新创建的协程的调试工具的描述，请参阅newCoroutineContext 。</span></span><br><span class=\"line\"><span class=\"comment\">参数：</span></span><br><span class=\"line\"><span class=\"comment\">context - 附加到CoroutineScope.coroutineContext协程的上下文。</span></span><br><span class=\"line\"><span class=\"comment\">start - 协程启动选项。 默认值为CoroutineStart.DEFAULT 。</span></span><br><span class=\"line\"><span class=\"comment\">block - 将在提供的范围的上下文中调用的协程代码</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> CoroutineScope.<span class=\"title\">launch</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    context: <span class=\"type\">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    start: <span class=\"type\">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    block: <span class=\"type\">suspend</span> <span class=\"type\">CoroutineScope</span>.() -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>: Job &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> newContext = newCoroutineContext(context)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> coroutine = <span class=\"keyword\">if</span> (start.isLazy)</span><br><span class=\"line\">        LazyStandaloneCoroutine(newContext, block) <span class=\"keyword\">else</span></span><br><span class=\"line\">        StandaloneCoroutine(newContext, active = <span class=\"literal\">true</span>)</span><br><span class=\"line\">    coroutine.start(start, coroutine, block)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> coroutine</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"挂起函数\"><a href=\"#挂起函数\" class=\"headerlink\" title=\"挂起函数\"></a><em><strong>挂起函数</strong></em></h4><p>它不会造成线程阻塞，但是会 <em>挂起</em> 协程，并且只能在协程中使用</p>\n<p>协程内的<code>delay(timeMillis: Long)</code>也是一个挂起函数，由suspend修饰</p>\n<p>协程挂起和恢复的实现方式</p>\n<p><a href=\"https://www.kotlincn.net/docs/reference/coroutines/basics.html\">https://www.kotlincn.net/docs/reference/coroutines/basics.html</a></p>\n<p><a href=\"https://github.com/Kotlin-zh/KEEP/blob/master/proposals/coroutines.md#%E5%8D%8F%E7%A8%8B%E6%A6%82%E8%BF%B0\">https://github.com/Kotlin-zh/KEEP/blob/master/proposals/coroutines.md#%E5%8D%8F%E7%A8%8B%E6%A6%82%E8%BF%B0</a></p>\n<p><a href=\"https://www.jianshu.com/p/92be626c594b\">https://www.jianshu.com/p/92be626c594b</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>定义新协程的范围。 每个协程构建器（如launch 、 async等）都是CoroutineScope的扩展，并继承其coroutineContext以自动传播其所有元素和取消。<br>获得作用域独立实例的最佳方法是CoroutineScope()和MainScope()工厂函数，注意在不再需要这些协程作用域时取消它们（有关解释和示例，请参阅下面的自定义用法部分）。<br>可以使用加号运算符将其他上下文元素附加到范围。<br>结构化并发约定<br>不建议手动实现此接口，应首选委托实现。 按照惯例，范围的上下文应该包含一个作业的实例，以通过取消传播来强制执行结构化并发的纪律。<br>每个协程构建器（如launch 、 async等）和每个作用域函数（如coroutineScope 、 withContext等）都将自己的作用域和自己的Job实例提供到它运行的内部代码块中。 按照惯例，它们都等待其块内的所有协程完成，然后再完成自己，从而强制执行结构化并发。 有关更多详细信息，请参阅作业文档。<br>安卓使用<br>Android 对具有生命周期的所有实体中的协程范围提供第一方支持。 请参阅相应的文档 。<br>自定义用法<br>CoroutineScope应声明为实体的属性，该实体具有明确定义的生命周期，负责启动子协程。 CoroutineScope的相应实例应使用CoroutineScope()或MainScope()函数创建。 它们之间的区别仅在于CoroutineDispatcher ：<br>CoroutineScope()使用Dispatchers.Default作为其协程。<br>MainScope()使用Dispatchers.Main作为其协程。<br>CustomScope自定义使用的关键部分是取消它和生命周期的结束。 当不再需要启动协程的实体时，应使用CoroutineScope.cancel扩展函数。 它取消了所有可能仍在代表它运行的协程。</p>\n</blockquote>\n<p>简单介绍</p>\n<p>Kotlin 中的协程：本质上，协程是轻量级的线程（官方说法）。协程就是 Kotlin 提供的一套线程封装的 API；是一个线程框架；</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CoroutineScope</span><br><span class=\"line\">GlobalScope<span class=\"comment\">//它的生命周期会和 app 一致，且不能取消</span></span><br><span class=\"line\">MainScope</span><br><span class=\"line\">lifecycleScope(LifecycleCoroutineScope)</span><br><span class=\"line\">viewModelScope</span><br><span class=\"line\">launch&#123;&#125;</span><br><span class=\"line\">Continuation</span><br><span class=\"line\">CoroutineContext</span><br><span class=\"line\">runBlocking&#123;&#125;<span class=\"comment\">//线程阻塞的</span></span><br><span class=\"line\">withContext&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">suspend</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CoroutineScope(Dispatchers.IO).launch &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>协程的优势：</p>\n<ul>\n<li><p>基于kotlin，更方便；</p>\n</li>\n<li><p>用看起来同步的方式写出异步的代码（<code>非阻塞式挂起</code>）</p>\n</li>\n<li><p>更方便处理并发任务（多线程），实现复杂的业务逻辑</p>\n</li>\n<li><p>同一个代码块内，实现线程切换</p>\n</li>\n</ul>\n<p>在 Kotlin 中有这样一个语法糖：当函数的最后一个参数是 lambda 表达式时，可以将 lambda 写在括号外。这就是它的闭包原则。</p>\n<p>协程原理</p>\n<p>协程并发怎么处理，多个协程怎么保证数据安全</p>\n<p>协程lanuch有哪些参数</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\">在不阻塞当前线程的情况下启动一个新的协程，并将对协程的引用作为Job 返回。 当结果作业被取消时，协同程序被取消。</span></span><br><span class=\"line\"><span class=\"comment\">协程上下文继承自CoroutineScope 。 可以使用上下文参数指定其他上下文元素。 如果上下文没有任何调度程序或任何其他ContinuationInterceptor ，则使用Dispatchers.Default 。 父作业也从CoroutineScope继承，但也可以用相应的上下文元素覆盖。</span></span><br><span class=\"line\"><span class=\"comment\">默认情况下，协程会立即安排执行。 可以通过start参数指定其他启动选项。 有关详细信息，请参阅CoroutineStart 。 一个可选的启动参数可以设置为CoroutineStart.LAZY以延迟启动协程。 在这种情况下，协程Job以新状态创建。 它可以用start函数显式启动，并在第一次调用join 时隐式启动。</span></span><br><span class=\"line\"><span class=\"comment\">该协程中的未捕获异常默认取消上下文中的父作业（除非明确指定CoroutineExceptionHandler ），这意味着当launch与另一个协程的上下文一起使用时，任何未捕获的异常都会导致父协程的取消。</span></span><br><span class=\"line\"><span class=\"comment\">有关可用于新创建的协程的调试工具的描述，请参阅newCoroutineContext 。</span></span><br><span class=\"line\"><span class=\"comment\">参数：</span></span><br><span class=\"line\"><span class=\"comment\">context - 附加到CoroutineScope.coroutineContext协程的上下文。</span></span><br><span class=\"line\"><span class=\"comment\">start - 协程启动选项。 默认值为CoroutineStart.DEFAULT 。</span></span><br><span class=\"line\"><span class=\"comment\">block - 将在提供的范围的上下文中调用的协程代码</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> CoroutineScope.<span class=\"title\">launch</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    context: <span class=\"type\">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    start: <span class=\"type\">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    block: <span class=\"type\">suspend</span> <span class=\"type\">CoroutineScope</span>.() -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>: Job &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> newContext = newCoroutineContext(context)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> coroutine = <span class=\"keyword\">if</span> (start.isLazy)</span><br><span class=\"line\">        LazyStandaloneCoroutine(newContext, block) <span class=\"keyword\">else</span></span><br><span class=\"line\">        StandaloneCoroutine(newContext, active = <span class=\"literal\">true</span>)</span><br><span class=\"line\">    coroutine.start(start, coroutine, block)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> coroutine</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"挂起函数\"><a href=\"#挂起函数\" class=\"headerlink\" title=\"挂起函数\"></a><em><strong>挂起函数</strong></em></h4><p>它不会造成线程阻塞，但是会 <em>挂起</em> 协程，并且只能在协程中使用</p>\n<p>协程内的<code>delay(timeMillis: Long)</code>也是一个挂起函数，由suspend修饰</p>\n<p>协程挂起和恢复的实现方式</p>\n<p><a href=\"https://www.kotlincn.net/docs/reference/coroutines/basics.html\">https://www.kotlincn.net/docs/reference/coroutines/basics.html</a></p>\n<p><a href=\"https://github.com/Kotlin-zh/KEEP/blob/master/proposals/coroutines.md#%E5%8D%8F%E7%A8%8B%E6%A6%82%E8%BF%B0\">https://github.com/Kotlin-zh/KEEP/blob/master/proposals/coroutines.md#%E5%8D%8F%E7%A8%8B%E6%A6%82%E8%BF%B0</a></p>\n<p><a href=\"https://www.jianshu.com/p/92be626c594b\">https://www.jianshu.com/p/92be626c594b</a></p>\n"},{"title":"泛型","date":"2021-10-28T07:12:52.000Z","_content":"","source":"_posts/泛型.md","raw":"---\ntitle: 泛型\ndate: 2021-10-28 15:12:52\ntags:\n---\n","slug":"泛型","published":1,"updated":"2021-10-28T07:12:52.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepu002g7wgsg7rtadrc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"自定义View及动画","date":"2021-11-11T01:01:23.000Z","_content":"","source":"_posts/自定义View及动画.md","raw":"---\ntitle: 自定义View及动画\ndate: 2021-11-11 09:01:23\ntags:\n---\n","slug":"自定义View及动画","published":1,"updated":"2021-11-11T01:01:23.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepv002h7wgsav3u9oty","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"记录","date":"2021-09-26T08:58:08.000Z","_content":"\n- 对Activity的启动流程了解吗？\n- AMS在Android起到什么作用，简单分析下Android的源码\n- system_server为什么要在Zygote中启动，而不是由init直接启动呢?\n- 为什么要专门使用Zygote进程去孵化应用进程，而不是让system_server去孵化呢?\n- 能说说具体是怎么导致死锁的吗?\n- Zygote为什么不采用Binder机制进行IPC通信?\n\nhttps://github.com/BlackZhangJX/Android-Notes\n\n\n\n\n\n\n\n一个球。。。\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item>\n        <shape android:shape=\"oval\">\n            <size\n                android:width=\"100dp\"\n                android:height=\"100dp\" />\n            <gradient\n                android:centerColor=\"#000000\"\n                android:centerX=\"0.4\"\n                android:centerY=\"0.34\"\n                android:endColor=\"#5A5A5A\"\n                android:gradientRadius=\"100dp\"\n                android:startColor=\"#ffffff\"\n                android:type=\"radial\"/>\n        </shape>\n    </item>\n</layer-list>\n```\n\n![image-20211027144900936](image-20211027144900936.png)\n\n","source":"_posts/记录.md","raw":"---\ntitle: 记录\ndate: 2021-09-26 16:58:08\ntags: 草稿\ncategories: 随记\n---\n\n- 对Activity的启动流程了解吗？\n- AMS在Android起到什么作用，简单分析下Android的源码\n- system_server为什么要在Zygote中启动，而不是由init直接启动呢?\n- 为什么要专门使用Zygote进程去孵化应用进程，而不是让system_server去孵化呢?\n- 能说说具体是怎么导致死锁的吗?\n- Zygote为什么不采用Binder机制进行IPC通信?\n\nhttps://github.com/BlackZhangJX/Android-Notes\n\n\n\n\n\n\n\n一个球。。。\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item>\n        <shape android:shape=\"oval\">\n            <size\n                android:width=\"100dp\"\n                android:height=\"100dp\" />\n            <gradient\n                android:centerColor=\"#000000\"\n                android:centerX=\"0.4\"\n                android:centerY=\"0.34\"\n                android:endColor=\"#5A5A5A\"\n                android:gradientRadius=\"100dp\"\n                android:startColor=\"#ffffff\"\n                android:type=\"radial\"/>\n        </shape>\n    </item>\n</layer-list>\n```\n\n![image-20211027144900936](image-20211027144900936.png)\n\n","slug":"记录","published":1,"updated":"2021-10-27T06:49:18.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepw002i7wgs6bxy9wk7","content":"<ul>\n<li>对Activity的启动流程了解吗？</li>\n<li>AMS在Android起到什么作用，简单分析下Android的源码</li>\n<li>system_server为什么要在Zygote中启动，而不是由init直接启动呢?</li>\n<li>为什么要专门使用Zygote进程去孵化应用进程，而不是让system_server去孵化呢?</li>\n<li>能说说具体是怎么导致死锁的吗?</li>\n<li>Zygote为什么不采用Binder机制进行IPC通信?</li>\n</ul>\n<p><a href=\"https://github.com/BlackZhangJX/Android-Notes\">https://github.com/BlackZhangJX/Android-Notes</a></p>\n<p>一个球。。。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layer-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">&quot;oval&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">size</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:width</span>=<span class=\"string\">&quot;100dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:height</span>=<span class=\"string\">&quot;100dp&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:centerColor</span>=<span class=\"string\">&quot;#000000&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:centerX</span>=<span class=\"string\">&quot;0.4&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:centerY</span>=<span class=\"string\">&quot;0.34&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:endColor</span>=<span class=\"string\">&quot;#5A5A5A&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gradientRadius</span>=<span class=\"string\">&quot;100dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:startColor</span>=<span class=\"string\">&quot;#ffffff&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:type</span>=<span class=\"string\">&quot;radial&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/09/26/%E8%AE%B0%E5%BD%95/image-20211027144900936.png\" alt=\"image-20211027144900936\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>对Activity的启动流程了解吗？</li>\n<li>AMS在Android起到什么作用，简单分析下Android的源码</li>\n<li>system_server为什么要在Zygote中启动，而不是由init直接启动呢?</li>\n<li>为什么要专门使用Zygote进程去孵化应用进程，而不是让system_server去孵化呢?</li>\n<li>能说说具体是怎么导致死锁的吗?</li>\n<li>Zygote为什么不采用Binder机制进行IPC通信?</li>\n</ul>\n<p><a href=\"https://github.com/BlackZhangJX/Android-Notes\">https://github.com/BlackZhangJX/Android-Notes</a></p>\n<p>一个球。。。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layer-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">&quot;oval&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">size</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:width</span>=<span class=\"string\">&quot;100dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:height</span>=<span class=\"string\">&quot;100dp&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:centerColor</span>=<span class=\"string\">&quot;#000000&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:centerX</span>=<span class=\"string\">&quot;0.4&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:centerY</span>=<span class=\"string\">&quot;0.34&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:endColor</span>=<span class=\"string\">&quot;#5A5A5A&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gradientRadius</span>=<span class=\"string\">&quot;100dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:startColor</span>=<span class=\"string\">&quot;#ffffff&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:type</span>=<span class=\"string\">&quot;radial&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/09/26/%E8%AE%B0%E5%BD%95/image-20211027144900936.png\" alt=\"image-20211027144900936\"></p>\n"},{"title":"小程序","date":"2021-11-25T01:04:06.000Z","_content":"\n","source":"_posts/小程序.md","raw":"---\ntitle: 小程序\ndate: 2021-11-25 09:04:06\ntags: wechat\ncategories: wechat\n\n---\n\n","slug":"小程序","published":1,"updated":"2021-11-25T01:05:01.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwe9ztwn00001kgs6s3k4391","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"IPC","date":"2021-11-30T03:28:05.000Z","_content":"\n#### **进程间通信**\n\n实现进程间通信可以通过AIDL、广播、文件、ContentProvider等，而底层则离不开Binder机制。\n\n\n\n两个进程对应的是不同的内存区域\n\n- **1.Application对象会创建多次**\n- **2.静态成员不共用**\n- **3.同步锁失效**\n- **4.单例模式失效**\n- **5.数据传递的对象必须可序列化**\n\n","source":"_posts/IPC.md","raw":"---\ntitle: IPC\ndate: 2021-11-30 11:28:05\ntags: Android\ncategories: Android\n\n---\n\n#### **进程间通信**\n\n实现进程间通信可以通过AIDL、广播、文件、ContentProvider等，而底层则离不开Binder机制。\n\n\n\n两个进程对应的是不同的内存区域\n\n- **1.Application对象会创建多次**\n- **2.静态成员不共用**\n- **3.同步锁失效**\n- **4.单例模式失效**\n- **5.数据传递的对象必须可序列化**\n\n","slug":"IPC","published":1,"updated":"2021-12-05T07:12:34.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwswsb2v0000pf3q39nkec5k","content":"<h4 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a><strong>进程间通信</strong></h4><p>实现进程间通信可以通过AIDL、广播、文件、ContentProvider等，而底层则离不开Binder机制。</p>\n<p>两个进程对应的是不同的内存区域</p>\n<ul>\n<li><strong>1.Application对象会创建多次</strong></li>\n<li><strong>2.静态成员不共用</strong></li>\n<li><strong>3.同步锁失效</strong></li>\n<li><strong>4.单例模式失效</strong></li>\n<li><strong>5.数据传递的对象必须可序列化</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a><strong>进程间通信</strong></h4><p>实现进程间通信可以通过AIDL、广播、文件、ContentProvider等，而底层则离不开Binder机制。</p>\n<p>两个进程对应的是不同的内存区域</p>\n<ul>\n<li><strong>1.Application对象会创建多次</strong></li>\n<li><strong>2.静态成员不共用</strong></li>\n<li><strong>3.同步锁失效</strong></li>\n<li><strong>4.单例模式失效</strong></li>\n<li><strong>5.数据传递的对象必须可序列化</strong></li>\n</ul>\n"},{"title":"设计模式","date":"2021-11-25T02:59:54.000Z","_content":"\n#### **面向对象的六大原则**\n\n> 1. 单一职责原则\n>\n> 2. 开闭原则\n>\n> 3. 里氏替换原则\n>\n> 4. 依赖倒置原则\n>\n> 5. 接口隔离原则\n>\n> 6. 最小知识原则（迪米特原则）\n>\n> 六大原则主要强调的就是抽象（抽象类、接口）、单一职责、最小化、低耦合、可扩展；\n\n####  **设计模式**\n\n1. **单例模式**\n   1. 懒汉\n   2. 恶汉\n   3. ***双重判断锁DCL***\n   4. ***静态内部类***\n   5. 枚举\n   6. 容器存储\n2. 建造者模式 Builder\n\n","source":"_posts/设计模式.md","raw":"---\ntitle: 设计模式\ndate: 2021-11-25 10:59:54\ntags: java\ncategories: java\n\n---\n\n#### **面向对象的六大原则**\n\n> 1. 单一职责原则\n>\n> 2. 开闭原则\n>\n> 3. 里氏替换原则\n>\n> 4. 依赖倒置原则\n>\n> 5. 接口隔离原则\n>\n> 6. 最小知识原则（迪米特原则）\n>\n> 六大原则主要强调的就是抽象（抽象类、接口）、单一职责、最小化、低耦合、可扩展；\n\n####  **设计模式**\n\n1. **单例模式**\n   1. 懒汉\n   2. 恶汉\n   3. ***双重判断锁DCL***\n   4. ***静态内部类***\n   5. 枚举\n   6. 容器存储\n2. 建造者模式 Builder\n\n","slug":"设计模式","published":1,"updated":"2021-12-05T07:12:34.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwswsb2x0001pf3q0k3z4djn","content":"<h4 id=\"面向对象的六大原则\"><a href=\"#面向对象的六大原则\" class=\"headerlink\" title=\"面向对象的六大原则\"></a><strong>面向对象的六大原则</strong></h4><blockquote>\n<ol>\n<li><p>单一职责原则</p>\n</li>\n<li><p>开闭原则</p>\n</li>\n<li><p>里氏替换原则</p>\n</li>\n<li><p>依赖倒置原则</p>\n</li>\n<li><p>接口隔离原则</p>\n</li>\n<li><p>最小知识原则（迪米特原则）</p>\n</li>\n</ol>\n<p>六大原则主要强调的就是抽象（抽象类、接口）、单一职责、最小化、低耦合、可扩展；</p>\n</blockquote>\n<h4 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a><strong>设计模式</strong></h4><ol>\n<li><strong>单例模式</strong><ol>\n<li>懒汉</li>\n<li>恶汉</li>\n<li><em><strong>双重判断锁DCL</strong></em></li>\n<li><em><strong>静态内部类</strong></em></li>\n<li>枚举</li>\n<li>容器存储</li>\n</ol>\n</li>\n<li>建造者模式 Builder</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"面向对象的六大原则\"><a href=\"#面向对象的六大原则\" class=\"headerlink\" title=\"面向对象的六大原则\"></a><strong>面向对象的六大原则</strong></h4><blockquote>\n<ol>\n<li><p>单一职责原则</p>\n</li>\n<li><p>开闭原则</p>\n</li>\n<li><p>里氏替换原则</p>\n</li>\n<li><p>依赖倒置原则</p>\n</li>\n<li><p>接口隔离原则</p>\n</li>\n<li><p>最小知识原则（迪米特原则）</p>\n</li>\n</ol>\n<p>六大原则主要强调的就是抽象（抽象类、接口）、单一职责、最小化、低耦合、可扩展；</p>\n</blockquote>\n<h4 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a><strong>设计模式</strong></h4><ol>\n<li><strong>单例模式</strong><ol>\n<li>懒汉</li>\n<li>恶汉</li>\n<li><em><strong>双重判断锁DCL</strong></em></li>\n<li><em><strong>静态内部类</strong></em></li>\n<li>枚举</li>\n<li>容器存储</li>\n</ol>\n</li>\n<li>建造者模式 Builder</li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/EACCES-permission-denied-access-usr-local-lib-node-modules/image-20210925105028907.png","slug":"image-20210925105028907.png","post":"ckvw4ieox00097wgsdyxtc0jn","modified":0,"renderable":0},{"_id":"source/_posts/Github-Hexo搭建笔记/image-20210918165516634.png","slug":"image-20210918165516634.png","post":"ckvw4iep3000j7wgsaz66cf80","modified":0,"renderable":0},{"_id":"source/_posts/Github-Hexo搭建笔记/image-20210923104949941.png","slug":"image-20210923104949941.png","post":"ckvw4iep3000j7wgsaz66cf80","modified":0,"renderable":0},{"_id":"source/_posts/Github-Hexo搭建笔记/image-20210923105008730.png","slug":"image-20210923105008730.png","post":"ckvw4iep3000j7wgsaz66cf80","modified":0,"renderable":0},{"_id":"source/_posts/TypeError-line-matchAll-is-not-a-function/image-20210925111618240.png","slug":"image-20210925111618240.png","post":"ckvw4iep9000v7wgsgqz8765k","modified":0,"renderable":0},{"_id":"source/_posts/androidview的绘制流程/源码流程图.png","slug":"源码流程图.png","post":"ckvw4iepc00137wgsbxxadxo5","modified":0,"renderable":0},{"_id":"source/_posts/git-github-com-Permission-denied-publickey/image-20210925123231078.png","slug":"image-20210925123231078.png","post":"ckvw4iepf001b7wgs4hep9iz6","modified":0,"renderable":0},{"_id":"source/_posts/hexo-YAMLException/image-20210924150934346.png","slug":"image-20210924150934346.png","post":"ckvw4iepg001e7wgsclda26ka","modified":0,"renderable":0},{"_id":"source/_posts/hexo-YAMLException/image-20210924150941054.png","slug":"image-20210924150941054.png","post":"ckvw4iepg001e7wgsclda26ka","modified":0,"renderable":0},{"_id":"source/_posts/hexo-YAMLException/image-20210924151455552.png","slug":"image-20210924151455552.png","post":"ckvw4iepg001e7wgsclda26ka","modified":0,"renderable":0},{"_id":"source/_posts/hexo-YAMLException/image-20210924151457951.png","slug":"image-20210924151457951.png","post":"ckvw4iepg001e7wgsclda26ka","modified":0,"renderable":0},{"_id":"source/_posts/记录/image-20211027144900936.png","slug":"image-20211027144900936.png","post":"ckvw4iepw002i7wgs6bxy9wk7","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckvw4ieoo00017wgshrtbb4vf","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iep3000g7wgsfp6m1y0u"},{"post_id":"ckvw4ieos00037wgsbaz748hj","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iep5000l7wgse7el1wu8"},{"post_id":"ckvw4ieow00077wgs2ljd0qrv","category_id":"ckvw4iep2000f7wgsf9q42hkc","_id":"ckvw4iep9000s7wgs82pg4ntl"},{"post_id":"ckvw4iep4000k7wgs0i3tdwdw","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iepa000x7wgsfdihe5bd"},{"post_id":"ckvw4iep6000o7wgsgtlrcq8k","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iepc00107wgs6xla1qjm"},{"post_id":"ckvw4ieox00087wgsg0ny3vsk","category_id":"ckvw4iep6000m7wgscsgg20co","_id":"ckvw4iepd00157wgsa1sp8226"},{"post_id":"ckvw4iep7000q7wgsew13dyx5","category_id":"ckvw4iep6000m7wgscsgg20co","_id":"ckvw4iepe00187wgsd5ewajp6"},{"post_id":"ckvw4ieox00097wgsdyxtc0jn","category_id":"ckvw4iep9000t7wgs0wlg7px5","_id":"ckvw4iepg001d7wgs4d0a79yv"},{"post_id":"ckvw4iepb000y7wgsawx41keh","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4ieph001g7wgs2gj1c6ce"},{"post_id":"ckvw4iepc00137wgsbxxadxo5","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iepi001l7wgs4yfjb2wa"},{"post_id":"ckvw4iep0000d7wgs8d2lc4hr","category_id":"ckvw4iep9000t7wgs0wlg7px5","_id":"ckvw4iepj001o7wgs5ib54l0m"},{"post_id":"ckvw4iepd00167wgs1zrh8qtd","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iepn001t7wgsa9d3d0rx"},{"post_id":"ckvw4iep2000e7wgsd00neu64","category_id":"ckvw4iep6000m7wgscsgg20co","_id":"ckvw4iepo001w7wgs1xv6ev8j"},{"post_id":"ckvw4iepg001e7wgsclda26ka","category_id":"ckvw4iep9000t7wgs0wlg7px5","_id":"ckvw4iepp001z7wgs42mqdf6s"},{"post_id":"ckvw4ieph001i7wgs20pc8fz7","category_id":"ckvw4iep9000t7wgs0wlg7px5","_id":"ckvw4iepq00237wgsgbt27lo6"},{"post_id":"ckvw4iep3000j7wgsaz66cf80","category_id":"ckvw4iep9000t7wgs0wlg7px5","_id":"ckvw4iepq00257wgsgp99fuqb"},{"post_id":"ckvw4iepi001m7wgs1qkb2wia","category_id":"ckvw4iep9000t7wgs0wlg7px5","_id":"ckvw4iepq00277wgs1p6f33l2"},{"post_id":"ckvw4iepk001q7wgs4pwf93lj","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iepr00297wgs1n86deds"},{"post_id":"ckvw4iepf001b7wgs4hep9iz6","category_id":"ckvw4iepk001p7wgsfn7m6e9j","_id":"ckvw4iepr002b7wgs1ntz54q3"},{"post_id":"ckvw4iepp001x7wgs44xi0oqo","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iepr002d7wgsfraw9vh3"},{"post_id":"ckvw4iepo001u7wgs6vsv5st3","category_id":"ckvw4iepp00207wgs0b61ht7o","_id":"ckvw4iepr002f7wgs2s9k4lon"},{"post_id":"ckvw4iepw002i7wgs6bxy9wk7","category_id":"ckvw4iepx002j7wgs3gdy8jdp","_id":"ckvw4iepx002m7wgs7go9439a"},{"post_id":"ckwe9ztwn00001kgs6s3k4391","category_id":"ckwe9ztws00011kgs6oucbiql","_id":"ckwe9ztx100041kgsf4b30569"},{"post_id":"ckwswsb2v0000pf3q39nkec5k","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckwswsb340005pf3q5o2fap37"},{"post_id":"ckwswsb2x0001pf3q0k3z4djn","category_id":"ckwswsb2y0003pf3qhmvy6fbf","_id":"ckwswsb340007pf3q98nh35cz"}],"PostTag":[{"post_id":"ckvw4ieoo00017wgshrtbb4vf","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iep0000c7wgs5j58gnfx"},{"post_id":"ckvw4ieos00037wgsbaz748hj","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iep3000i7wgsboeu0hz0"},{"post_id":"ckvw4ieow00077wgs2ljd0qrv","tag_id":"ckvw4iep3000h7wgsgpkff9lo","_id":"ckvw4iep7000p7wgs6ecx37y5"},{"post_id":"ckvw4iep4000k7wgs0i3tdwdw","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iep8000r7wgsei0ie0ms"},{"post_id":"ckvw4iep6000o7wgsgtlrcq8k","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iepa000w7wgs2ewa3gbv"},{"post_id":"ckvw4ieox00087wgsg0ny3vsk","tag_id":"ckvw4iep6000n7wgs26f4c3m3","_id":"ckvw4iepc000z7wgs2vvn22ux"},{"post_id":"ckvw4iep7000q7wgsew13dyx5","tag_id":"ckvw4iep6000n7wgs26f4c3m3","_id":"ckvw4iepd00147wgsbbn8cl5u"},{"post_id":"ckvw4iep9000v7wgsgqz8765k","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepe00177wgs7f3abttd"},{"post_id":"ckvw4ieox00097wgsdyxtc0jn","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepg001c7wgsenw69wou"},{"post_id":"ckvw4iepb000y7wgsawx41keh","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iepg001f7wgsaas88u43"},{"post_id":"ckvw4iepc00137wgsbxxadxo5","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iepi001k7wgshagweo30"},{"post_id":"ckvw4iep0000d7wgs8d2lc4hr","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepj001n7wgshtv9au5s"},{"post_id":"ckvw4iepd00167wgs1zrh8qtd","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iepn001s7wgse1sm6s5d"},{"post_id":"ckvw4iepg001e7wgsclda26ka","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepo001v7wgsbr9ne4qe"},{"post_id":"ckvw4iep2000e7wgsd00neu64","tag_id":"ckvw4iepe001a7wgs5lxihh0y","_id":"ckvw4iepp001y7wgs0e8n5afu"},{"post_id":"ckvw4ieph001i7wgs20pc8fz7","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepq00227wgs9zth3mcz"},{"post_id":"ckvw4iepi001m7wgs1qkb2wia","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepq00247wgs1vyz7i0v"},{"post_id":"ckvw4iep3000j7wgsaz66cf80","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepq00267wgs5tvyg8xr"},{"post_id":"ckvw4iepk001q7wgs4pwf93lj","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iepr00287wgshb545b83"},{"post_id":"ckvw4iepf001b7wgs4hep9iz6","tag_id":"ckvw4iepn001r7wgsbvdtbzpi","_id":"ckvw4iepr002a7wgs61k98xp7"},{"post_id":"ckvw4iepp001x7wgs44xi0oqo","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iepr002c7wgs0lbe20aw"},{"post_id":"ckvw4iepo001u7wgs6vsv5st3","tag_id":"ckvw4iepq00217wgsf996ggt0","_id":"ckvw4iepr002e7wgs2iksetad"},{"post_id":"ckvw4iepw002i7wgs6bxy9wk7","tag_id":"ckvw4iepx002k7wgs5tvhaibm","_id":"ckvw4iepx002l7wgs2q2tckjc"},{"post_id":"ckwe9ztwn00001kgs6s3k4391","tag_id":"ckwe9ztwz00021kgsb9sggs8u","_id":"ckwe9ztx100031kgs0nu96c1q"},{"post_id":"ckwswsb2v0000pf3q39nkec5k","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckwswsb2x0002pf3qh4wb2673"},{"post_id":"ckwswsb2x0001pf3q0k3z4djn","tag_id":"ckwswsb330004pf3qe24zftwz","_id":"ckwswsb340006pf3qfnsf80n1"}],"Tag":[{"name":"Android","_id":"ckvw4ieov00057wgshihi2xb3"},{"name":"Compose","_id":"ckvw4iep3000h7wgsgpkff9lo"},{"name":"Kotlin","_id":"ckvw4iep6000n7wgs26f4c3m3"},{"name":"hexo","_id":"ckvw4iep9000u7wgsb9keco7u"},{"name":"Koltin","_id":"ckvw4iepe001a7wgs5lxihh0y"},{"name":"git","_id":"ckvw4iepn001r7wgsbvdtbzpi"},{"name":"RN","_id":"ckvw4iepq00217wgsf996ggt0"},{"name":"草稿","_id":"ckvw4iepx002k7wgs5tvhaibm"},{"name":"wechat","_id":"ckwe9ztwz00021kgsb9sggs8u"},{"name":"java","_id":"ckwswsb330004pf3qe24zftwz"}]}}
=======
{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"source/about/curry.jpg","path":"about/curry.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/Android新版本.md","hash":"87698e4cd7ad0cd68de6b84ccfa065874a7e7b0a","modified":1635385828391},{"_id":"source/_posts/ArrayList是线程安全的么.md","hash":"0413c3c32bf7e1b935fde69cfef2893137d6e38c","modified":1634888062244},{"_id":"source/_posts/Compose.md","hash":"b2b08848a4c27aaefa20f8f397fd17047c5dcffd","modified":1635488837877},{"_id":"source/_posts/DataStore.md","hash":"be1871ebd83858e3546608095dbc7558f023d2d6","modified":1635324745108},{"_id":"source/_posts/EACCES-permission-denied-access-usr-local-lib-node-modules.md","hash":"4a06ee2787456622fa128cb7656429db88eb2f14","modified":1633682506359},{"_id":"source/_posts/Error-Spawn-failed.md","hash":"89316659b3212c20a0ac595633c26729e1ef72db","modified":1633682506362},{"_id":"source/_posts/Flow.md","hash":"43987c283d82a2c9da551aa520f03dae3f0679dd","modified":1635404274749},{"_id":"source/_posts/Github-Hexo搭建笔记.md","hash":"114b41f944e49ff2eefed365cec795a0a58fe2bd","modified":1633682506365},{"_id":"source/_posts/Java常见的数据结构.md","hash":"76d9d1ebdede0143f4c7667e7fe07a5fbfbccf9b","modified":1634888202480},{"_id":"source/_posts/T-Unit.md","hash":"dfc79d007340e5657ef3ae8771a097aaf40f3a26","modified":1633682506368},{"_id":"source/_posts/LiveData.md","hash":"343188b9e0f58812eae2d9cfab603fa85fe890fe","modified":1635228051709},{"_id":"source/_posts/TypeError-line-matchAll-is-not-a-function.md","hash":"234da606023ca4740153d0b37b1520419df6e6f4","modified":1633682506371},{"_id":"source/_posts/androidview的绘制流程.md","hash":"05fe7cdad7ad8e6a34539bdf58bc0903ed0c0314","modified":1636091337980},{"_id":"source/_posts/ViewModel如何数据共享.md","hash":"998f9d1253402eaf53b07cd85a0eac875a54dd3c","modified":1634889193792},{"_id":"source/_posts/android中的System-gc.md","hash":"01233cfb0af793cdc88a5fd1b81e40929d134c44","modified":1633682506411},{"_id":"source/_posts/git-github-com-Permission-denied-publickey.md","hash":"54b4c6dec387b2d2b885f834b560157499c57daa","modified":1633682506422},{"_id":"source/_posts/hexo-YAMLException.md","hash":"0d81416bb531de44e490f689254ecbc06ff1a9b8","modified":1633682506424},{"_id":"source/_posts/hexo增加分类和标签.md","hash":"15c984c5ecea9fe39196ede644ba76966c7ff1fb","modified":1633682506429},{"_id":"source/_posts/hexo多电脑部署.md","hash":"9fd4c0e70a3bae83536765251fd08a576f4af958","modified":1633682506447},{"_id":"source/_posts/事件分发.md","hash":"183bbfa28b7303ce4d03e53862a57aaa761e4bbe","modified":1636440440110},{"_id":"source/_posts/rn入门.md","hash":"a2d96b82d8f07d531866ccd818ea7041c915563f","modified":1634867029622},{"_id":"source/_posts/协程.md","hash":"a942573abcc1a40e9b7f608a3f71f1bc161dbbd3","modified":1635491173974},{"_id":"source/_posts/泛型.md","hash":"e2bc6a8f1e520f6990dc7c21516c8f104f62d53f","modified":1635405172153},{"_id":"source/_posts/自定义View及动画.md","hash":"8d1a0c5fe971067e07011c0da79c801ca565391f","modified":1636592483728},{"_id":"source/_posts/记录.md","hash":"170b0a047f766ee0ac6b1f06e4cb2384f6d485de","modified":1635317358363},{"_id":"source/about/index.md","hash":"bd294d8d81f650ceed8be104bf0e0005658c30b0","modified":1633682506464},{"_id":"source/categories/index.md","hash":"e442818b73ed448354a91aca72caeb04f1107130","modified":1633682506467},{"_id":"source/tags/index.md","hash":"ecbd8a19ae3e7f22ea189ff5cd33a08c81ca537f","modified":1633682506470},{"_id":"source/_posts/Github-Hexo搭建笔记/image-20210923104949941.png","hash":"42d44f40ca13d2016858d4cb760650cb24d483ce","modified":1632365389970},{"_id":"source/_posts/Github-Hexo搭建笔记/image-20210918165516634.png","hash":"593a9f9444f086fe22e16efe3271b8f854f530c6","modified":1631955316637},{"_id":"source/_posts/Github-Hexo搭建笔记/image-20210923105008730.png","hash":"55f1d37ea6f9bed83c029b99bc839c7d5c39a560","modified":1632365408733},{"_id":"source/_posts/hexo-YAMLException/image-20210924150934346.png","hash":"bdd0ac0d2656b30684ce76a09bbc8e44d504a865","modified":1632467374345},{"_id":"source/_posts/hexo-YAMLException/image-20210924150941054.png","hash":"76f7cde90df35b8d78def4cbfab859476bab6747","modified":1632467381052},{"_id":"source/_posts/hexo-YAMLException/image-20210924151455552.png","hash":"c38490f623e69d8ed74106d6805d167c1c04198b","modified":1632467695561},{"_id":"source/_posts/hexo-YAMLException/image-20210924151457951.png","hash":"c38490f623e69d8ed74106d6805d167c1c04198b","modified":1632467697953},{"_id":"source/_posts/记录/image-20211027144900936.png","hash":"18c7c7c9b0660e655d5ab9eab7153f4e26554794","modified":1635317340997},{"_id":"source/about/curry.jpg","hash":"4598d39f13a0c8293367b1bb88b431187ba0d513","modified":1632639472189},{"_id":"source/_posts/index/curry.jpg","hash":"4598d39f13a0c8293367b1bb88b431187ba0d513","modified":1632639472189},{"_id":"source/_posts/TypeError-line-matchAll-is-not-a-function/image-20210925111618240.png","hash":"f677a40ab161565617222f8488c5a78b3aa12114","modified":1632637154629},{"_id":"source/_posts/EACCES-permission-denied-access-usr-local-lib-node-modules/image-20210925105028907.png","hash":"ac2c48973e7f5da724b6d8754f4b403ef775c611","modified":1632637154622},{"_id":"source/_posts/git-github-com-Permission-denied-publickey/image-20210925123231078.png","hash":"938bbaa0455a0d04cf501d4c80dc61d3f53762df","modified":1632637154635},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"afdebdb0be4158c0bf0a408109a5aa42c496dffd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":499162500000},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"1292d92cda574de7be79be9eed71e26b8d78f419","modified":1632638255720},{"_id":"node_modules/hexo-theme-next/package.json","hash":"e34a3bf296a80305bea5fed2922dbff1cb59418a","modified":1631953833617},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"7dc9e9366a19dc3c7be7ff482fbd19c88e620bf5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"42a9b81c5449afa9d67770604478168333c93804","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"3850424dbb23ca0791b35695e24804492d89f925","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"a20ed899d6a797de0b35c46bfd03722023649187","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"b1d24dc9ebc2a3b4a4c5a4f737de2f8ef126cfa9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"a4d42422119a0dacad426f033ea3aaf4e3cf339b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"3221ebcb2f308659ed1a86d1d53978aa62576958","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"92ab6bb3c3122980699f0613dac27a7cabfedecc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"08dac57e15c9f06c7cf54884b045f2362595f9d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"49aa8de07918a11399131dfd703418af3f0a1a19","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"8ed5ab7ec63f9fd5438d1c497cc5f50ae11fcfdf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"5c01e380ba843f8016d8fa4593432430f5bd3584","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"471dcbe22d0dbe043dcf25a1a1c17ca76aa9a548","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"3fc91aba5b17a5ae60b8e04707a7da87db4d0340","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"aafbb3c5c20f525a92716d89ff216c3081d7b4da","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"2e58cb90a77d3dd16e02b8949808b4b16453828c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"2a29bf3692f42f84e8f29314e0fb349f86fc727a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"5a4e5ed613f3990378f3f632e8f16b33374e0095","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"eae7b83f1c711ad2ab3a41d89f517445856ffec8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"bef7791a2e67e79f02076f2a89e1c7f95a83048c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"2421500e447822ef1b6826403a3e1df3345641d7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":499162500000},{"_id":"source/_posts/androidview的绘制流程/源码流程图.png","hash":"a0878e3e262b61cad4f1dcb82ba87e773dbe89e3","modified":1633682506387},{"_id":"public/about/index.html","hash":"deb3dc8322cf7ed3a1f48d5450203f3a4185d53c","modified":1636706025842},{"_id":"public/categories/index.html","hash":"a12f0acd12dfca37d219ab22f7222e87bb7e7741","modified":1636706025842},{"_id":"public/tags/index.html","hash":"194785637eb710a8ee659a86e752b9c528cfd28e","modified":1636706025842},{"_id":"public/2021/11/11/自定义View及动画/index.html","hash":"c865165080d7f28ad5d9aed8d0edb8dcf46e16ab","modified":1636706025842},{"_id":"public/2021/11/08/事件分发/index.html","hash":"b0382cbc1df6ca3d9b9e2d639477c41a8d501f3f","modified":1636706025842},{"_id":"public/2021/10/29/Compose/index.html","hash":"5bcca2ea6d08da065f6f5fda41d2d10cae1f9eed","modified":1636706025842},{"_id":"public/2021/10/28/泛型/index.html","hash":"306605e1b3c6e7947196024106dd0247ca66fc5a","modified":1636706025842},{"_id":"public/2021/10/28/Flow/index.html","hash":"be8abfcd2c2a68f0b51d9de5990702fc7af5bfb4","modified":1636706025842},{"_id":"public/2021/10/28/Android新版本/index.html","hash":"f5ce8949b5785e1daf6e69c9aa757aa06e968258","modified":1636706025842},{"_id":"public/2021/10/22/ArrayList是线程安全的么/index.html","hash":"65465e6e9c5caeed76a18ef2e44d434a9605b7d1","modified":1636706025842},{"_id":"public/2021/10/13/rn入门/index.html","hash":"f9ce5ebdea66352ba58515becf551fe8b6ddc883","modified":1636706025842},{"_id":"public/2021/10/22/Java常见的数据结构/index.html","hash":"e481171c156e3bd5f77761999998345598150959","modified":1636706025842},{"_id":"public/2021/09/26/记录/index.html","hash":"96d1809545dec0bd5e11f2e01afd4b26c71ea42d","modified":1636706025842},{"_id":"public/2021/09/25/git-github-com-Permission-denied-publickey/index.html","hash":"ca6034f117d1481eff47c8b423803302acecf742","modified":1636706025842},{"_id":"public/2021/09/25/TypeError-line-matchAll-is-not-a-function/index.html","hash":"38e0f57feaf3c578c9799a8aeb7732562e9b0f98","modified":1636706025842},{"_id":"public/2021/09/25/Error-Spawn-failed/index.html","hash":"f53524099395452a1feab743853d78ab2ef68b6d","modified":1636706025842},{"_id":"public/2021/09/25/EACCES-permission-denied-access-usr-local-lib-node-modules/index.html","hash":"f173e587221cdd2c9b45382d7a36865c0a534af5","modified":1636706025842},{"_id":"public/2021/09/25/hexo多电脑部署/index.html","hash":"38d158275550c76a239cda546aa955d1736c9d3e","modified":1636706025842},{"_id":"public/2021/09/24/hexo-YAMLException/index.html","hash":"96d9639474fe26e7070e0dcfd8b0baa1f7fe0aad","modified":1636706025842},{"_id":"public/2021/09/24/hexo增加分类和标签/index.html","hash":"747f7973b67112d05940257ce96f10833783ba4e","modified":1636706025842},{"_id":"public/2021/09/24/T-Unit/index.html","hash":"80a960b1c7598a652106f959ea1e3e5a411e74b8","modified":1636706025842},{"_id":"public/archives/index.html","hash":"c911b3840d55388f4acfed6e5e8712e39cb2c79f","modified":1636706025842},{"_id":"public/archives/page/3/index.html","hash":"ac4a3a9afcdfdd319a63eeaf3ecc096d66f615d9","modified":1636706025842},{"_id":"public/archives/page/2/index.html","hash":"55653a8396a1e813db63c57486f852d56a6a9f7f","modified":1636706025842},{"_id":"public/archives/2021/index.html","hash":"9137126e152475dd8d302a8f1f3cfddeba196d07","modified":1636706025842},{"_id":"public/archives/2021/page/2/index.html","hash":"d436433b60a9c43758415848c211d36698de877c","modified":1636706025842},{"_id":"public/archives/2021/page/3/index.html","hash":"e41fde106721dbbc3b377c22099e2e0f483a13dd","modified":1636706025842},{"_id":"public/archives/2021/09/index.html","hash":"a2a294ab5a61d76b170a4b5e827353a290a4bc15","modified":1636706025842},{"_id":"public/archives/2021/09/page/2/index.html","hash":"069751fd2861e5d897de6f98148383947dcc36e6","modified":1636706025842},{"_id":"public/archives/2021/10/index.html","hash":"049bc7f7b517a2d704998e6543e4a2444055b0ff","modified":1636706025842},{"_id":"public/archives/2021/10/page/2/index.html","hash":"f207653fd763f31d38c0591510edd15139bc77c0","modified":1636706025842},{"_id":"public/archives/2021/11/index.html","hash":"762ed17ce0da5de36e4ac9510d6f96ea2f464eec","modified":1636706025842},{"_id":"public/categories/Android/index.html","hash":"73bb1d89979b42aaa42bcd2cfd3ff20e2d5b657f","modified":1636706025842},{"_id":"public/categories/Compose/index.html","hash":"3631825513c818e9232c6a0408b806e7d0f06835","modified":1636706025842},{"_id":"public/categories/Kotlin/index.html","hash":"e36215addf2e66403e77ebe76f30ce3bb7d59592","modified":1636706025842},{"_id":"public/categories/hexo/index.html","hash":"d3472dbd9da1c7352d5844791cae97a119b1d5a6","modified":1636706025842},{"_id":"public/categories/git/index.html","hash":"6f987c61f10a189097a27a9094c831816a2eee7e","modified":1636706025842},{"_id":"public/categories/RN/index.html","hash":"3b3b9f0f4ccee1f305800f5e442d28a047e2a1d7","modified":1636706025842},{"_id":"public/categories/随记/index.html","hash":"ad8900b06645e170c88398ba19e7f0ee88ae76e5","modified":1636706025842},{"_id":"public/tags/Android/index.html","hash":"1f99b92f338fbd38f9e97dff44230fcf4d8348c7","modified":1636706025842},{"_id":"public/tags/Compose/index.html","hash":"ab6ac7b196037d6a5b5c3059b3f9d4058dccfa66","modified":1636706025842},{"_id":"public/tags/Kotlin/index.html","hash":"1ef3c8c9c5a3769b995d8041d1a5bbd0fbd084ef","modified":1636706025842},{"_id":"public/tags/hexo/index.html","hash":"19581e3e35e65909d3d94eec54549079f5f5fa0f","modified":1636706025842},{"_id":"public/tags/Koltin/index.html","hash":"a30917dd1888ce3bbe5d6ae53ba3a691715e4eef","modified":1636706025842},{"_id":"public/tags/git/index.html","hash":"b1643aca5a3359d98d05149736b3e5050cdef0a8","modified":1636706025842},{"_id":"public/tags/RN/index.html","hash":"4aeb9d269a30463216af04b9207b49733d68108b","modified":1636706025842},{"_id":"public/tags/草稿/index.html","hash":"2141bbf6703505d337ca2a408617512bf171fe08","modified":1636706025842},{"_id":"public/2021/10/26/协程/index.html","hash":"f709ea3a5f52f8a7e581e49fb4d426b61de35ff9","modified":1636706025842},{"_id":"public/2021/10/26/DataStore/index.html","hash":"1369e6e35d48401ea0042de31c47e786fecc4014","modified":1636706025842},{"_id":"public/2021/10/25/LiveData/index.html","hash":"88e6fd3c0237d53b4d6e8779648f5ea7849ab87a","modified":1636706025842},{"_id":"public/2021/10/22/ViewModel如何数据共享/index.html","hash":"93d5363ebb9a0f739711eb74165a3541f218e20b","modified":1636706025842},{"_id":"public/2021/10/04/androidview的绘制流程/index.html","hash":"6dd41c2e8956583c05aa846b7a482f8f3d87dbf6","modified":1636706025842},{"_id":"public/2021/09/27/android中的System-gc/index.html","hash":"9bec0cda963cbbec30e70ca9976c86aba11b4c57","modified":1636706025842},{"_id":"public/2021/09/18/Github-Hexo搭建笔记/index.html","hash":"55fa1f28c54dc10e0ed03852e3ca08b36a384570","modified":1636706025842},{"_id":"public/index.html","hash":"9102943c5a0722212d34caa6fd5cbf80274953fa","modified":1636706025842},{"_id":"public/page/2/index.html","hash":"14c01342d81b95bba670b853a96733eafd5c785b","modified":1636706025842},{"_id":"public/page/3/index.html","hash":"0df8d9b264f4df62ac5ad06672b05ada631f6792","modified":1636706025842},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1636706025842},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1636706025842},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1636706025842},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1636706025842},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1636706025842},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1636706025842},{"_id":"public/2021/09/18/Github-Hexo搭建笔记/image-20210923104949941.png","hash":"42d44f40ca13d2016858d4cb760650cb24d483ce","modified":1636706025842},{"_id":"public/2021/09/18/Github-Hexo搭建笔记/image-20210918165516634.png","hash":"593a9f9444f086fe22e16efe3271b8f854f530c6","modified":1636706025842},{"_id":"public/2021/09/24/hexo-YAMLException/image-20210924150934346.png","hash":"bdd0ac0d2656b30684ce76a09bbc8e44d504a865","modified":1636706025842},{"_id":"public/2021/09/24/hexo-YAMLException/image-20210924151457951.png","hash":"c38490f623e69d8ed74106d6805d167c1c04198b","modified":1636706025842},{"_id":"public/2021/09/24/hexo-YAMLException/image-20210924150941054.png","hash":"76f7cde90df35b8d78def4cbfab859476bab6747","modified":1636706025842},{"_id":"public/2021/09/18/Github-Hexo搭建笔记/image-20210923105008730.png","hash":"55f1d37ea6f9bed83c029b99bc839c7d5c39a560","modified":1636706025842},{"_id":"public/2021/09/24/hexo-YAMLException/image-20210924151455552.png","hash":"c38490f623e69d8ed74106d6805d167c1c04198b","modified":1636706025842},{"_id":"public/2021/09/26/记录/image-20211027144900936.png","hash":"18c7c7c9b0660e655d5ab9eab7153f4e26554794","modified":1636706025842},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1636706025842},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1636706025842},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1636706025842},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1636706025842},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1636706025842},{"_id":"public/js/next-boot.js","hash":"b1d24dc9ebc2a3b4a4c5a4f737de2f8ef126cfa9","modified":1636706025842},{"_id":"public/js/utils.js","hash":"a4d42422119a0dacad426f033ea3aaf4e3cf339b","modified":1636706025842},{"_id":"public/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1636706025842},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1636706025842},{"_id":"public/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1636706025842},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1636706025842},{"_id":"public/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":1636706025842},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1636706025842},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1636706025842},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1636706025842},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1636706025842},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1636706025842},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1636706025842},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1636706025842},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1636706025842},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1636706025842},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1636706025842},{"_id":"public/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":1636706025842},{"_id":"public/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1636706025842},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1636706025842},{"_id":"public/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":1636706025842},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1636706025842},{"_id":"public/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1636706025842},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1636706025842},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1636706025842},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1636706025842},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1636706025842},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1636706025842},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1636706025842},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1636706025842},{"_id":"public/css/main.css","hash":"a1f42e8268c0853de6ea6f46eef441a27be0aa13","modified":1636706025842},{"_id":"public/about/curry.jpg","hash":"4598d39f13a0c8293367b1bb88b431187ba0d513","modified":1636706025842},{"_id":"public/2021/09/25/TypeError-line-matchAll-is-not-a-function/image-20210925111618240.png","hash":"f677a40ab161565617222f8488c5a78b3aa12114","modified":1636706025842},{"_id":"public/2021/09/25/EACCES-permission-denied-access-usr-local-lib-node-modules/image-20210925105028907.png","hash":"ac2c48973e7f5da724b6d8754f4b403ef775c611","modified":1636706025842},{"_id":"public/2021/09/25/git-github-com-Permission-denied-publickey/image-20210925123231078.png","hash":"938bbaa0455a0d04cf501d4c80dc61d3f53762df","modified":1636706025842},{"_id":"public/2021/10/04/androidview的绘制流程/源码流程图.png","hash":"a0878e3e262b61cad4f1dcb82ba87e773dbe89e3","modified":1636706025842},{"_id":"source/_posts/小程序.md","hash":"c81fad898f39b3655c164c74dcf2564b4124cf11","modified":1637802301690},{"_id":"source/_posts/IPC.md","hash":"7f34e4dcaf31eb158e481b57b59699514535f8c9","modified":1638500717169},{"_id":"source/_posts/设计模式.md","hash":"062af97e9949e860b76408473c062283c8f7bcac","modified":1637905594114},{"_id":"source/_posts/IPC/v2-30dce36be4e6617596b5fab96ef904c6_720w.jpg","hash":"4b118fdf62a2db371c6ee8bc3e083a0f06cab155","modified":1638500703295}],"Category":[{"name":"Android","_id":"ckvw4ieou00047wgsg3xz6h0n"},{"name":"Compose","_id":"ckvw4iep2000f7wgsf9q42hkc"},{"name":"Kotlin","_id":"ckvw4iep6000m7wgscsgg20co"},{"name":"hexo","_id":"ckvw4iep9000t7wgs0wlg7px5"},{"name":"git","_id":"ckvw4iepk001p7wgsfn7m6e9j"},{"name":"RN","_id":"ckvw4iepp00207wgs0b61ht7o"},{"name":"随记","_id":"ckvw4iepx002j7wgs3gdy8jdp"},{"name":"wechat","_id":"ckwe9ztws00011kgs6oucbiql"},{"name":"java","_id":"ckwpt1jt30003jggs1cgm9p2e"}],"Data":[],"Page":[{"title":"0.0","date":"2021-09-26T06:39:54.000Z","_content":"\n![curry](curry.jpg)\n\n","source":"about/index.md","raw":"---\ntitle: \"0.0\"\ndate: 2021-09-26 14:39:54\n---\n\n![curry](curry.jpg)\n\n","updated":"2021-10-08T08:41:46.464Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckvw4ieon00007wgsfzqv4t5b","content":"<p><img src=\"/about/curry.jpg\" alt=\"curry\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/about/curry.jpg\" alt=\"curry\"></p>\n"},{"title":"分类","date":"2021-09-24T06:41:08.000Z","type":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-09-24 14:41:08\ntype: categories\n---\n\n","updated":"2021-10-08T08:41:46.467Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckvw4ieor00027wgsax16hi8b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2021-09-24T06:43:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-09-24 14:43:00\ntype: tags\n---\n","updated":"2021-10-08T08:41:46.470Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckvw4ieov00067wgs9i30hkkr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android新版本","date":"2021-10-28T01:19:29.000Z","_content":"\n#### **Android 12**\n\n- 启动画面API（引入了新的应用启动动画，包括启动时的进入应用运动、显示应用图标的启动画面，以及向应用本身的过渡）\n- 蓝牙权限变更，不再需要访问设备位置信息（ 引入了 [`BLUETOOTH_SCAN`](https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_SCAN)、[`BLUETOOTH_ADVERTISE`](https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_ADVERTISE) 和 [`BLUETOOTH_CONNECT`](https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_CONNECT) 权限）\n- 支持[AVIF](https://jakearchibald.com/2020/avif-has-landed/)图片\n- 圆角API，可以避免界面元素在带有圆角的屏幕上被截断。\n\n更多变更可查看[官网](https://developer.android.google.cn/about/versions/12/features)\n\n","source":"_posts/Android新版本.md","raw":"---\ntitle: Android新版本\ndate: 2021-10-28 09:19:29\ntags: Android\ncategories: Android\n---\n\n#### **Android 12**\n\n- 启动画面API（引入了新的应用启动动画，包括启动时的进入应用运动、显示应用图标的启动画面，以及向应用本身的过渡）\n- 蓝牙权限变更，不再需要访问设备位置信息（ 引入了 [`BLUETOOTH_SCAN`](https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_SCAN)、[`BLUETOOTH_ADVERTISE`](https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_ADVERTISE) 和 [`BLUETOOTH_CONNECT`](https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_CONNECT) 权限）\n- 支持[AVIF](https://jakearchibald.com/2020/avif-has-landed/)图片\n- 圆角API，可以避免界面元素在带有圆角的屏幕上被截断。\n\n更多变更可查看[官网](https://developer.android.google.cn/about/versions/12/features)\n\n","slug":"Android新版本","published":1,"updated":"2021-10-28T01:50:28.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4ieoo00017wgshrtbb4vf","content":"<h4 id=\"Android-12\"><a href=\"#Android-12\" class=\"headerlink\" title=\"Android 12\"></a><strong>Android 12</strong></h4><ul>\n<li>启动画面API（引入了新的应用启动动画，包括启动时的进入应用运动、显示应用图标的启动画面，以及向应用本身的过渡）</li>\n<li>蓝牙权限变更，不再需要访问设备位置信息（ 引入了 <a href=\"https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_SCAN\"><code>BLUETOOTH_SCAN</code></a>、<a href=\"https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_ADVERTISE\"><code>BLUETOOTH_ADVERTISE</code></a> 和 <a href=\"https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_CONNECT\"><code>BLUETOOTH_CONNECT</code></a> 权限）</li>\n<li>支持<a href=\"https://jakearchibald.com/2020/avif-has-landed/\">AVIF</a>图片</li>\n<li>圆角API，可以避免界面元素在带有圆角的屏幕上被截断。</li>\n</ul>\n<p>更多变更可查看<a href=\"https://developer.android.google.cn/about/versions/12/features\">官网</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Android-12\"><a href=\"#Android-12\" class=\"headerlink\" title=\"Android 12\"></a><strong>Android 12</strong></h4><ul>\n<li>启动画面API（引入了新的应用启动动画，包括启动时的进入应用运动、显示应用图标的启动画面，以及向应用本身的过渡）</li>\n<li>蓝牙权限变更，不再需要访问设备位置信息（ 引入了 <a href=\"https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_SCAN\"><code>BLUETOOTH_SCAN</code></a>、<a href=\"https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_ADVERTISE\"><code>BLUETOOTH_ADVERTISE</code></a> 和 <a href=\"https://developer.android.google.cn/reference/android/Manifest.permission#BLUETOOTH_CONNECT\"><code>BLUETOOTH_CONNECT</code></a> 权限）</li>\n<li>支持<a href=\"https://jakearchibald.com/2020/avif-has-landed/\">AVIF</a>图片</li>\n<li>圆角API，可以避免界面元素在带有圆角的屏幕上被截断。</li>\n</ul>\n<p>更多变更可查看<a href=\"https://developer.android.google.cn/about/versions/12/features\">官网</a></p>\n"},{"title":"ArrayList是线程安全的么","date":"2021-10-22T02:56:58.000Z","_content":"\nhttps://www.cnblogs.com/skywang12345/p/java_threads_category.html\nhttps://blog.csdn.net/u010416101/article/details/88720974\n\n","source":"_posts/ArrayList是线程安全的么.md","raw":"title:  ArrayList是线程安全的么\ndate: 2021-10-22 10:56:58\ntags: Android\ncategories: Android\n\n------\n\nhttps://www.cnblogs.com/skywang12345/p/java_threads_category.html\nhttps://blog.csdn.net/u010416101/article/details/88720974\n\n","slug":"ArrayList是线程安全的么","published":1,"updated":"2021-10-22T07:34:22.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4ieos00037wgsbaz748hj","content":"<p><a href=\"https://www.cnblogs.com/skywang12345/p/java_threads_category.html\">https://www.cnblogs.com/skywang12345/p/java_threads_category.html</a><br><a href=\"https://blog.csdn.net/u010416101/article/details/88720974\">https://blog.csdn.net/u010416101/article/details/88720974</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/skywang12345/p/java_threads_category.html\">https://www.cnblogs.com/skywang12345/p/java_threads_category.html</a><br><a href=\"https://blog.csdn.net/u010416101/article/details/88720974\">https://blog.csdn.net/u010416101/article/details/88720974</a></p>\n"},{"title":"Compose","date":"2021-10-29T06:25:26.000Z","_content":"\nCompose 声明式UI ，自动更新数据、界面\n","source":"_posts/Compose.md","raw":"---\ntitle: Compose\ndate: 2021-10-29 14:25:26\ntags: Compose\ncategories: Compose\n\n---\n\nCompose 声明式UI ，自动更新数据、界面\n","slug":"Compose","published":1,"updated":"2021-10-29T06:27:17.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4ieow00077wgs2ljd0qrv","content":"<p>Compose 声明式UI ，自动更新数据、界面</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Compose 声明式UI ，自动更新数据、界面</p>\n"},{"title":"DataStore","date":"2021-10-26T06:27:23.000Z","_content":"\n> DataStore 提供了一种安全且持久的方式来存储少量数据，例如首选项和应用程序状态。 它不支持部分更新：如果任何字段被修改，整个对象将被序列化并持久化到磁盘。 如果您想要部分更新，请考虑使用 Room API (SQLite)。\n> DataStore 提供 ACID 保证。 它是线程安全的，并且是非阻塞的。 特别是，它解决了 SharedPreferences API 的这些设计缺陷：\n>\n> - 同步 API 鼓励 StrictMode 违规\n> - apply() 和 commit() 没有发出错误信号的机制\n> - apply() 将阻塞 fsync() 上的 UI 线程\n> - 不持久——它可以返回尚未持久化的状态\n> - 没有一致性或事务语义\n> - 解析错误时引发运行时异常\n> - 公开对其内部状态的可变引用\n\n\n\n\n\n记录出现的问题：\n登录页保存登录名和密码；获取时转成了livedata，并观察其数据变化，当点击了登录，会打印两遍！\n\n```kotlin\nval loginName: LiveData<String>? =\n    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(\n        DataStorePreferences.LOGIN_NAME\n    )?.asLiveData()\nval loginPassword: LiveData<String>? =\n    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(\n        DataStorePreferences.LOGIN_PASSWORD\n    )?.asLiveData()\n...\n//点击登录，保存数据\nfun saveUserInfo(username: String, password: String) {\n        viewModelScope.launch {\n            DataStorePreferences(MyApplication.myApplication).setStringValue(\n                key = DataStorePreferences.LOGIN_NAME, value = username\n            )\n            DataStorePreferences(MyApplication.myApplication).setStringValue(\n                key = DataStorePreferences.LOGIN_PASSWORD,\n                value = password\n            )\n        }\n    }\n...\nloginViewModel.loginPassword?.observe(this@LoginActivity, Observer {\n            val loginPassword = it ?: return@Observer\n            Log.e(TAG, \"loginPassword: ${loginPassword}\")\n        })\n```\n\n正如DataStore的类注释：`如果任何字段被修改，整个对象将被序列化并持久化到磁盘`，因此对于livedata来说，保存了一遍用户名，保存了一遍密码，认为数据有两次变化，所以会打印两遍；\n\n修改代码如下：\n\n```kotlin\n//保存的时候，一起保存\nsuspend fun setNameAndPassWord(@NotNull name: String, passWord: String) {\n    context?.applicationContext?.dataStore?.edit { settings ->\n        settings.putAll(\n            stringPreferencesKey(LOGIN_NAME) to name,\n            stringPreferencesKey(LOGIN_PASSWORD) to passWord\n        )\n    }\n}\n```\n\n","source":"_posts/DataStore.md","raw":"---\ntitle: DataStore\ndate: 2021-10-26 14:27:23\ntags: Kotlin\ncategories: Kotlin\n\n---\n\n> DataStore 提供了一种安全且持久的方式来存储少量数据，例如首选项和应用程序状态。 它不支持部分更新：如果任何字段被修改，整个对象将被序列化并持久化到磁盘。 如果您想要部分更新，请考虑使用 Room API (SQLite)。\n> DataStore 提供 ACID 保证。 它是线程安全的，并且是非阻塞的。 特别是，它解决了 SharedPreferences API 的这些设计缺陷：\n>\n> - 同步 API 鼓励 StrictMode 违规\n> - apply() 和 commit() 没有发出错误信号的机制\n> - apply() 将阻塞 fsync() 上的 UI 线程\n> - 不持久——它可以返回尚未持久化的状态\n> - 没有一致性或事务语义\n> - 解析错误时引发运行时异常\n> - 公开对其内部状态的可变引用\n\n\n\n\n\n记录出现的问题：\n登录页保存登录名和密码；获取时转成了livedata，并观察其数据变化，当点击了登录，会打印两遍！\n\n```kotlin\nval loginName: LiveData<String>? =\n    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(\n        DataStorePreferences.LOGIN_NAME\n    )?.asLiveData()\nval loginPassword: LiveData<String>? =\n    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(\n        DataStorePreferences.LOGIN_PASSWORD\n    )?.asLiveData()\n...\n//点击登录，保存数据\nfun saveUserInfo(username: String, password: String) {\n        viewModelScope.launch {\n            DataStorePreferences(MyApplication.myApplication).setStringValue(\n                key = DataStorePreferences.LOGIN_NAME, value = username\n            )\n            DataStorePreferences(MyApplication.myApplication).setStringValue(\n                key = DataStorePreferences.LOGIN_PASSWORD,\n                value = password\n            )\n        }\n    }\n...\nloginViewModel.loginPassword?.observe(this@LoginActivity, Observer {\n            val loginPassword = it ?: return@Observer\n            Log.e(TAG, \"loginPassword: ${loginPassword}\")\n        })\n```\n\n正如DataStore的类注释：`如果任何字段被修改，整个对象将被序列化并持久化到磁盘`，因此对于livedata来说，保存了一遍用户名，保存了一遍密码，认为数据有两次变化，所以会打印两遍；\n\n修改代码如下：\n\n```kotlin\n//保存的时候，一起保存\nsuspend fun setNameAndPassWord(@NotNull name: String, passWord: String) {\n    context?.applicationContext?.dataStore?.edit { settings ->\n        settings.putAll(\n            stringPreferencesKey(LOGIN_NAME) to name,\n            stringPreferencesKey(LOGIN_PASSWORD) to passWord\n        )\n    }\n}\n```\n\n","slug":"DataStore","published":1,"updated":"2021-10-27T08:52:25.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4ieox00087wgsg0ny3vsk","content":"<blockquote>\n<p>DataStore 提供了一种安全且持久的方式来存储少量数据，例如首选项和应用程序状态。 它不支持部分更新：如果任何字段被修改，整个对象将被序列化并持久化到磁盘。 如果您想要部分更新，请考虑使用 Room API (SQLite)。<br>DataStore 提供 ACID 保证。 它是线程安全的，并且是非阻塞的。 特别是，它解决了 SharedPreferences API 的这些设计缺陷：</p>\n<ul>\n<li>同步 API 鼓励 StrictMode 违规</li>\n<li>apply() 和 commit() 没有发出错误信号的机制</li>\n<li>apply() 将阻塞 fsync() 上的 UI 线程</li>\n<li>不持久——它可以返回尚未持久化的状态</li>\n<li>没有一致性或事务语义</li>\n<li>解析错误时引发运行时异常</li>\n<li>公开对其内部状态的可变引用</li>\n</ul>\n</blockquote>\n<p>记录出现的问题：<br>登录页保存登录名和密码；获取时转成了livedata，并观察其数据变化，当点击了登录，会打印两遍！</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> loginName: LiveData&lt;String&gt;? =</span><br><span class=\"line\">    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(</span><br><span class=\"line\">        DataStorePreferences.LOGIN_NAME</span><br><span class=\"line\">    )?.asLiveData()</span><br><span class=\"line\"><span class=\"keyword\">val</span> loginPassword: LiveData&lt;String&gt;? =</span><br><span class=\"line\">    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(</span><br><span class=\"line\">        DataStorePreferences.LOGIN_PASSWORD</span><br><span class=\"line\">    )?.asLiveData()</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//点击登录，保存数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveUserInfo</span><span class=\"params\">(username: <span class=\"type\">String</span>, password: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        viewModelScope.launch &#123;</span><br><span class=\"line\">            DataStorePreferences(MyApplication.myApplication).setStringValue(</span><br><span class=\"line\">                key = DataStorePreferences.LOGIN_NAME, value = username</span><br><span class=\"line\">            )</span><br><span class=\"line\">            DataStorePreferences(MyApplication.myApplication).setStringValue(</span><br><span class=\"line\">                key = DataStorePreferences.LOGIN_PASSWORD,</span><br><span class=\"line\">                value = password</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">loginViewModel.loginPassword?.observe(<span class=\"keyword\">this</span><span class=\"symbol\">@LoginActivity</span>, Observer &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> loginPassword = it ?: <span class=\"keyword\">return</span><span class=\"symbol\">@Observer</span></span><br><span class=\"line\">            Log.e(TAG, <span class=\"string\">&quot;loginPassword: <span class=\"subst\">$&#123;loginPassword&#125;</span>&quot;</span>)</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>正如DataStore的类注释：<code>如果任何字段被修改，整个对象将被序列化并持久化到磁盘</code>，因此对于livedata来说，保存了一遍用户名，保存了一遍密码，认为数据有两次变化，所以会打印两遍；</p>\n<p>修改代码如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//保存的时候，一起保存</span></span><br><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setNameAndPassWord</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> name: <span class=\"type\">String</span>, passWord: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    context?.applicationContext?.dataStore?.edit &#123; settings -&gt;</span><br><span class=\"line\">        settings.putAll(</span><br><span class=\"line\">            stringPreferencesKey(LOGIN_NAME) to name,</span><br><span class=\"line\">            stringPreferencesKey(LOGIN_PASSWORD) to passWord</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>DataStore 提供了一种安全且持久的方式来存储少量数据，例如首选项和应用程序状态。 它不支持部分更新：如果任何字段被修改，整个对象将被序列化并持久化到磁盘。 如果您想要部分更新，请考虑使用 Room API (SQLite)。<br>DataStore 提供 ACID 保证。 它是线程安全的，并且是非阻塞的。 特别是，它解决了 SharedPreferences API 的这些设计缺陷：</p>\n<ul>\n<li>同步 API 鼓励 StrictMode 违规</li>\n<li>apply() 和 commit() 没有发出错误信号的机制</li>\n<li>apply() 将阻塞 fsync() 上的 UI 线程</li>\n<li>不持久——它可以返回尚未持久化的状态</li>\n<li>没有一致性或事务语义</li>\n<li>解析错误时引发运行时异常</li>\n<li>公开对其内部状态的可变引用</li>\n</ul>\n</blockquote>\n<p>记录出现的问题：<br>登录页保存登录名和密码；获取时转成了livedata，并观察其数据变化，当点击了登录，会打印两遍！</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> loginName: LiveData&lt;String&gt;? =</span><br><span class=\"line\">    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(</span><br><span class=\"line\">        DataStorePreferences.LOGIN_NAME</span><br><span class=\"line\">    )?.asLiveData()</span><br><span class=\"line\"><span class=\"keyword\">val</span> loginPassword: LiveData&lt;String&gt;? =</span><br><span class=\"line\">    DataStorePreferences(MyApplication.myApplication).getStringFlowValue(</span><br><span class=\"line\">        DataStorePreferences.LOGIN_PASSWORD</span><br><span class=\"line\">    )?.asLiveData()</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//点击登录，保存数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveUserInfo</span><span class=\"params\">(username: <span class=\"type\">String</span>, password: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        viewModelScope.launch &#123;</span><br><span class=\"line\">            DataStorePreferences(MyApplication.myApplication).setStringValue(</span><br><span class=\"line\">                key = DataStorePreferences.LOGIN_NAME, value = username</span><br><span class=\"line\">            )</span><br><span class=\"line\">            DataStorePreferences(MyApplication.myApplication).setStringValue(</span><br><span class=\"line\">                key = DataStorePreferences.LOGIN_PASSWORD,</span><br><span class=\"line\">                value = password</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">loginViewModel.loginPassword?.observe(<span class=\"keyword\">this</span><span class=\"symbol\">@LoginActivity</span>, Observer &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> loginPassword = it ?: <span class=\"keyword\">return</span><span class=\"symbol\">@Observer</span></span><br><span class=\"line\">            Log.e(TAG, <span class=\"string\">&quot;loginPassword: <span class=\"subst\">$&#123;loginPassword&#125;</span>&quot;</span>)</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>正如DataStore的类注释：<code>如果任何字段被修改，整个对象将被序列化并持久化到磁盘</code>，因此对于livedata来说，保存了一遍用户名，保存了一遍密码，认为数据有两次变化，所以会打印两遍；</p>\n<p>修改代码如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//保存的时候，一起保存</span></span><br><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setNameAndPassWord</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> name: <span class=\"type\">String</span>, passWord: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    context?.applicationContext?.dataStore?.edit &#123; settings -&gt;</span><br><span class=\"line\">        settings.putAll(</span><br><span class=\"line\">            stringPreferencesKey(LOGIN_NAME) to name,</span><br><span class=\"line\">            stringPreferencesKey(LOGIN_PASSWORD) to passWord</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"EACCES: permission denied, access '/usr/local/lib/node_modules'","date":"2021-09-25T02:49:05.000Z","_content":"\n在Mac电脑上，执行`npm install -g hexo`，出现入下的报错：\n\n![image-20210925105028907](image-20210925105028907.png)\n\n提示没有权限；命令前加sudo即可：\n\n```\nsudo hexo install -g \n```\n\n","source":"_posts/EACCES-permission-denied-access-usr-local-lib-node-modules.md","raw":"---\ntitle: 'EACCES: permission denied, access ''/usr/local/lib/node_modules'''\ndate: 2021-09-25 10:49:05\ntags: hexo\ncategories: hexo\n\n---\n\n在Mac电脑上，执行`npm install -g hexo`，出现入下的报错：\n\n![image-20210925105028907](image-20210925105028907.png)\n\n提示没有权限；命令前加sudo即可：\n\n```\nsudo hexo install -g \n```\n\n","slug":"EACCES-permission-denied-access-usr-local-lib-node-modules","published":1,"updated":"2021-10-08T08:41:46.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4ieox00097wgsdyxtc0jn","content":"<p>在Mac电脑上，执行<code>npm install -g hexo</code>，出现入下的报错：</p>\n<p><img src=\"/2021/09/25/EACCES-permission-denied-access-usr-local-lib-node-modules/image-20210925105028907.png\" alt=\"image-20210925105028907\"></p>\n<p>提示没有权限；命令前加sudo即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo hexo install -g </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>在Mac电脑上，执行<code>npm install -g hexo</code>，出现入下的报错：</p>\n<p><img src=\"/2021/09/25/EACCES-permission-denied-access-usr-local-lib-node-modules/image-20210925105028907.png\" alt=\"image-20210925105028907\"></p>\n<p>提示没有权限；命令前加sudo即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo hexo install -g </span><br></pre></td></tr></table></figure>\n\n"},{"title":"Error: Spawn failed","date":"2021-09-25T03:53:45.000Z","_content":"\n执行`hexo deploy`出现如下报错：\n\n```javascript\nfatal: in unpopulated submodule '.deploy_git'\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (/Volumes/curry/blog/node_modules/hexo-util/lib/spawn.js:51:21)\n      at ChildProcess.emit (events.js:400:28)\n      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\n```\n\n**解决方式**\n\n```java\n//删除git提交内容文件夹\nrm -rf .deploy_git/\n\n//依次执行\ngit config --global core.autocrlf false\nhexo clean \nhexo generate   \nhexo deploy\n```\n\n> 执行过以上命令后，可能需要尝试多次`hexo deploy`（实际操作中我尝试了两次 0.0）\n","source":"_posts/Error-Spawn-failed.md","raw":"---\ntitle: 'Error: Spawn failed'\ndate: 2021-09-25 11:53:45\ntags: hexo\ncategories: hexo\n\n---\n\n执行`hexo deploy`出现如下报错：\n\n```javascript\nfatal: in unpopulated submodule '.deploy_git'\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (/Volumes/curry/blog/node_modules/hexo-util/lib/spawn.js:51:21)\n      at ChildProcess.emit (events.js:400:28)\n      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\n```\n\n**解决方式**\n\n```java\n//删除git提交内容文件夹\nrm -rf .deploy_git/\n\n//依次执行\ngit config --global core.autocrlf false\nhexo clean \nhexo generate   \nhexo deploy\n```\n\n> 执行过以上命令后，可能需要尝试多次`hexo deploy`（实际操作中我尝试了两次 0.0）\n","slug":"Error-Spawn-failed","published":1,"updated":"2021-10-08T08:41:46.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep0000d7wgs8d2lc4hr","content":"<p>执行<code>hexo deploy</code>出现如下报错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">&#x27;.deploy_git&#x27;</span></span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  <span class=\"attr\">err</span>: <span class=\"built_in\">Error</span>: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (<span class=\"regexp\">/Volumes/</span>curry/blog/node_modules/hexo-util/lib/spawn.js:<span class=\"number\">51</span>:<span class=\"number\">21</span>)</span><br><span class=\"line\">      at ChildProcess.emit (events.js:<span class=\"number\">400</span>:<span class=\"number\">28</span>)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (internal/child_process.js:<span class=\"number\">277</span>:<span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"number\">128</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something<span class=\"string\">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除git提交内容文件夹</span></span><br><span class=\"line\">rm -rf .deploy_git/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//依次执行</span></span><br><span class=\"line\">git config --global core.autocrlf <span class=\"keyword\">false</span></span><br><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo generate   </span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行过以上命令后，可能需要尝试多次<code>hexo deploy</code>（实际操作中我尝试了两次 0.0）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>执行<code>hexo deploy</code>出现如下报错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">&#x27;.deploy_git&#x27;</span></span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  <span class=\"attr\">err</span>: <span class=\"built_in\">Error</span>: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (<span class=\"regexp\">/Volumes/</span>curry/blog/node_modules/hexo-util/lib/spawn.js:<span class=\"number\">51</span>:<span class=\"number\">21</span>)</span><br><span class=\"line\">      at ChildProcess.emit (events.js:<span class=\"number\">400</span>:<span class=\"number\">28</span>)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (internal/child_process.js:<span class=\"number\">277</span>:<span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"number\">128</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something<span class=\"string\">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除git提交内容文件夹</span></span><br><span class=\"line\">rm -rf .deploy_git/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//依次执行</span></span><br><span class=\"line\">git config --global core.autocrlf <span class=\"keyword\">false</span></span><br><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo generate   </span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行过以上命令后，可能需要尝试多次<code>hexo deploy</code>（实际操作中我尝试了两次 0.0）</p>\n</blockquote>\n"},{"title":"Flow","date":"2021-10-28T06:57:23.000Z","_content":"\nhttps://juejin.cn/post/6963555072814874661\n","source":"_posts/Flow.md","raw":"---\ntitle: Flow\ndate: 2021-10-28 14:57:23\ntags: Koltin\ncategories: Kotlin\n\n---\n\nhttps://juejin.cn/post/6963555072814874661\n","slug":"Flow","published":1,"updated":"2021-10-28T06:57:54.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep2000e7wgsd00neu64","content":"<p><a href=\"https://juejin.cn/post/6963555072814874661\">https://juejin.cn/post/6963555072814874661</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://juejin.cn/post/6963555072814874661\">https://juejin.cn/post/6963555072814874661</a></p>\n"},{"title":"Github+Hexo搭建笔记","date":"2021-09-18T08:51:31.000Z","_content":"\n#### **一. Github**\n\n1. gihub中创建仓库，仓库名为：<github昵称>.github.io\n\n   ![image-20210918165516634](image-20210918165516634.png)\n\n   >2021年8月13日之后github不在支持密码登录，使用**personal access token**替代\n   >\n   >在github的Settings -- Developer settings -- personal access token 中配置\n\n#### **二. Hexo**\n\n1. 安装hexo\n\n   ```javascript\n   npm install -g hexo\n   ```\n\n2. hexo初始化\n\n   ```javascript\n   hexo init\n   ```\n\n3. 本地运行命令\n\n   ```javascript\n   hexo s // hexo server\n   ```\n\n4. 部署到github，打开hexo文件夹中的_config.xml，文末添加deploy的对应内容，参考如下：\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/one-command-deployment\n   deploy:\n     type: git\n     repo: https://github.com/zhengcurry/zhengcurry.github.io\n     branch: master\n   ```\n\n   然后执行\n\n   ```javascript\n   npm install hexo-deployer-git --save\n   ```\n\n   部署：\n\n   ```undefined\n   hexo clean\n   \n   hexo deploy\n   ```\n\n5. 新建文章\n\n   ```\n   hexo new xxxx\n   ```\n\n6. 添加图片\n\n   ```undefined\n   npm install hexo-asset-image --save\n   ```\n\n   hexo文件夹中的_config.xml，把post_asset_folder值改为false\n\n   打开/node_modules/hexo-asset-image/index.js文件，替换如下\n\n   ```bash\n   'use strict';\n   var cheerio = require('cheerio');\n   \n   // http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\n   function getPosition(str, m, i) {\n     return str.split(m, i).join(m).length;\n   }\n   \n   var version = String(hexo.version).split('.');\n   hexo.extend.filter.register('after_post_render', function(data){\n     var config = hexo.config;\n     if(config.post_asset_folder){\n           var link = data.permalink;\n       if(version.length > 0 && Number(version[0]) == 3)\n          var beginPos = getPosition(link, '/', 1) + 1;\n       else\n          var beginPos = getPosition(link, '/', 3) + 1;\n       // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n       var endPos = link.lastIndexOf('/') + 1;\n       link = link.substring(beginPos, endPos);\n   \n       var toprocess = ['excerpt', 'more', 'content'];\n       for(var i = 0; i < toprocess.length; i++){\n         var key = toprocess[i];\n    \n         var $ = cheerio.load(data[key], {\n           ignoreWhitespace: false,\n           xmlMode: false,\n           lowerCaseTags: false,\n           decodeEntities: false\n         });\n   \n         $('img').each(function(){\n           if ($(this).attr('src')){\n               // For windows style path, we replace '\\' to '/'.\n               var src = $(this).attr('src').replace('\\\\', '/');\n               if(!/http[s]*.*|\\/\\/.*/.test(src) &&\n                  !/^\\s*\\//.test(src)) {\n                 // For \"about\" page, the first part of \"src\" can't be removed.\n                 // In addition, to support multi-level local directory.\n                 var linkArray = link.split('/').filter(function(elem){\n                   return elem != '';\n                 });\n                 var srcArray = src.split('/').filter(function(elem){\n                   return elem != '' && elem != '.';\n                 });\n                 if(srcArray.length > 1)\n                   srcArray.shift();\n                 src = srcArray.join('/');\n                 $(this).attr('src', config.root + link + src);\n                 console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n               }\n           }else{\n               console.info&&console.info(\"no src attr, skipped...\");\n               console.info&&console.info($(this));\n           }\n         });\n         data[key] = $.html();\n       }\n     }\n   });\n   ```\n\n   然后即可添加图片，参考[Typora](#Typora)\n\n   \n\n7. 删除文章\n\n   删除本地对应文件，然后执行如下命令\n\n   ```\n   hexo g\n   hexo d\n   ```\n\n####  **Typora**\n\n配置如下，将图片拖拽到md文档中，即可复制到指定目录下：\n\n![image-20210923104949941](image-20210923104949941.png)\n\n在md文档中，直接使用图片名称，预览或发布后即可看到图片\n\n![image-20210923105008730](image-20210923105008730.png)\n\n\n\n\n\n\n\n\n\n\n\n**参考：**\n\nhttps://www.jianshu.com/p/390f202c5b0e\n\nhttps://zhuanlan.zhihu.com/p/155996962\n\nhttps://www.jianshu.com/p/f72aaad7b852\n\n","source":"_posts/Github-Hexo搭建笔记.md","raw":"---\ntitle: Github+Hexo搭建笔记\ndate: 2021-09-18 16:51:31\ntags: hexo\ncategories: hexo\n---\n\n#### **一. Github**\n\n1. gihub中创建仓库，仓库名为：<github昵称>.github.io\n\n   ![image-20210918165516634](image-20210918165516634.png)\n\n   >2021年8月13日之后github不在支持密码登录，使用**personal access token**替代\n   >\n   >在github的Settings -- Developer settings -- personal access token 中配置\n\n#### **二. Hexo**\n\n1. 安装hexo\n\n   ```javascript\n   npm install -g hexo\n   ```\n\n2. hexo初始化\n\n   ```javascript\n   hexo init\n   ```\n\n3. 本地运行命令\n\n   ```javascript\n   hexo s // hexo server\n   ```\n\n4. 部署到github，打开hexo文件夹中的_config.xml，文末添加deploy的对应内容，参考如下：\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/one-command-deployment\n   deploy:\n     type: git\n     repo: https://github.com/zhengcurry/zhengcurry.github.io\n     branch: master\n   ```\n\n   然后执行\n\n   ```javascript\n   npm install hexo-deployer-git --save\n   ```\n\n   部署：\n\n   ```undefined\n   hexo clean\n   \n   hexo deploy\n   ```\n\n5. 新建文章\n\n   ```\n   hexo new xxxx\n   ```\n\n6. 添加图片\n\n   ```undefined\n   npm install hexo-asset-image --save\n   ```\n\n   hexo文件夹中的_config.xml，把post_asset_folder值改为false\n\n   打开/node_modules/hexo-asset-image/index.js文件，替换如下\n\n   ```bash\n   'use strict';\n   var cheerio = require('cheerio');\n   \n   // http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string\n   function getPosition(str, m, i) {\n     return str.split(m, i).join(m).length;\n   }\n   \n   var version = String(hexo.version).split('.');\n   hexo.extend.filter.register('after_post_render', function(data){\n     var config = hexo.config;\n     if(config.post_asset_folder){\n           var link = data.permalink;\n       if(version.length > 0 && Number(version[0]) == 3)\n          var beginPos = getPosition(link, '/', 1) + 1;\n       else\n          var beginPos = getPosition(link, '/', 3) + 1;\n       // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n       var endPos = link.lastIndexOf('/') + 1;\n       link = link.substring(beginPos, endPos);\n   \n       var toprocess = ['excerpt', 'more', 'content'];\n       for(var i = 0; i < toprocess.length; i++){\n         var key = toprocess[i];\n    \n         var $ = cheerio.load(data[key], {\n           ignoreWhitespace: false,\n           xmlMode: false,\n           lowerCaseTags: false,\n           decodeEntities: false\n         });\n   \n         $('img').each(function(){\n           if ($(this).attr('src')){\n               // For windows style path, we replace '\\' to '/'.\n               var src = $(this).attr('src').replace('\\\\', '/');\n               if(!/http[s]*.*|\\/\\/.*/.test(src) &&\n                  !/^\\s*\\//.test(src)) {\n                 // For \"about\" page, the first part of \"src\" can't be removed.\n                 // In addition, to support multi-level local directory.\n                 var linkArray = link.split('/').filter(function(elem){\n                   return elem != '';\n                 });\n                 var srcArray = src.split('/').filter(function(elem){\n                   return elem != '' && elem != '.';\n                 });\n                 if(srcArray.length > 1)\n                   srcArray.shift();\n                 src = srcArray.join('/');\n                 $(this).attr('src', config.root + link + src);\n                 console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n               }\n           }else{\n               console.info&&console.info(\"no src attr, skipped...\");\n               console.info&&console.info($(this));\n           }\n         });\n         data[key] = $.html();\n       }\n     }\n   });\n   ```\n\n   然后即可添加图片，参考[Typora](#Typora)\n\n   \n\n7. 删除文章\n\n   删除本地对应文件，然后执行如下命令\n\n   ```\n   hexo g\n   hexo d\n   ```\n\n####  **Typora**\n\n配置如下，将图片拖拽到md文档中，即可复制到指定目录下：\n\n![image-20210923104949941](image-20210923104949941.png)\n\n在md文档中，直接使用图片名称，预览或发布后即可看到图片\n\n![image-20210923105008730](image-20210923105008730.png)\n\n\n\n\n\n\n\n\n\n\n\n**参考：**\n\nhttps://www.jianshu.com/p/390f202c5b0e\n\nhttps://zhuanlan.zhihu.com/p/155996962\n\nhttps://www.jianshu.com/p/f72aaad7b852\n\n","slug":"Github-Hexo搭建笔记","published":1,"updated":"2021-10-08T08:41:46.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep3000j7wgsaz66cf80","content":"<h4 id=\"一-Github\"><a href=\"#一-Github\" class=\"headerlink\" title=\"一. Github\"></a><strong>一. Github</strong></h4><ol>\n<li><p>gihub中创建仓库，仓库名为：&lt;github昵称&gt;.github.io</p>\n<p><img src=\"/2021/09/18/Github-Hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210918165516634.png\" alt=\"image-20210918165516634\"></p>\n<blockquote>\n<p>2021年8月13日之后github不在支持密码登录，使用<strong>personal access token</strong>替代</p>\n<p>在github的Settings – Developer settings – personal access token 中配置</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"二-Hexo\"><a href=\"#二-Hexo\" class=\"headerlink\" title=\"二. Hexo\"></a><strong>二. Hexo</strong></h4><ol>\n<li><p>安装hexo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure></li>\n<li><p>hexo初始化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></li>\n<li><p>本地运行命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s <span class=\"comment\">// hexo server</span></span><br></pre></td></tr></table></figure></li>\n<li><p>部署到github，打开hexo文件夹中的_config.xml，文末添加deploy的对应内容，参考如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/zhengcurry/zhengcurry.github.io</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>然后执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>部署：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></li>\n<li><p>新建文章</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new xxxx</span><br></pre></td></tr></table></figure></li>\n<li><p>添加图片</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n\n<p>hexo文件夹中的_config.xml，把post_asset_folder值改为false</p>\n<p>打开/node_modules/hexo-asset-image/index.js文件，替换如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\">var cheerio = require(<span class=\"string\">&#x27;cheerio&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class=\"line\"><span class=\"keyword\">function</span> getPosition(str, m, i) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> str.split(m, i).join(m).length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var version = String(hexo.version).split(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;after_post_render&#x27;</span>, <span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">  var config = hexo.config;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(config.post_asset_folder)&#123;</span><br><span class=\"line\">        var link = data.permalink;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class=\"line\">       var beginPos = getPosition(link, <span class=\"string\">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">       var beginPos = getPosition(link, <span class=\"string\">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class=\"line\">    // In hexo 3.1.1, the permalink of <span class=\"string\">&quot;about&quot;</span> page is like <span class=\"string\">&quot;.../about/index.html&quot;</span>.</span><br><span class=\"line\">    var endPos = link.lastIndexOf(<span class=\"string\">&#x27;/&#x27;</span>) + 1;</span><br><span class=\"line\">    link = link.substring(beginPos, endPos);</span><br><span class=\"line\"></span><br><span class=\"line\">    var toprocess = [<span class=\"string\">&#x27;excerpt&#x27;</span>, <span class=\"string\">&#x27;more&#x27;</span>, <span class=\"string\">&#x27;content&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class=\"line\">      var key = toprocess[i];</span><br><span class=\"line\"> </span><br><span class=\"line\">      var $ = cheerio.load(data[key], &#123;</span><br><span class=\"line\">        ignoreWhitespace: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        xmlMode: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        lowerCaseTags: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        decodeEntities: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      $(<span class=\"string\">&#x27;img&#x27;</span>).each(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($(this).attr(<span class=\"string\">&#x27;src&#x27;</span>))&#123;</span><br><span class=\"line\">            // For windows style path, we replace <span class=\"string\">&#x27;\\&#x27;</span> to <span class=\"string\">&#x27;/&#x27;</span>.</span><br><span class=\"line\">            var src = $(this).attr(<span class=\"string\">&#x27;src&#x27;</span>).replace(<span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!/http[s]*.*|\\/\\/.*/.<span class=\"built_in\">test</span>(src) &amp;&amp;</span><br><span class=\"line\">               !/^\\s*\\//.<span class=\"built_in\">test</span>(src)) &#123;</span><br><span class=\"line\">              // For <span class=\"string\">&quot;about&quot;</span> page, the first part of <span class=\"string\">&quot;src&quot;</span> can<span class=\"string\">&#x27;t be removed.</span></span><br><span class=\"line\"><span class=\"string\">              // In addition, to support multi-level local directory.</span></span><br><span class=\"line\"><span class=\"string\">              var linkArray = link.split(&#x27;</span>/<span class=\"string\">&#x27;).filter(function(elem)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                return elem != &#x27;</span><span class=\"string\">&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">              &#125;);</span></span><br><span class=\"line\"><span class=\"string\">              var srcArray = src.split(&#x27;</span>/<span class=\"string\">&#x27;).filter(function(elem)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                return elem != &#x27;</span><span class=\"string\">&#x27; &amp;&amp; elem != &#x27;</span>.<span class=\"string\">&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">              &#125;);</span></span><br><span class=\"line\"><span class=\"string\">              if(srcArray.length &gt; 1)</span></span><br><span class=\"line\"><span class=\"string\">                srcArray.shift();</span></span><br><span class=\"line\"><span class=\"string\">              src = srcArray.join(&#x27;</span>/<span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">              $(this).attr(&#x27;</span>src<span class=\"string\">&#x27;, config.root + link + src);</span></span><br><span class=\"line\"><span class=\"string\">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class=\"line\"><span class=\"string\">            console.info&amp;&amp;console.info($(this));</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;);</span></span><br><span class=\"line\"><span class=\"string\">      data[key] = $.html();</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<p>然后即可添加图片，参考<a href=\"#Typora\">Typora</a></p>\n</li>\n<li><p>删除文章</p>\n<p>删除本地对应文件，然后执行如下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a><strong>Typora</strong></h4><p>配置如下，将图片拖拽到md文档中，即可复制到指定目录下：</p>\n<p><img src=\"/2021/09/18/Github-Hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210923104949941.png\" alt=\"image-20210923104949941\"></p>\n<p>在md文档中，直接使用图片名称，预览或发布后即可看到图片</p>\n<p><img src=\"/2021/09/18/Github-Hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210923105008730.png\" alt=\"image-20210923105008730\"></p>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://www.jianshu.com/p/390f202c5b0e\">https://www.jianshu.com/p/390f202c5b0e</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/155996962\">https://zhuanlan.zhihu.com/p/155996962</a></p>\n<p><a href=\"https://www.jianshu.com/p/f72aaad7b852\">https://www.jianshu.com/p/f72aaad7b852</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一-Github\"><a href=\"#一-Github\" class=\"headerlink\" title=\"一. Github\"></a><strong>一. Github</strong></h4><ol>\n<li><p>gihub中创建仓库，仓库名为：&lt;github昵称&gt;.github.io</p>\n<p><img src=\"/2021/09/18/Github-Hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210918165516634.png\" alt=\"image-20210918165516634\"></p>\n<blockquote>\n<p>2021年8月13日之后github不在支持密码登录，使用<strong>personal access token</strong>替代</p>\n<p>在github的Settings – Developer settings – personal access token 中配置</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"二-Hexo\"><a href=\"#二-Hexo\" class=\"headerlink\" title=\"二. Hexo\"></a><strong>二. Hexo</strong></h4><ol>\n<li><p>安装hexo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure></li>\n<li><p>hexo初始化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></li>\n<li><p>本地运行命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s <span class=\"comment\">// hexo server</span></span><br></pre></td></tr></table></figure></li>\n<li><p>部署到github，打开hexo文件夹中的_config.xml，文末添加deploy的对应内容，参考如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/zhengcurry/zhengcurry.github.io</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>然后执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>部署：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></li>\n<li><p>新建文章</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new xxxx</span><br></pre></td></tr></table></figure></li>\n<li><p>添加图片</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n\n<p>hexo文件夹中的_config.xml，把post_asset_folder值改为false</p>\n<p>打开/node_modules/hexo-asset-image/index.js文件，替换如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\">var cheerio = require(<span class=\"string\">&#x27;cheerio&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class=\"line\"><span class=\"keyword\">function</span> getPosition(str, m, i) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> str.split(m, i).join(m).length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var version = String(hexo.version).split(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;after_post_render&#x27;</span>, <span class=\"keyword\">function</span>(data)&#123;</span><br><span class=\"line\">  var config = hexo.config;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(config.post_asset_folder)&#123;</span><br><span class=\"line\">        var link = data.permalink;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class=\"line\">       var beginPos = getPosition(link, <span class=\"string\">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">       var beginPos = getPosition(link, <span class=\"string\">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class=\"line\">    // In hexo 3.1.1, the permalink of <span class=\"string\">&quot;about&quot;</span> page is like <span class=\"string\">&quot;.../about/index.html&quot;</span>.</span><br><span class=\"line\">    var endPos = link.lastIndexOf(<span class=\"string\">&#x27;/&#x27;</span>) + 1;</span><br><span class=\"line\">    link = link.substring(beginPos, endPos);</span><br><span class=\"line\"></span><br><span class=\"line\">    var toprocess = [<span class=\"string\">&#x27;excerpt&#x27;</span>, <span class=\"string\">&#x27;more&#x27;</span>, <span class=\"string\">&#x27;content&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class=\"line\">      var key = toprocess[i];</span><br><span class=\"line\"> </span><br><span class=\"line\">      var $ = cheerio.load(data[key], &#123;</span><br><span class=\"line\">        ignoreWhitespace: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        xmlMode: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        lowerCaseTags: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        decodeEntities: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      $(<span class=\"string\">&#x27;img&#x27;</span>).each(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($(this).attr(<span class=\"string\">&#x27;src&#x27;</span>))&#123;</span><br><span class=\"line\">            // For windows style path, we replace <span class=\"string\">&#x27;\\&#x27;</span> to <span class=\"string\">&#x27;/&#x27;</span>.</span><br><span class=\"line\">            var src = $(this).attr(<span class=\"string\">&#x27;src&#x27;</span>).replace(<span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!/http[s]*.*|\\/\\/.*/.<span class=\"built_in\">test</span>(src) &amp;&amp;</span><br><span class=\"line\">               !/^\\s*\\//.<span class=\"built_in\">test</span>(src)) &#123;</span><br><span class=\"line\">              // For <span class=\"string\">&quot;about&quot;</span> page, the first part of <span class=\"string\">&quot;src&quot;</span> can<span class=\"string\">&#x27;t be removed.</span></span><br><span class=\"line\"><span class=\"string\">              // In addition, to support multi-level local directory.</span></span><br><span class=\"line\"><span class=\"string\">              var linkArray = link.split(&#x27;</span>/<span class=\"string\">&#x27;).filter(function(elem)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                return elem != &#x27;</span><span class=\"string\">&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">              &#125;);</span></span><br><span class=\"line\"><span class=\"string\">              var srcArray = src.split(&#x27;</span>/<span class=\"string\">&#x27;).filter(function(elem)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                return elem != &#x27;</span><span class=\"string\">&#x27; &amp;&amp; elem != &#x27;</span>.<span class=\"string\">&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">              &#125;);</span></span><br><span class=\"line\"><span class=\"string\">              if(srcArray.length &gt; 1)</span></span><br><span class=\"line\"><span class=\"string\">                srcArray.shift();</span></span><br><span class=\"line\"><span class=\"string\">              src = srcArray.join(&#x27;</span>/<span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">              $(this).attr(&#x27;</span>src<span class=\"string\">&#x27;, config.root + link + src);</span></span><br><span class=\"line\"><span class=\"string\">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class=\"line\"><span class=\"string\">            console.info&amp;&amp;console.info($(this));</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;);</span></span><br><span class=\"line\"><span class=\"string\">      data[key] = $.html();</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<p>然后即可添加图片，参考<a href=\"#Typora\">Typora</a></p>\n</li>\n<li><p>删除文章</p>\n<p>删除本地对应文件，然后执行如下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a><strong>Typora</strong></h4><p>配置如下，将图片拖拽到md文档中，即可复制到指定目录下：</p>\n<p><img src=\"/2021/09/18/Github-Hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210923104949941.png\" alt=\"image-20210923104949941\"></p>\n<p>在md文档中，直接使用图片名称，预览或发布后即可看到图片</p>\n<p><img src=\"/2021/09/18/Github-Hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/image-20210923105008730.png\" alt=\"image-20210923105008730\"></p>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://www.jianshu.com/p/390f202c5b0e\">https://www.jianshu.com/p/390f202c5b0e</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/155996962\">https://zhuanlan.zhihu.com/p/155996962</a></p>\n<p><a href=\"https://www.jianshu.com/p/f72aaad7b852\">https://www.jianshu.com/p/f72aaad7b852</a></p>\n"},{"title":"Java常见的数据结构","date":"2021-10-22T02:19:36.000Z","_content":"\n#### **堆**\n\n#### **栈**\n#### **队列**\n#### **数组**\n#### **链表**\n#### **二叉树**\n#### **红黑树**\n\n\nhttps://www.jianshu.com/p/8e54797ec3e0\nhttps://zhuanlan.zhihu.com/p/63138829","source":"_posts/Java常见的数据结构.md","raw":"title: Java常见的数据结构\ndate: 2021-10-22 10:19:36\ntags: Android\ncategories: Android\n\n------\n\n#### **堆**\n\n#### **栈**\n#### **队列**\n#### **数组**\n#### **链表**\n#### **二叉树**\n#### **红黑树**\n\n\nhttps://www.jianshu.com/p/8e54797ec3e0\nhttps://zhuanlan.zhihu.com/p/63138829","slug":"Java常见的数据结构","published":1,"updated":"2021-10-22T07:36:42.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep4000k7wgs0i3tdwdw","content":"<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a><strong>堆</strong></h4><h4 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a><strong>栈</strong></h4><h4 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a><strong>队列</strong></h4><h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a><strong>数组</strong></h4><h4 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a><strong>链表</strong></h4><h4 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a><strong>二叉树</strong></h4><h4 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a><strong>红黑树</strong></h4><p><a href=\"https://www.jianshu.com/p/8e54797ec3e0\">https://www.jianshu.com/p/8e54797ec3e0</a><br><a href=\"https://zhuanlan.zhihu.com/p/63138829\">https://zhuanlan.zhihu.com/p/63138829</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a><strong>堆</strong></h4><h4 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a><strong>栈</strong></h4><h4 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a><strong>队列</strong></h4><h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a><strong>数组</strong></h4><h4 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a><strong>链表</strong></h4><h4 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a><strong>二叉树</strong></h4><h4 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a><strong>红黑树</strong></h4><p><a href=\"https://www.jianshu.com/p/8e54797ec3e0\">https://www.jianshu.com/p/8e54797ec3e0</a><br><a href=\"https://zhuanlan.zhihu.com/p/63138829\">https://zhuanlan.zhihu.com/p/63138829</a></p>\n"},{"title":"LiveData","date":"2021-10-25T05:40:08.000Z","_content":"\n**LiveData源码的注释翻译如下：**\n\n> LiveData 是一个可以在给定生命周期内观察到的数据持有者类。 这意味着Observer可以与LifecycleOwner成对添加，并且仅当配对的 LifecycleOwner 处于活动状态时，才会通知此观察者有关包装数据的修改。 如果它的状态是Lifecycle.State.STARTED或Lifecycle.State.RESUMED ，LifecycleOwner 被认为是活动的。 \n>\n> 通过observeForever(Observer)添加的observeForever(Observer)被视为始终处于活动状态，因此将始终收到有关修改的通知。 对于这些观察者，您应该手动调用removeObserver(Observer) 。\n> 如果相应的 Lifecycle 移动到Lifecycle.State.DESTROYED状态，则会自动删除添加了 Lifecycle 的观察者。 这对于活动和片段特别有用，它们可以安全地观察 LiveData 而不必担心泄漏：它们在被销毁时会立即取消订阅。\n> 此外，LiveData 有onActive()和onInactive()方法，可以在活动Observer的数量在 0 和 1 之间变化时得到通知。这允许 LiveData 在没有任何 Observer 正在积极观察时释放任何大量资源。\n> 此类旨在保存ViewModel各个数据字段，但也可用于以解耦方式在应用程序中的不同模块之间共享数据\n\n由此官方已经给出了LiveData的用途和优点；\n\n\n\n#### \n\n```java\npublic abstract class LiveData<T> {\n    ...\n    \n    /**\n     * 这里是postValue()开启的线程用于主线程设置数据\n     */\n    private final Runnable mPostValueRunnable = new Runnable() {\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        public void run() {\n            Object newValue;\n            synchronized (mDataLock) {\n                newValue = mPendingData;\n                mPendingData = NOT_SET;\n            }\n            setValue((T) newValue);\n        }\n    };\n    \n    public LiveData(T value) {\n        mData = value;\n        mVersion = START_VERSION + 1;\n    }\n\n    public LiveData() {\n        mData = NOT_SET;\n        mVersion = START_VERSION;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private void considerNotify(ObserverWrapper observer) {\n        if (!observer.mActive) {\n            return;\n        }\n        // Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.\n        //\n        // we still first check observer.active to keep it as the entrance for events. So even if\n        // the observer moved to an active state, if we've not received that event, we better not\n        // notify for a more predictable notification order.\n        if (!observer.shouldBeActive()) {\n            observer.activeStateChanged(false);\n            return;\n        }\n        if (observer.mLastVersion >= mVersion) {\n            return;\n        }\n        observer.mLastVersion = mVersion;\n        observer.mObserver.onChanged((T) mData);\n    }\n\n    @SuppressWarnings(\"WeakerAccess\") /* synthetic access */\n    void dispatchingValue(@Nullable ObserverWrapper initiator) {\n        if (mDispatchingValue) {\n            mDispatchInvalidated = true;\n            return;\n        }\n        mDispatchingValue = true;\n        do {\n            mDispatchInvalidated = false;\n            if (initiator != null) {\n                considerNotify(initiator);\n                initiator = null;\n            } else {\n                for (Iterator<Map.Entry<Observer<? super T>, ObserverWrapper>> iterator =\n                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\n                    considerNotify(iterator.next().getValue());\n                    if (mDispatchInvalidated) {\n                        break;\n                    }\n                }\n            }\n        } while (mDispatchInvalidated);\n        mDispatchingValue = false;\n    }\n\n    /**\n     * 在给定所有者的生命周期内将给定观察者添加到观察者列表中。 事件在主线程上调度。 如果 LiveData 已经有数据集，它将被传递给观察者。\n     * 如果所有者处于Lifecycle.State.STARTED或Lifecycle.State.RESUMED状态（活动），观察者将仅接收事件。\n     * 如果所有者移动到Lifecycle.State.DESTROYED状态，观察者将被自动移除。\n     * 当owner不活动时数据发生变化时，它将不会收到任何更新。 如果它再次变为活动状态，它将自动接收最后可用的数据。\n     * 只要给定的 LifecycleOwner 没有被销毁，LiveData 就会保持对观察者和所有者的强引用。 当它被销毁时，LiveData 删除对观察者和所有者的引用。\n     * 如果给定的所有者已经处于Lifecycle.State.DESTROYED状态，LiveData 会忽略调用。\n     * 如果给定的所有者、观察者元组已经在列表中，则忽略该调用。 如果观察者已经与另一个所有者在列表中，则 LiveData 会抛出IllegalArgumentException。\n     */\n    @MainThread\n    public void observe(@NonNull LifecycleOwner owner, @NonNull Observer<? super T> observer) {\n        assertMainThread(\"observe\");\n        if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n            // ignore\n            return;\n        }\n        LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing != null && !existing.isAttachedTo(owner)) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        owner.getLifecycle().addObserver(wrapper);\n    }\n\n    /**\n     * Adds the given observer to the observers list. This call is similar to\n     * {@link LiveData#observe(LifecycleOwner, Observer)} with a LifecycleOwner, which\n     * is always active. This means that the given observer will receive all events and will never\n     * be automatically removed. You should manually call {@link #removeObserver(Observer)} to stop\n     * observing this LiveData.\n     * While LiveData has one of such observers, it will be considered\n     * as active.\n     * <p>\n     * If the observer was already added with an owner to this LiveData, LiveData throws an\n     * {@link IllegalArgumentException}.\n     *\n     * @param observer The observer that will receive the events\n     */\n    @MainThread\n    public void observeForever(@NonNull Observer<? super T> observer) {\n        assertMainThread(\"observeForever\");\n        AlwaysActiveObserver wrapper = new AlwaysActiveObserver(observer);\n        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing instanceof LiveData.LifecycleBoundObserver) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        wrapper.activeStateChanged(true);\n    }\n\n    /**\n     * Removes the given observer from the observers list.\n     *\n     * @param observer The Observer to receive events.\n     */\n    @MainThread\n    public void removeObserver(@NonNull final Observer<? super T> observer) {\n        assertMainThread(\"removeObserver\");\n        ObserverWrapper removed = mObservers.remove(observer);\n        if (removed == null) {\n            return;\n        }\n        removed.detachObserver();\n        removed.activeStateChanged(false);\n    }\n\n    /**\n     * Removes all observers that are tied to the given {@link LifecycleOwner}.\n     *\n     * @param owner The {@code LifecycleOwner} scope for the observers to be removed.\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    @MainThread\n    public void removeObservers(@NonNull final LifecycleOwner owner) {\n        assertMainThread(\"removeObservers\");\n        for (Map.Entry<Observer<? super T>, ObserverWrapper> entry : mObservers) {\n            if (entry.getValue().isAttachedTo(owner)) {\n                removeObserver(entry.getKey());\n            }\n        }\n    }\n\n    /**\n     * Posts a task to a main thread to set the given value. So if you have a following code\n     * executed in the main thread:\n     * <pre class=\"prettyprint\">\n     * liveData.postValue(\"a\");\n     * liveData.setValue(\"b\");\n     * </pre>\n     * The value \"b\" would be set at first and later the main thread would override it with\n     * the value \"a\".\n     * <p>\n     * If you called this method multiple times before a main thread executed a posted task, only\n     * the last value would be dispatched.\n     *\n     * @param value The new value\n     */\n    protected void postValue(T value) {\n        boolean postTask;\n        synchronized (mDataLock) {\n            postTask = mPendingData == NOT_SET;\n            mPendingData = value;\n        }\n        if (!postTask) {\n            return;\n        }\n        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n    }\n\n    /**\n     * Sets the value. If there are active observers, the value will be dispatched to them.\n     * <p>\n     * This method must be called from the main thread. If you need set a value from a background\n     * thread, you can use {@link #postValue(Object)}\n     *\n     * @param value The new value\n     */\n    @MainThread\n    protected void setValue(T value) {\n        assertMainThread(\"setValue\");\n        mVersion++;\n        mData = value;\n        dispatchingValue(null);\n    }\n\n    /**\n     * Returns the current value.\n     * Note that calling this method on a background thread does not guarantee that the latest\n     * value set will be received.\n     *\n     * @return the current value\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Nullable\n    public T getValue() {\n        Object data = mData;\n        if (data != NOT_SET) {\n            return (T) data;\n        }\n        return null;\n    }\n\n    int getVersion() {\n        return mVersion;\n    }\n\n    /**\n     * Called when the number of active observers change from 0 to 1.\n     * <p>\n     * This callback can be used to know that this LiveData is being used thus should be kept\n     * up to date.\n     */\n    protected void onActive() {\n\n    }\n\n    /**\n     * Called when the number of active observers change from 1 to 0.\n     * <p>\n     * This does not mean that there are no observers left, there may still be observers but their\n     * lifecycle states aren't {@link Lifecycle.State#STARTED} or {@link Lifecycle.State#RESUMED}\n     * (like an Activity in the back stack).\n     * <p>\n     * You can check if there are observers via {@link #hasObservers()}.\n     */\n    protected void onInactive() {\n\n    }\n\n    /**\n     * Returns true if this LiveData has observers.\n     *\n     * @return true if this LiveData has observers\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public boolean hasObservers() {\n        return mObservers.size() > 0;\n    }\n\n    /**\n     * Returns true if this LiveData has active observers.\n     *\n     * @return true if this LiveData has active observers\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public boolean hasActiveObservers() {\n        return mActiveCount > 0;\n    }\n\n    @MainThread\n    void changeActiveCounter(int change) {\n        int previousActiveCount = mActiveCount;\n        mActiveCount += change;\n        if (mChangingActiveState) {\n            return;\n        }\n        mChangingActiveState = true;\n        try {\n            while (previousActiveCount != mActiveCount) {\n                boolean needToCallActive = previousActiveCount == 0 && mActiveCount > 0;\n                boolean needToCallInactive = previousActiveCount > 0 && mActiveCount == 0;\n                previousActiveCount = mActiveCount;\n                if (needToCallActive) {\n                    onActive();\n                } else if (needToCallInactive) {\n                    onInactive();\n                }\n            }\n        } finally {\n            mChangingActiveState = false;\n        }\n    }\n\n    class LifecycleBoundObserver extends ObserverWrapper implements LifecycleEventObserver {\n        @NonNull\n        final LifecycleOwner mOwner;\n\n        LifecycleBoundObserver(@NonNull LifecycleOwner owner, Observer<? super T> observer) {\n            super(observer);\n            mOwner = owner;\n        }\n\n        @Override\n        boolean shouldBeActive() {\n            return mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);\n        }\n\n        @Override\n        public void onStateChanged(@NonNull LifecycleOwner source,\n                @NonNull Lifecycle.Event event) {\n            Lifecycle.State currentState = mOwner.getLifecycle().getCurrentState();\n            if (currentState == DESTROYED) {\n                removeObserver(mObserver);\n                return;\n            }\n            Lifecycle.State prevState = null;\n            while (prevState != currentState) {\n                prevState = currentState;\n                activeStateChanged(shouldBeActive());\n                currentState = mOwner.getLifecycle().getCurrentState();\n            }\n        }\n\n        @Override\n        boolean isAttachedTo(LifecycleOwner owner) {\n            return mOwner == owner;\n        }\n\n        @Override\n        void detachObserver() {\n            mOwner.getLifecycle().removeObserver(this);\n        }\n    }\n\n    private abstract class ObserverWrapper {\n        final Observer<? super T> mObserver;\n        boolean mActive;\n        int mLastVersion = START_VERSION;\n\n        ObserverWrapper(Observer<? super T> observer) {\n            mObserver = observer;\n        }\n\n        abstract boolean shouldBeActive();\n\n        boolean isAttachedTo(LifecycleOwner owner) {\n            return false;\n        }\n\n        void detachObserver() {\n        }\n\n        void activeStateChanged(boolean newActive) {\n            if (newActive == mActive) {\n                return;\n            }\n            // immediately set active state, so we'd never dispatch anything to inactive\n            // owner\n            mActive = newActive;\n            changeActiveCounter(mActive ? 1 : -1);\n            if (mActive) {\n                dispatchingValue(this);\n            }\n        }\n    }\n\n    private class AlwaysActiveObserver extends ObserverWrapper {\n\n        AlwaysActiveObserver(Observer<? super T> observer) {\n            super(observer);\n        }\n\n        @Override\n        boolean shouldBeActive() {\n            return true;\n        }\n    }\n\n    static void assertMainThread(String methodName) {\n        if (!ArchTaskExecutor.getInstance().isMainThread()) {\n            throw new IllegalStateException(\"Cannot invoke \" + methodName + \" on a background\"\n                    + \" thread\");\n        }\n    }\n}\n\n```\n\n\n\n涉及到Lifecycle，LifecycleOwner，LifecycleBoundObserver，ObserverWrapper，LifecycleEventObserver\n\n感知生命周期，是因为observe（）方法传入了LifecycleOwner，ComponentActivity实现了此接口，获取到了Lifecycle\n\n#### **总结**\n\n\n\n\n\npost是怎样执行的？\n\n开启了一个主线程，由此可以得知设置livedata的值只能在主线程中。\n\n\n\n\n\n\n\n\n\n\n\n何为粘性事件？\n即发射的事件如果早于注册，那么注册之后依然可以接收到的事件称为粘性事件\n\n“数据倒灌”一词出自[KunMinX](https://links.jianshu.com/go?to=https%3A%2F%2Fxiaozhuanlan.com%2Fu%2Fkunminx)的Blog[**重学安卓：LiveData 数据倒灌 背景缘由全貌 独家解析**](https://links.jianshu.com/go?to=https%3A%2F%2Fxiaozhuanlan.com%2Ftopic%2F6719328450),即在setValue后,observe对此次set的value值会进行多次消费。比如进行第二次observe的时候获取到的数据是第一次的旧数据。这样会带来不可预期的后果。\n\n\n\nhttps://www.jianshu.com/p/e08287ec62cd\n\nhttps://mp.weixin.qq.com/s/o61NDIptP94X4HspKwiR2w\n\nhttps://www.jianshu.com/p/d0244c4c7cc9\n","source":"_posts/LiveData.md","raw":"---\ntitle: LiveData\ndate: 2021-10-25 13:40:08\ntags: Android\ncategories: Android\n\n---\n\n**LiveData源码的注释翻译如下：**\n\n> LiveData 是一个可以在给定生命周期内观察到的数据持有者类。 这意味着Observer可以与LifecycleOwner成对添加，并且仅当配对的 LifecycleOwner 处于活动状态时，才会通知此观察者有关包装数据的修改。 如果它的状态是Lifecycle.State.STARTED或Lifecycle.State.RESUMED ，LifecycleOwner 被认为是活动的。 \n>\n> 通过observeForever(Observer)添加的observeForever(Observer)被视为始终处于活动状态，因此将始终收到有关修改的通知。 对于这些观察者，您应该手动调用removeObserver(Observer) 。\n> 如果相应的 Lifecycle 移动到Lifecycle.State.DESTROYED状态，则会自动删除添加了 Lifecycle 的观察者。 这对于活动和片段特别有用，它们可以安全地观察 LiveData 而不必担心泄漏：它们在被销毁时会立即取消订阅。\n> 此外，LiveData 有onActive()和onInactive()方法，可以在活动Observer的数量在 0 和 1 之间变化时得到通知。这允许 LiveData 在没有任何 Observer 正在积极观察时释放任何大量资源。\n> 此类旨在保存ViewModel各个数据字段，但也可用于以解耦方式在应用程序中的不同模块之间共享数据\n\n由此官方已经给出了LiveData的用途和优点；\n\n\n\n#### \n\n```java\npublic abstract class LiveData<T> {\n    ...\n    \n    /**\n     * 这里是postValue()开启的线程用于主线程设置数据\n     */\n    private final Runnable mPostValueRunnable = new Runnable() {\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        public void run() {\n            Object newValue;\n            synchronized (mDataLock) {\n                newValue = mPendingData;\n                mPendingData = NOT_SET;\n            }\n            setValue((T) newValue);\n        }\n    };\n    \n    public LiveData(T value) {\n        mData = value;\n        mVersion = START_VERSION + 1;\n    }\n\n    public LiveData() {\n        mData = NOT_SET;\n        mVersion = START_VERSION;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private void considerNotify(ObserverWrapper observer) {\n        if (!observer.mActive) {\n            return;\n        }\n        // Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.\n        //\n        // we still first check observer.active to keep it as the entrance for events. So even if\n        // the observer moved to an active state, if we've not received that event, we better not\n        // notify for a more predictable notification order.\n        if (!observer.shouldBeActive()) {\n            observer.activeStateChanged(false);\n            return;\n        }\n        if (observer.mLastVersion >= mVersion) {\n            return;\n        }\n        observer.mLastVersion = mVersion;\n        observer.mObserver.onChanged((T) mData);\n    }\n\n    @SuppressWarnings(\"WeakerAccess\") /* synthetic access */\n    void dispatchingValue(@Nullable ObserverWrapper initiator) {\n        if (mDispatchingValue) {\n            mDispatchInvalidated = true;\n            return;\n        }\n        mDispatchingValue = true;\n        do {\n            mDispatchInvalidated = false;\n            if (initiator != null) {\n                considerNotify(initiator);\n                initiator = null;\n            } else {\n                for (Iterator<Map.Entry<Observer<? super T>, ObserverWrapper>> iterator =\n                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\n                    considerNotify(iterator.next().getValue());\n                    if (mDispatchInvalidated) {\n                        break;\n                    }\n                }\n            }\n        } while (mDispatchInvalidated);\n        mDispatchingValue = false;\n    }\n\n    /**\n     * 在给定所有者的生命周期内将给定观察者添加到观察者列表中。 事件在主线程上调度。 如果 LiveData 已经有数据集，它将被传递给观察者。\n     * 如果所有者处于Lifecycle.State.STARTED或Lifecycle.State.RESUMED状态（活动），观察者将仅接收事件。\n     * 如果所有者移动到Lifecycle.State.DESTROYED状态，观察者将被自动移除。\n     * 当owner不活动时数据发生变化时，它将不会收到任何更新。 如果它再次变为活动状态，它将自动接收最后可用的数据。\n     * 只要给定的 LifecycleOwner 没有被销毁，LiveData 就会保持对观察者和所有者的强引用。 当它被销毁时，LiveData 删除对观察者和所有者的引用。\n     * 如果给定的所有者已经处于Lifecycle.State.DESTROYED状态，LiveData 会忽略调用。\n     * 如果给定的所有者、观察者元组已经在列表中，则忽略该调用。 如果观察者已经与另一个所有者在列表中，则 LiveData 会抛出IllegalArgumentException。\n     */\n    @MainThread\n    public void observe(@NonNull LifecycleOwner owner, @NonNull Observer<? super T> observer) {\n        assertMainThread(\"observe\");\n        if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n            // ignore\n            return;\n        }\n        LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing != null && !existing.isAttachedTo(owner)) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        owner.getLifecycle().addObserver(wrapper);\n    }\n\n    /**\n     * Adds the given observer to the observers list. This call is similar to\n     * {@link LiveData#observe(LifecycleOwner, Observer)} with a LifecycleOwner, which\n     * is always active. This means that the given observer will receive all events and will never\n     * be automatically removed. You should manually call {@link #removeObserver(Observer)} to stop\n     * observing this LiveData.\n     * While LiveData has one of such observers, it will be considered\n     * as active.\n     * <p>\n     * If the observer was already added with an owner to this LiveData, LiveData throws an\n     * {@link IllegalArgumentException}.\n     *\n     * @param observer The observer that will receive the events\n     */\n    @MainThread\n    public void observeForever(@NonNull Observer<? super T> observer) {\n        assertMainThread(\"observeForever\");\n        AlwaysActiveObserver wrapper = new AlwaysActiveObserver(observer);\n        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing instanceof LiveData.LifecycleBoundObserver) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        wrapper.activeStateChanged(true);\n    }\n\n    /**\n     * Removes the given observer from the observers list.\n     *\n     * @param observer The Observer to receive events.\n     */\n    @MainThread\n    public void removeObserver(@NonNull final Observer<? super T> observer) {\n        assertMainThread(\"removeObserver\");\n        ObserverWrapper removed = mObservers.remove(observer);\n        if (removed == null) {\n            return;\n        }\n        removed.detachObserver();\n        removed.activeStateChanged(false);\n    }\n\n    /**\n     * Removes all observers that are tied to the given {@link LifecycleOwner}.\n     *\n     * @param owner The {@code LifecycleOwner} scope for the observers to be removed.\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    @MainThread\n    public void removeObservers(@NonNull final LifecycleOwner owner) {\n        assertMainThread(\"removeObservers\");\n        for (Map.Entry<Observer<? super T>, ObserverWrapper> entry : mObservers) {\n            if (entry.getValue().isAttachedTo(owner)) {\n                removeObserver(entry.getKey());\n            }\n        }\n    }\n\n    /**\n     * Posts a task to a main thread to set the given value. So if you have a following code\n     * executed in the main thread:\n     * <pre class=\"prettyprint\">\n     * liveData.postValue(\"a\");\n     * liveData.setValue(\"b\");\n     * </pre>\n     * The value \"b\" would be set at first and later the main thread would override it with\n     * the value \"a\".\n     * <p>\n     * If you called this method multiple times before a main thread executed a posted task, only\n     * the last value would be dispatched.\n     *\n     * @param value The new value\n     */\n    protected void postValue(T value) {\n        boolean postTask;\n        synchronized (mDataLock) {\n            postTask = mPendingData == NOT_SET;\n            mPendingData = value;\n        }\n        if (!postTask) {\n            return;\n        }\n        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n    }\n\n    /**\n     * Sets the value. If there are active observers, the value will be dispatched to them.\n     * <p>\n     * This method must be called from the main thread. If you need set a value from a background\n     * thread, you can use {@link #postValue(Object)}\n     *\n     * @param value The new value\n     */\n    @MainThread\n    protected void setValue(T value) {\n        assertMainThread(\"setValue\");\n        mVersion++;\n        mData = value;\n        dispatchingValue(null);\n    }\n\n    /**\n     * Returns the current value.\n     * Note that calling this method on a background thread does not guarantee that the latest\n     * value set will be received.\n     *\n     * @return the current value\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Nullable\n    public T getValue() {\n        Object data = mData;\n        if (data != NOT_SET) {\n            return (T) data;\n        }\n        return null;\n    }\n\n    int getVersion() {\n        return mVersion;\n    }\n\n    /**\n     * Called when the number of active observers change from 0 to 1.\n     * <p>\n     * This callback can be used to know that this LiveData is being used thus should be kept\n     * up to date.\n     */\n    protected void onActive() {\n\n    }\n\n    /**\n     * Called when the number of active observers change from 1 to 0.\n     * <p>\n     * This does not mean that there are no observers left, there may still be observers but their\n     * lifecycle states aren't {@link Lifecycle.State#STARTED} or {@link Lifecycle.State#RESUMED}\n     * (like an Activity in the back stack).\n     * <p>\n     * You can check if there are observers via {@link #hasObservers()}.\n     */\n    protected void onInactive() {\n\n    }\n\n    /**\n     * Returns true if this LiveData has observers.\n     *\n     * @return true if this LiveData has observers\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public boolean hasObservers() {\n        return mObservers.size() > 0;\n    }\n\n    /**\n     * Returns true if this LiveData has active observers.\n     *\n     * @return true if this LiveData has active observers\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public boolean hasActiveObservers() {\n        return mActiveCount > 0;\n    }\n\n    @MainThread\n    void changeActiveCounter(int change) {\n        int previousActiveCount = mActiveCount;\n        mActiveCount += change;\n        if (mChangingActiveState) {\n            return;\n        }\n        mChangingActiveState = true;\n        try {\n            while (previousActiveCount != mActiveCount) {\n                boolean needToCallActive = previousActiveCount == 0 && mActiveCount > 0;\n                boolean needToCallInactive = previousActiveCount > 0 && mActiveCount == 0;\n                previousActiveCount = mActiveCount;\n                if (needToCallActive) {\n                    onActive();\n                } else if (needToCallInactive) {\n                    onInactive();\n                }\n            }\n        } finally {\n            mChangingActiveState = false;\n        }\n    }\n\n    class LifecycleBoundObserver extends ObserverWrapper implements LifecycleEventObserver {\n        @NonNull\n        final LifecycleOwner mOwner;\n\n        LifecycleBoundObserver(@NonNull LifecycleOwner owner, Observer<? super T> observer) {\n            super(observer);\n            mOwner = owner;\n        }\n\n        @Override\n        boolean shouldBeActive() {\n            return mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);\n        }\n\n        @Override\n        public void onStateChanged(@NonNull LifecycleOwner source,\n                @NonNull Lifecycle.Event event) {\n            Lifecycle.State currentState = mOwner.getLifecycle().getCurrentState();\n            if (currentState == DESTROYED) {\n                removeObserver(mObserver);\n                return;\n            }\n            Lifecycle.State prevState = null;\n            while (prevState != currentState) {\n                prevState = currentState;\n                activeStateChanged(shouldBeActive());\n                currentState = mOwner.getLifecycle().getCurrentState();\n            }\n        }\n\n        @Override\n        boolean isAttachedTo(LifecycleOwner owner) {\n            return mOwner == owner;\n        }\n\n        @Override\n        void detachObserver() {\n            mOwner.getLifecycle().removeObserver(this);\n        }\n    }\n\n    private abstract class ObserverWrapper {\n        final Observer<? super T> mObserver;\n        boolean mActive;\n        int mLastVersion = START_VERSION;\n\n        ObserverWrapper(Observer<? super T> observer) {\n            mObserver = observer;\n        }\n\n        abstract boolean shouldBeActive();\n\n        boolean isAttachedTo(LifecycleOwner owner) {\n            return false;\n        }\n\n        void detachObserver() {\n        }\n\n        void activeStateChanged(boolean newActive) {\n            if (newActive == mActive) {\n                return;\n            }\n            // immediately set active state, so we'd never dispatch anything to inactive\n            // owner\n            mActive = newActive;\n            changeActiveCounter(mActive ? 1 : -1);\n            if (mActive) {\n                dispatchingValue(this);\n            }\n        }\n    }\n\n    private class AlwaysActiveObserver extends ObserverWrapper {\n\n        AlwaysActiveObserver(Observer<? super T> observer) {\n            super(observer);\n        }\n\n        @Override\n        boolean shouldBeActive() {\n            return true;\n        }\n    }\n\n    static void assertMainThread(String methodName) {\n        if (!ArchTaskExecutor.getInstance().isMainThread()) {\n            throw new IllegalStateException(\"Cannot invoke \" + methodName + \" on a background\"\n                    + \" thread\");\n        }\n    }\n}\n\n```\n\n\n\n涉及到Lifecycle，LifecycleOwner，LifecycleBoundObserver，ObserverWrapper，LifecycleEventObserver\n\n感知生命周期，是因为observe（）方法传入了LifecycleOwner，ComponentActivity实现了此接口，获取到了Lifecycle\n\n#### **总结**\n\n\n\n\n\npost是怎样执行的？\n\n开启了一个主线程，由此可以得知设置livedata的值只能在主线程中。\n\n\n\n\n\n\n\n\n\n\n\n何为粘性事件？\n即发射的事件如果早于注册，那么注册之后依然可以接收到的事件称为粘性事件\n\n“数据倒灌”一词出自[KunMinX](https://links.jianshu.com/go?to=https%3A%2F%2Fxiaozhuanlan.com%2Fu%2Fkunminx)的Blog[**重学安卓：LiveData 数据倒灌 背景缘由全貌 独家解析**](https://links.jianshu.com/go?to=https%3A%2F%2Fxiaozhuanlan.com%2Ftopic%2F6719328450),即在setValue后,observe对此次set的value值会进行多次消费。比如进行第二次observe的时候获取到的数据是第一次的旧数据。这样会带来不可预期的后果。\n\n\n\nhttps://www.jianshu.com/p/e08287ec62cd\n\nhttps://mp.weixin.qq.com/s/o61NDIptP94X4HspKwiR2w\n\nhttps://www.jianshu.com/p/d0244c4c7cc9\n","slug":"LiveData","published":1,"updated":"2021-10-26T06:00:51.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep6000o7wgsgtlrcq8k","content":"<p><strong>LiveData源码的注释翻译如下：</strong></p>\n<blockquote>\n<p>LiveData 是一个可以在给定生命周期内观察到的数据持有者类。 这意味着Observer可以与LifecycleOwner成对添加，并且仅当配对的 LifecycleOwner 处于活动状态时，才会通知此观察者有关包装数据的修改。 如果它的状态是Lifecycle.State.STARTED或Lifecycle.State.RESUMED ，LifecycleOwner 被认为是活动的。 </p>\n<p>通过observeForever(Observer)添加的observeForever(Observer)被视为始终处于活动状态，因此将始终收到有关修改的通知。 对于这些观察者，您应该手动调用removeObserver(Observer) 。<br>如果相应的 Lifecycle 移动到Lifecycle.State.DESTROYED状态，则会自动删除添加了 Lifecycle 的观察者。 这对于活动和片段特别有用，它们可以安全地观察 LiveData 而不必担心泄漏：它们在被销毁时会立即取消订阅。<br>此外，LiveData 有onActive()和onInactive()方法，可以在活动Observer的数量在 0 和 1 之间变化时得到通知。这允许 LiveData 在没有任何 Observer 正在积极观察时释放任何大量资源。<br>此类旨在保存ViewModel各个数据字段，但也可用于以解耦方式在应用程序中的不同模块之间共享数据</p>\n</blockquote>\n<p>由此官方已经给出了LiveData的用途和优点；</p>\n<h4 id><a href=\"#\" class=\"headerlink\" title></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveData</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里是postValue()开启的线程用于主线程设置数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Object newValue;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">                newValue = mPendingData;</span><br><span class=\"line\">                mPendingData = NOT_SET;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            setValue((T) newValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LiveData</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        mData = value;</span><br><span class=\"line\">        mVersion = START_VERSION + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LiveData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mData = NOT_SET;</span><br><span class=\"line\">        mVersion = START_VERSION;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(ObserverWrapper observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.mActive) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Check latest state b4 dispatch. Maybe it changed state but we didn&#x27;t get the event yet.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// we still first check observer.active to keep it as the entrance for events. So even if</span></span><br><span class=\"line\">        <span class=\"comment\">// the observer moved to an active state, if we&#x27;ve not received that event, we better not</span></span><br><span class=\"line\">        <span class=\"comment\">// notify for a more predictable notification order.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.shouldBeActive()) &#123;</span><br><span class=\"line\">            observer.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.mLastVersion &gt;= mVersion) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer.mLastVersion = mVersion;</span><br><span class=\"line\">        observer.mObserver.onChanged((T) mData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class=\"comment\">/* synthetic access */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ObserverWrapper initiator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDispatchingValue) &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                considerNotify(initiator);</span><br><span class=\"line\">                initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class=\"keyword\">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class=\"line\">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                    considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在给定所有者的生命周期内将给定观察者添加到观察者列表中。 事件在主线程上调度。 如果 LiveData 已经有数据集，它将被传递给观察者。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果所有者处于Lifecycle.State.STARTED或Lifecycle.State.RESUMED状态（活动），观察者将仅接收事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果所有者移动到Lifecycle.State.DESTROYED状态，观察者将被自动移除。</span></span><br><span class=\"line\"><span class=\"comment\">     * 当owner不活动时数据发生变化时，它将不会收到任何更新。 如果它再次变为活动状态，它将自动接收最后可用的数据。</span></span><br><span class=\"line\"><span class=\"comment\">     * 只要给定的 LifecycleOwner 没有被销毁，LiveData 就会保持对观察者和所有者的强引用。 当它被销毁时，LiveData 删除对观察者和所有者的引用。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果给定的所有者已经处于Lifecycle.State.DESTROYED状态，LiveData 会忽略调用。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果给定的所有者、观察者元组已经在列表中，则忽略该调用。 如果观察者已经与另一个所有者在列表中，则 LiveData 会抛出IllegalArgumentException。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, <span class=\"meta\">@NonNull</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;observe&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ignore</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\">        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Adds the given observer to the observers list. This call is similar to</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> LiveData#observe(LifecycleOwner, Observer)&#125; with a LifecycleOwner, which</span></span><br><span class=\"line\"><span class=\"comment\">     * is always active. This means that the given observer will receive all events and will never</span></span><br><span class=\"line\"><span class=\"comment\">     * be automatically removed. You should manually call &#123;<span class=\"doctag\">@link</span> #removeObserver(Observer)&#125; to stop</span></span><br><span class=\"line\"><span class=\"comment\">     * observing this LiveData.</span></span><br><span class=\"line\"><span class=\"comment\">     * While LiveData has one of such observers, it will be considered</span></span><br><span class=\"line\"><span class=\"comment\">     * as active.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * If the observer was already added with an owner to this LiveData, LiveData throws an</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> IllegalArgumentException&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> observer The observer that will receive the events</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observeForever</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;observeForever&quot;</span>);</span><br><span class=\"line\">        AlwaysActiveObserver wrapper = <span class=\"keyword\">new</span> AlwaysActiveObserver(observer);</span><br><span class=\"line\">        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing <span class=\"keyword\">instanceof</span> LiveData.LifecycleBoundObserver) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        wrapper.activeStateChanged(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Removes the given observer from the observers list.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> observer The Observer to receive events.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;removeObserver&quot;</span>);</span><br><span class=\"line\">        ObserverWrapper removed = mObservers.remove(observer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (removed == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        removed.detachObserver();</span><br><span class=\"line\">        removed.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Removes all observers that are tied to the given &#123;<span class=\"doctag\">@link</span> LifecycleOwner&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> owner The &#123;<span class=\"doctag\">@code</span> LifecycleOwner&#125; scope for the observers to be removed.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObservers</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;removeObservers&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Observer&lt;? <span class=\"keyword\">super</span> T&gt;, ObserverWrapper&gt; entry : mObservers) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (entry.getValue().isAttachedTo(owner)) &#123;</span><br><span class=\"line\">                removeObserver(entry.getKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Posts a task to a main thread to set the given value. So if you have a following code</span></span><br><span class=\"line\"><span class=\"comment\">     * executed in the main thread:</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;pre class=&quot;prettyprint&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * liveData.postValue(&quot;a&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">     * liveData.setValue(&quot;b&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * The value &quot;b&quot; would be set at first and later the main thread would override it with</span></span><br><span class=\"line\"><span class=\"comment\">     * the value &quot;a&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * If you called this method multiple times before a main thread executed a posted task, only</span></span><br><span class=\"line\"><span class=\"comment\">     * the last value would be dispatched.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value The new value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">            postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">            mPendingData = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!postTask) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets the value. If there are active observers, the value will be dispatched to them.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This method must be called from the main thread. If you need set a value from a background</span></span><br><span class=\"line\"><span class=\"comment\">     * thread, you can use &#123;<span class=\"doctag\">@link</span> #postValue(Object)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value The new value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;setValue&quot;</span>);</span><br><span class=\"line\">        mVersion++;</span><br><span class=\"line\">        mData = value;</span><br><span class=\"line\">        dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that calling this method on a background thread does not guarantee that the latest</span></span><br><span class=\"line\"><span class=\"comment\">     * value set will be received.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the current value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object data = mData;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data != NOT_SET) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVersion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mVersion;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Called when the number of active observers change from 0 to 1.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This callback can be used to know that this LiveData is being used thus should be kept</span></span><br><span class=\"line\"><span class=\"comment\">     * up to date.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Called when the number of active observers change from 1 to 0.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This does not mean that there are no observers left, there may still be observers but their</span></span><br><span class=\"line\"><span class=\"comment\">     * lifecycle states aren&#x27;t &#123;<span class=\"doctag\">@link</span> Lifecycle.State#STARTED&#125; or &#123;<span class=\"doctag\">@link</span> Lifecycle.State#RESUMED&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * (like an Activity in the back stack).</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * You can check if there are observers via &#123;<span class=\"doctag\">@link</span> #hasObservers()&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onInactive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns true if this LiveData has observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this LiveData has observers</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mObservers.size() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns true if this LiveData has active observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this LiveData has active observers</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasActiveObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mActiveCount &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">changeActiveCounter</span><span class=\"params\">(<span class=\"keyword\">int</span> change)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> previousActiveCount = mActiveCount;</span><br><span class=\"line\">        mActiveCount += change;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mChangingActiveState) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mChangingActiveState = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (previousActiveCount != mActiveCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> needToCallActive = previousActiveCount == <span class=\"number\">0</span> &amp;&amp; mActiveCount &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> needToCallInactive = previousActiveCount &gt; <span class=\"number\">0</span> &amp;&amp; mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">                previousActiveCount = mActiveCount;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (needToCallActive) &#123;</span><br><span class=\"line\">                    onActive();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (needToCallInactive) &#123;</span><br><span class=\"line\">                    onInactive();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            mChangingActiveState = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleEventObserver</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> LifecycleOwner mOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">        LifecycleBoundObserver(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(observer);</span><br><span class=\"line\">            mOwner = owner;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner source,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">            Lifecycle.State currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentState == DESTROYED) &#123;</span><br><span class=\"line\">                removeObserver(mObserver);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Lifecycle.State prevState = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (prevState != currentState) &#123;</span><br><span class=\"line\">                prevState = currentState;</span><br><span class=\"line\">                activeStateChanged(shouldBeActive());</span><br><span class=\"line\">                currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mOwner == owner;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            mOwner.getLifecycle().removeObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverWrapper</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; mObserver;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> mActive;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mLastVersion = START_VERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">        ObserverWrapper(Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">            mObserver = observer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newActive == mActive) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// immediately set active state, so we&#x27;d never dispatch anything to inactive</span></span><br><span class=\"line\">            <span class=\"comment\">// owner</span></span><br><span class=\"line\">            mActive = newActive;</span><br><span class=\"line\">            changeActiveCounter(mActive ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mActive) &#123;</span><br><span class=\"line\">                dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlwaysActiveObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        AlwaysActiveObserver(Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">assertMainThread</span><span class=\"params\">(String methodName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ArchTaskExecutor.getInstance().isMainThread()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Cannot invoke &quot;</span> + methodName + <span class=\"string\">&quot; on a background&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; thread&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>涉及到Lifecycle，LifecycleOwner，LifecycleBoundObserver，ObserverWrapper，LifecycleEventObserver</p>\n<p>感知生命周期，是因为observe（）方法传入了LifecycleOwner，ComponentActivity实现了此接口，获取到了Lifecycle</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h4><p>post是怎样执行的？</p>\n<p>开启了一个主线程，由此可以得知设置livedata的值只能在主线程中。</p>\n<p>何为粘性事件？<br>即发射的事件如果早于注册，那么注册之后依然可以接收到的事件称为粘性事件</p>\n<p>“数据倒灌”一词出自<a href=\"https://links.jianshu.com/go?to=https://xiaozhuanlan.com/u/kunminx\">KunMinX</a>的Blog<a href=\"https://links.jianshu.com/go?to=https://xiaozhuanlan.com/topic/6719328450\"><strong>重学安卓：LiveData 数据倒灌 背景缘由全貌 独家解析</strong></a>,即在setValue后,observe对此次set的value值会进行多次消费。比如进行第二次observe的时候获取到的数据是第一次的旧数据。这样会带来不可预期的后果。</p>\n<p><a href=\"https://www.jianshu.com/p/e08287ec62cd\">https://www.jianshu.com/p/e08287ec62cd</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/o61NDIptP94X4HspKwiR2w\">https://mp.weixin.qq.com/s/o61NDIptP94X4HspKwiR2w</a></p>\n<p><a href=\"https://www.jianshu.com/p/d0244c4c7cc9\">https://www.jianshu.com/p/d0244c4c7cc9</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>LiveData源码的注释翻译如下：</strong></p>\n<blockquote>\n<p>LiveData 是一个可以在给定生命周期内观察到的数据持有者类。 这意味着Observer可以与LifecycleOwner成对添加，并且仅当配对的 LifecycleOwner 处于活动状态时，才会通知此观察者有关包装数据的修改。 如果它的状态是Lifecycle.State.STARTED或Lifecycle.State.RESUMED ，LifecycleOwner 被认为是活动的。 </p>\n<p>通过observeForever(Observer)添加的observeForever(Observer)被视为始终处于活动状态，因此将始终收到有关修改的通知。 对于这些观察者，您应该手动调用removeObserver(Observer) 。<br>如果相应的 Lifecycle 移动到Lifecycle.State.DESTROYED状态，则会自动删除添加了 Lifecycle 的观察者。 这对于活动和片段特别有用，它们可以安全地观察 LiveData 而不必担心泄漏：它们在被销毁时会立即取消订阅。<br>此外，LiveData 有onActive()和onInactive()方法，可以在活动Observer的数量在 0 和 1 之间变化时得到通知。这允许 LiveData 在没有任何 Observer 正在积极观察时释放任何大量资源。<br>此类旨在保存ViewModel各个数据字段，但也可用于以解耦方式在应用程序中的不同模块之间共享数据</p>\n</blockquote>\n<p>由此官方已经给出了LiveData的用途和优点；</p>\n<h4 id><a href=\"#\" class=\"headerlink\" title></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveData</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里是postValue()开启的线程用于主线程设置数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Object newValue;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">                newValue = mPendingData;</span><br><span class=\"line\">                mPendingData = NOT_SET;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            setValue((T) newValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LiveData</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        mData = value;</span><br><span class=\"line\">        mVersion = START_VERSION + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LiveData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mData = NOT_SET;</span><br><span class=\"line\">        mVersion = START_VERSION;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(ObserverWrapper observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.mActive) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Check latest state b4 dispatch. Maybe it changed state but we didn&#x27;t get the event yet.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// we still first check observer.active to keep it as the entrance for events. So even if</span></span><br><span class=\"line\">        <span class=\"comment\">// the observer moved to an active state, if we&#x27;ve not received that event, we better not</span></span><br><span class=\"line\">        <span class=\"comment\">// notify for a more predictable notification order.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.shouldBeActive()) &#123;</span><br><span class=\"line\">            observer.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.mLastVersion &gt;= mVersion) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer.mLastVersion = mVersion;</span><br><span class=\"line\">        observer.mObserver.onChanged((T) mData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class=\"comment\">/* synthetic access */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ObserverWrapper initiator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDispatchingValue) &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                considerNotify(initiator);</span><br><span class=\"line\">                initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class=\"keyword\">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class=\"line\">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                    considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在给定所有者的生命周期内将给定观察者添加到观察者列表中。 事件在主线程上调度。 如果 LiveData 已经有数据集，它将被传递给观察者。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果所有者处于Lifecycle.State.STARTED或Lifecycle.State.RESUMED状态（活动），观察者将仅接收事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果所有者移动到Lifecycle.State.DESTROYED状态，观察者将被自动移除。</span></span><br><span class=\"line\"><span class=\"comment\">     * 当owner不活动时数据发生变化时，它将不会收到任何更新。 如果它再次变为活动状态，它将自动接收最后可用的数据。</span></span><br><span class=\"line\"><span class=\"comment\">     * 只要给定的 LifecycleOwner 没有被销毁，LiveData 就会保持对观察者和所有者的强引用。 当它被销毁时，LiveData 删除对观察者和所有者的引用。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果给定的所有者已经处于Lifecycle.State.DESTROYED状态，LiveData 会忽略调用。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果给定的所有者、观察者元组已经在列表中，则忽略该调用。 如果观察者已经与另一个所有者在列表中，则 LiveData 会抛出IllegalArgumentException。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, <span class=\"meta\">@NonNull</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;observe&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ignore</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\">        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Adds the given observer to the observers list. This call is similar to</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> LiveData#observe(LifecycleOwner, Observer)&#125; with a LifecycleOwner, which</span></span><br><span class=\"line\"><span class=\"comment\">     * is always active. This means that the given observer will receive all events and will never</span></span><br><span class=\"line\"><span class=\"comment\">     * be automatically removed. You should manually call &#123;<span class=\"doctag\">@link</span> #removeObserver(Observer)&#125; to stop</span></span><br><span class=\"line\"><span class=\"comment\">     * observing this LiveData.</span></span><br><span class=\"line\"><span class=\"comment\">     * While LiveData has one of such observers, it will be considered</span></span><br><span class=\"line\"><span class=\"comment\">     * as active.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * If the observer was already added with an owner to this LiveData, LiveData throws an</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> IllegalArgumentException&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> observer The observer that will receive the events</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observeForever</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;observeForever&quot;</span>);</span><br><span class=\"line\">        AlwaysActiveObserver wrapper = <span class=\"keyword\">new</span> AlwaysActiveObserver(observer);</span><br><span class=\"line\">        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing <span class=\"keyword\">instanceof</span> LiveData.LifecycleBoundObserver) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        wrapper.activeStateChanged(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Removes the given observer from the observers list.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> observer The Observer to receive events.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;removeObserver&quot;</span>);</span><br><span class=\"line\">        ObserverWrapper removed = mObservers.remove(observer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (removed == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        removed.detachObserver();</span><br><span class=\"line\">        removed.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Removes all observers that are tied to the given &#123;<span class=\"doctag\">@link</span> LifecycleOwner&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> owner The &#123;<span class=\"doctag\">@code</span> LifecycleOwner&#125; scope for the observers to be removed.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObservers</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;removeObservers&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Observer&lt;? <span class=\"keyword\">super</span> T&gt;, ObserverWrapper&gt; entry : mObservers) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (entry.getValue().isAttachedTo(owner)) &#123;</span><br><span class=\"line\">                removeObserver(entry.getKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Posts a task to a main thread to set the given value. So if you have a following code</span></span><br><span class=\"line\"><span class=\"comment\">     * executed in the main thread:</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;pre class=&quot;prettyprint&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * liveData.postValue(&quot;a&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">     * liveData.setValue(&quot;b&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * The value &quot;b&quot; would be set at first and later the main thread would override it with</span></span><br><span class=\"line\"><span class=\"comment\">     * the value &quot;a&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * If you called this method multiple times before a main thread executed a posted task, only</span></span><br><span class=\"line\"><span class=\"comment\">     * the last value would be dispatched.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value The new value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">            postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">            mPendingData = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!postTask) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets the value. If there are active observers, the value will be dispatched to them.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This method must be called from the main thread. If you need set a value from a background</span></span><br><span class=\"line\"><span class=\"comment\">     * thread, you can use &#123;<span class=\"doctag\">@link</span> #postValue(Object)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value The new value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;setValue&quot;</span>);</span><br><span class=\"line\">        mVersion++;</span><br><span class=\"line\">        mData = value;</span><br><span class=\"line\">        dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that calling this method on a background thread does not guarantee that the latest</span></span><br><span class=\"line\"><span class=\"comment\">     * value set will be received.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the current value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object data = mData;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data != NOT_SET) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVersion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mVersion;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Called when the number of active observers change from 0 to 1.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This callback can be used to know that this LiveData is being used thus should be kept</span></span><br><span class=\"line\"><span class=\"comment\">     * up to date.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Called when the number of active observers change from 1 to 0.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This does not mean that there are no observers left, there may still be observers but their</span></span><br><span class=\"line\"><span class=\"comment\">     * lifecycle states aren&#x27;t &#123;<span class=\"doctag\">@link</span> Lifecycle.State#STARTED&#125; or &#123;<span class=\"doctag\">@link</span> Lifecycle.State#RESUMED&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * (like an Activity in the back stack).</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * You can check if there are observers via &#123;<span class=\"doctag\">@link</span> #hasObservers()&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onInactive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns true if this LiveData has observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this LiveData has observers</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mObservers.size() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns true if this LiveData has active observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this LiveData has active observers</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasActiveObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mActiveCount &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">changeActiveCounter</span><span class=\"params\">(<span class=\"keyword\">int</span> change)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> previousActiveCount = mActiveCount;</span><br><span class=\"line\">        mActiveCount += change;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mChangingActiveState) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mChangingActiveState = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (previousActiveCount != mActiveCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> needToCallActive = previousActiveCount == <span class=\"number\">0</span> &amp;&amp; mActiveCount &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> needToCallInactive = previousActiveCount &gt; <span class=\"number\">0</span> &amp;&amp; mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">                previousActiveCount = mActiveCount;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (needToCallActive) &#123;</span><br><span class=\"line\">                    onActive();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (needToCallInactive) &#123;</span><br><span class=\"line\">                    onInactive();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            mChangingActiveState = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleEventObserver</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> LifecycleOwner mOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">        LifecycleBoundObserver(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(observer);</span><br><span class=\"line\">            mOwner = owner;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner source,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">            Lifecycle.State currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentState == DESTROYED) &#123;</span><br><span class=\"line\">                removeObserver(mObserver);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Lifecycle.State prevState = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (prevState != currentState) &#123;</span><br><span class=\"line\">                prevState = currentState;</span><br><span class=\"line\">                activeStateChanged(shouldBeActive());</span><br><span class=\"line\">                currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mOwner == owner;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            mOwner.getLifecycle().removeObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverWrapper</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; mObserver;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> mActive;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mLastVersion = START_VERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">        ObserverWrapper(Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">            mObserver = observer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newActive == mActive) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// immediately set active state, so we&#x27;d never dispatch anything to inactive</span></span><br><span class=\"line\">            <span class=\"comment\">// owner</span></span><br><span class=\"line\">            mActive = newActive;</span><br><span class=\"line\">            changeActiveCounter(mActive ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mActive) &#123;</span><br><span class=\"line\">                dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlwaysActiveObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        AlwaysActiveObserver(Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">assertMainThread</span><span class=\"params\">(String methodName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ArchTaskExecutor.getInstance().isMainThread()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Cannot invoke &quot;</span> + methodName + <span class=\"string\">&quot; on a background&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; thread&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>涉及到Lifecycle，LifecycleOwner，LifecycleBoundObserver，ObserverWrapper，LifecycleEventObserver</p>\n<p>感知生命周期，是因为observe（）方法传入了LifecycleOwner，ComponentActivity实现了此接口，获取到了Lifecycle</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h4><p>post是怎样执行的？</p>\n<p>开启了一个主线程，由此可以得知设置livedata的值只能在主线程中。</p>\n<p>何为粘性事件？<br>即发射的事件如果早于注册，那么注册之后依然可以接收到的事件称为粘性事件</p>\n<p>“数据倒灌”一词出自<a href=\"https://links.jianshu.com/go?to=https://xiaozhuanlan.com/u/kunminx\">KunMinX</a>的Blog<a href=\"https://links.jianshu.com/go?to=https://xiaozhuanlan.com/topic/6719328450\"><strong>重学安卓：LiveData 数据倒灌 背景缘由全貌 独家解析</strong></a>,即在setValue后,observe对此次set的value值会进行多次消费。比如进行第二次observe的时候获取到的数据是第一次的旧数据。这样会带来不可预期的后果。</p>\n<p><a href=\"https://www.jianshu.com/p/e08287ec62cd\">https://www.jianshu.com/p/e08287ec62cd</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/o61NDIptP94X4HspKwiR2w\">https://mp.weixin.qq.com/s/o61NDIptP94X4HspKwiR2w</a></p>\n<p><a href=\"https://www.jianshu.com/p/d0244c4c7cc9\">https://www.jianshu.com/p/d0244c4c7cc9</a></p>\n"},{"title":"T.()->Unit","date":"2021-09-24T05:57:58.000Z","_content":"\nT.()->Unit相当于是给类T定义了一个扩展函数，该函数没有形参，没有返回值；\n\n```kotlin\ntypealias CallBack<T> = TestCallBack<T>.()->Unit\n\nfun test(callback:CallBack<T>){\n    val test = TestCallBack<T>()\n    test.callback()\n}\n```\n\n这里callback就相当于一个TestCallBack的扩展函数，所以可以test.callback()\n\n","source":"_posts/T-Unit.md","raw":"---\ntitle: T.()->Unit\ndate: 2021-09-24 13:57:58\ntags: Kotlin\ncategories: Kotlin\n---\n\nT.()->Unit相当于是给类T定义了一个扩展函数，该函数没有形参，没有返回值；\n\n```kotlin\ntypealias CallBack<T> = TestCallBack<T>.()->Unit\n\nfun test(callback:CallBack<T>){\n    val test = TestCallBack<T>()\n    test.callback()\n}\n```\n\n这里callback就相当于一个TestCallBack的扩展函数，所以可以test.callback()\n\n","slug":"T-Unit","published":1,"updated":"2021-10-08T08:41:46.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep7000q7wgsew13dyx5","content":"<p>T.()-&gt;Unit相当于是给类T定义了一个扩展函数，该函数没有形参，没有返回值；</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> CallBack&lt;T&gt; = TestCallBack&lt;T&gt;.()-&gt;<span class=\"built_in\">Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">(callback:<span class=\"type\">CallBack</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> test = TestCallBack&lt;T&gt;()</span><br><span class=\"line\">    test.callback()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里callback就相当于一个TestCallBack的扩展函数，所以可以test.callback()</p>\n","site":{"data":{}},"excerpt":"","more":"<p>T.()-&gt;Unit相当于是给类T定义了一个扩展函数，该函数没有形参，没有返回值；</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> CallBack&lt;T&gt; = TestCallBack&lt;T&gt;.()-&gt;<span class=\"built_in\">Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">(callback:<span class=\"type\">CallBack</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> test = TestCallBack&lt;T&gt;()</span><br><span class=\"line\">    test.callback()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里callback就相当于一个TestCallBack的扩展函数，所以可以test.callback()</p>\n"},{"title":"TypeError: line.matchAll is not a function","date":"2021-09-25T03:14:32.000Z","categroies":"hexo","_content":"\n执行`hexo server`，报错：\n\n![image-20210925111618240](image-20210925111618240.png)\n\n\n\n此问题是node版本较老导致的；查看node版本，是v10.15.3，因此需要进行升级；\n\n**node升级（MAC）**\n\n1. 安装node版本管理模块\n\n   ```java\n   npm -g i -n\n   //mac电脑，若无权限，需执行：\n   sudo npm -g i -n\n   ```\n\n   \n\n2. 执行升级命令\n\n   ```java\n   n stable  //安装稳定版本\n   n latest  //安装最新版本\n   n (指定版本号)  //n 14.17.6\n   ```\n\n   \n\n","source":"_posts/TypeError-line-matchAll-is-not-a-function.md","raw":"---\ntitle: 'TypeError: line.matchAll is not a function'\ndate: 2021-09-25 11:14:32\ntags: hexo\ncategroies: hexo\n---\n\n执行`hexo server`，报错：\n\n![image-20210925111618240](image-20210925111618240.png)\n\n\n\n此问题是node版本较老导致的；查看node版本，是v10.15.3，因此需要进行升级；\n\n**node升级（MAC）**\n\n1. 安装node版本管理模块\n\n   ```java\n   npm -g i -n\n   //mac电脑，若无权限，需执行：\n   sudo npm -g i -n\n   ```\n\n   \n\n2. 执行升级命令\n\n   ```java\n   n stable  //安装稳定版本\n   n latest  //安装最新版本\n   n (指定版本号)  //n 14.17.6\n   ```\n\n   \n\n","slug":"TypeError-line-matchAll-is-not-a-function","published":1,"updated":"2021-10-08T08:41:46.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iep9000v7wgsgqz8765k","content":"<p>执行<code>hexo server</code>，报错：</p>\n<p><img src=\"/2021/09/25/TypeError-line-matchAll-is-not-a-function/image-20210925111618240.png\" alt=\"image-20210925111618240\"></p>\n<p>此问题是node版本较老导致的；查看node版本，是v10.15.3，因此需要进行升级；</p>\n<p><strong>node升级（MAC）</strong></p>\n<ol>\n<li><p>安装node版本管理模块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g i -n</span><br><span class=\"line\"><span class=\"comment\">//mac电脑，若无权限，需执行：</span></span><br><span class=\"line\">sudo npm -g i -n</span><br></pre></td></tr></table></figure></li>\n<li><p>执行升级命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n stable  <span class=\"comment\">//安装稳定版本</span></span><br><span class=\"line\">n latest  <span class=\"comment\">//安装最新版本</span></span><br><span class=\"line\">n (指定版本号)  <span class=\"comment\">//n 14.17.6</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>执行<code>hexo server</code>，报错：</p>\n<p><img src=\"/2021/09/25/TypeError-line-matchAll-is-not-a-function/image-20210925111618240.png\" alt=\"image-20210925111618240\"></p>\n<p>此问题是node版本较老导致的；查看node版本，是v10.15.3，因此需要进行升级；</p>\n<p><strong>node升级（MAC）</strong></p>\n<ol>\n<li><p>安装node版本管理模块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g i -n</span><br><span class=\"line\"><span class=\"comment\">//mac电脑，若无权限，需执行：</span></span><br><span class=\"line\">sudo npm -g i -n</span><br></pre></td></tr></table></figure></li>\n<li><p>执行升级命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n stable  <span class=\"comment\">//安装稳定版本</span></span><br><span class=\"line\">n latest  <span class=\"comment\">//安装最新版本</span></span><br><span class=\"line\">n (指定版本号)  <span class=\"comment\">//n 14.17.6</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"ViewModel如何数据共享","date":"2021-10-22T05:51:37.000Z","_content":"\n当我们创建一个ViewModel类，获取其实例是通过ViewModelProvider\n```\nval testViewModel = ViewModelProvider(this).get(TestViewModel::class.java)\n```\n或者采用kotlin中的viewModels\n```\nprivate val testViewModel by viewModels<TestViewModel>()\n```\n\nactivity和fragment组件之间的数据共享，这个不用多说，因为ViewModel是activity销毁的时候才clear，作用域是activity的生命周期，因此fragment可以持有同一个ViewModel的示例，从而共享activity的数据\n\n\n\nViewModelProvider(this) 的参数是ViewModelStoreOwner接口，ComponentActivity实现了ViewModelStoreOwner；由此把ViewModel和Activity关联起来\n\n\n\nViewModel的作用：\n\n```\nViewModel 是一个负责为Activity或Fragment准备和管理数据的类。 它还处理 Activity/Fragment 与应用程序其余部分的通信（例如调用业务逻辑类）。\nViewModel 始终与作用域（片段或活动）相关联地创建，并且只要作用域处于活动状态就会保留。 例如，如果它是一个活动，直到它完成。\n换句话说，这意味着如果 ViewModel 的所有者因配置更改（例如旋转）而被销毁，则它不会被销毁。 新的所有者实例只是重新连接到现有模型。\nViewModel 的目的是获取和保存 Activity 或 Fragment 所需的信息。 Activity 或 Fragment 应该能够观察到 ViewModel 中的变化。 ViewModel 通常通过LiveData或 Android 数据绑定公开这些信息。 您还可以使用您喜欢的框架中的任何可观察性构造。\nViewModel 的唯一职责是管理 UI 的数据。 它永远不应该访问您的视图层次结构或保留对 Activity 或 Fragment 的引用。\n```\n\n- 1.规范化了`ViewModel`的基类；\n- 2.`ViewModel`不会随着`Activity`的屏幕旋转而销毁；\n- 3.在对应的作用域内，保正只生产出对应的唯一实例，保证UI组件间的通信\n\n\n\n\n\n**如何实现屏幕旋转数据也会保存的？**\n\n```java\n//----ComponentActivity\t\n\t/**\n     * Retain all appropriate non-config state.  You can NOT\n     * override this yourself!  Use a {@link androidx.lifecycle.ViewModel} if you want to\n     * retain your own non config state.\n     * 保留所有适当的非配置状态。 你不能自己覆盖它！ \n     * 如果您想保留自己的非配置状态，请使用androidx.lifecycle.ViewModel \n     */\n    @Override\n    @Nullable\n\t//保留非配置实例\n    public final Object onRetainNonConfigurationInstance() {\n        Object custom = onRetainCustomNonConfigurationInstance();\n\n        ViewModelStore viewModelStore = mViewModelStore;\n        if (viewModelStore == null) {\n            // No one called getViewModelStore(), so see if there was an existing\n            // ViewModelStore from our last NonConfigurationInstance\n            NonConfigurationInstances nc =\n                    (NonConfigurationInstances) getLastNonConfigurationInstance();\n            if (nc != null) {\n                viewModelStore = nc.viewModelStore;\n            }\n        }\n\n        if (viewModelStore == null && custom == null) {\n            return null;\n        }\n\n        NonConfigurationInstances nci = new NonConfigurationInstances();\n        nci.custom = custom;\n        nci.viewModelStore = viewModelStore;\n        return nci;\n    }\n\n\t/**\n     * Returns the {@link ViewModelStore} associated with this activity\n     * <p>\n     * 返回与此activity关联的ViewModelStore\n     */\n    @NonNull\n    @Override\n    public ViewModelStore getViewModelStore() {\n        ...\n        if (mViewModelStore == null) {\n            NonConfigurationInstances nc =\n                    (NonConfigurationInstances) getLastNonConfigurationInstance();\n            if (nc != null) {\n                // Restore the ViewModelStore from NonConfigurationInstances\n                mViewModelStore = nc.viewModelStore;\n            }\n            if (mViewModelStore == null) {\n                mViewModelStore = new ViewModelStore();\n            }\n        }\n        return mViewModelStore;\n    }\n```\n\n根据上面ComponentActivity中的源码，可以看到当调用getViewModelStore（）时，会先去获取之前的实例getLastNonConfigurationInstance()，也是就是我们ViewModel中的数据，而方法onRetainNonConfigurationInstance（）是覆写的，其触发方式，父类Activity中的方法注释也指出`Called by the system`\n\n\n\n\n\n\n\n```java\n/**\n     * Returns an existing ViewModel or creates a new one in the scope (usually, a fragment or\n     * an activity), associated with this {@code ViewModelProvider}.\n     * <p>\n     * The created ViewModel is associated with the given scope and will be retained\n     * as long as the scope is alive (e.g. if it is an activity, until it is\n     * finished or process is killed).\n     */\n    @NonNull\n    @MainThread\n    public <T extends ViewModel> T get(@NonNull Class<T> modelClass) {\n        String canonicalName = modelClass.getCanonicalName();\n        if (canonicalName == null) {\n            throw new IllegalArgumentException(\"Local and anonymous classes can not be ViewModels\");\n        }\n        return get(DEFAULT_KEY + \":\" + canonicalName, modelClass);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @NonNull\n    @MainThread\n    public <T extends ViewModel> T get(@NonNull String key, @NonNull Class<T> modelClass) {\n        ViewModel viewModel = mViewModelStore.get(key);\n\n        if (modelClass.isInstance(viewModel)) {\n            if (mFactory instanceof OnRequeryFactory) {\n                ((OnRequeryFactory) mFactory).onRequery(viewModel);\n            }\n            return (T) viewModel;\n        } else {\n            //noinspection StatementWithEmptyBody\n            if (viewModel != null) {\n                // TODO: log a warning.\n            }\n        }\n        if (mFactory instanceof KeyedFactory) {\n            viewModel = ((KeyedFactory) mFactory).create(key, modelClass);\n        } else {\n            viewModel = mFactory.create(modelClass);\n        }\n        mViewModelStore.put(key, viewModel);\n        return (T) viewModel;\n    }\n```\n\n\n\nViewModel和ViewModelStore的源码都很简单\n\n\n\nViewModelStore内部就是HashMap存储ViewModel\n\n```java\npublic class ViewModelStore {\n\n    private final HashMap<String, ViewModel> mMap = new HashMap<>();\n\n    final void put(String key, ViewModel viewModel) {\n        ViewModel oldViewModel = mMap.put(key, viewModel);\n        if (oldViewModel != null) {\n            oldViewModel.onCleared();\n        }\n    }\n\n    final ViewModel get(String key) {\n        return mMap.get(key);\n    }\n\n    Set<String> keys() {\n        return new HashSet<>(mMap.keySet());\n    }\n\n    /**\n     *  Clears internal storage and notifies ViewModels that they are no longer used.\n     */\n    public final void clear() {\n        for (ViewModel vm : mMap.values()) {\n            vm.clear();\n        }\n        mMap.clear();\n    }\n}\n```\n\n","source":"_posts/ViewModel如何数据共享.md","raw":"title: ViewModel如何数据共享\ndate: 2021-10-22 13:51:37\ntags: Android\ncategories: Android\n\n------\n\n当我们创建一个ViewModel类，获取其实例是通过ViewModelProvider\n```\nval testViewModel = ViewModelProvider(this).get(TestViewModel::class.java)\n```\n或者采用kotlin中的viewModels\n```\nprivate val testViewModel by viewModels<TestViewModel>()\n```\n\nactivity和fragment组件之间的数据共享，这个不用多说，因为ViewModel是activity销毁的时候才clear，作用域是activity的生命周期，因此fragment可以持有同一个ViewModel的示例，从而共享activity的数据\n\n\n\nViewModelProvider(this) 的参数是ViewModelStoreOwner接口，ComponentActivity实现了ViewModelStoreOwner；由此把ViewModel和Activity关联起来\n\n\n\nViewModel的作用：\n\n```\nViewModel 是一个负责为Activity或Fragment准备和管理数据的类。 它还处理 Activity/Fragment 与应用程序其余部分的通信（例如调用业务逻辑类）。\nViewModel 始终与作用域（片段或活动）相关联地创建，并且只要作用域处于活动状态就会保留。 例如，如果它是一个活动，直到它完成。\n换句话说，这意味着如果 ViewModel 的所有者因配置更改（例如旋转）而被销毁，则它不会被销毁。 新的所有者实例只是重新连接到现有模型。\nViewModel 的目的是获取和保存 Activity 或 Fragment 所需的信息。 Activity 或 Fragment 应该能够观察到 ViewModel 中的变化。 ViewModel 通常通过LiveData或 Android 数据绑定公开这些信息。 您还可以使用您喜欢的框架中的任何可观察性构造。\nViewModel 的唯一职责是管理 UI 的数据。 它永远不应该访问您的视图层次结构或保留对 Activity 或 Fragment 的引用。\n```\n\n- 1.规范化了`ViewModel`的基类；\n- 2.`ViewModel`不会随着`Activity`的屏幕旋转而销毁；\n- 3.在对应的作用域内，保正只生产出对应的唯一实例，保证UI组件间的通信\n\n\n\n\n\n**如何实现屏幕旋转数据也会保存的？**\n\n```java\n//----ComponentActivity\t\n\t/**\n     * Retain all appropriate non-config state.  You can NOT\n     * override this yourself!  Use a {@link androidx.lifecycle.ViewModel} if you want to\n     * retain your own non config state.\n     * 保留所有适当的非配置状态。 你不能自己覆盖它！ \n     * 如果您想保留自己的非配置状态，请使用androidx.lifecycle.ViewModel \n     */\n    @Override\n    @Nullable\n\t//保留非配置实例\n    public final Object onRetainNonConfigurationInstance() {\n        Object custom = onRetainCustomNonConfigurationInstance();\n\n        ViewModelStore viewModelStore = mViewModelStore;\n        if (viewModelStore == null) {\n            // No one called getViewModelStore(), so see if there was an existing\n            // ViewModelStore from our last NonConfigurationInstance\n            NonConfigurationInstances nc =\n                    (NonConfigurationInstances) getLastNonConfigurationInstance();\n            if (nc != null) {\n                viewModelStore = nc.viewModelStore;\n            }\n        }\n\n        if (viewModelStore == null && custom == null) {\n            return null;\n        }\n\n        NonConfigurationInstances nci = new NonConfigurationInstances();\n        nci.custom = custom;\n        nci.viewModelStore = viewModelStore;\n        return nci;\n    }\n\n\t/**\n     * Returns the {@link ViewModelStore} associated with this activity\n     * <p>\n     * 返回与此activity关联的ViewModelStore\n     */\n    @NonNull\n    @Override\n    public ViewModelStore getViewModelStore() {\n        ...\n        if (mViewModelStore == null) {\n            NonConfigurationInstances nc =\n                    (NonConfigurationInstances) getLastNonConfigurationInstance();\n            if (nc != null) {\n                // Restore the ViewModelStore from NonConfigurationInstances\n                mViewModelStore = nc.viewModelStore;\n            }\n            if (mViewModelStore == null) {\n                mViewModelStore = new ViewModelStore();\n            }\n        }\n        return mViewModelStore;\n    }\n```\n\n根据上面ComponentActivity中的源码，可以看到当调用getViewModelStore（）时，会先去获取之前的实例getLastNonConfigurationInstance()，也是就是我们ViewModel中的数据，而方法onRetainNonConfigurationInstance（）是覆写的，其触发方式，父类Activity中的方法注释也指出`Called by the system`\n\n\n\n\n\n\n\n```java\n/**\n     * Returns an existing ViewModel or creates a new one in the scope (usually, a fragment or\n     * an activity), associated with this {@code ViewModelProvider}.\n     * <p>\n     * The created ViewModel is associated with the given scope and will be retained\n     * as long as the scope is alive (e.g. if it is an activity, until it is\n     * finished or process is killed).\n     */\n    @NonNull\n    @MainThread\n    public <T extends ViewModel> T get(@NonNull Class<T> modelClass) {\n        String canonicalName = modelClass.getCanonicalName();\n        if (canonicalName == null) {\n            throw new IllegalArgumentException(\"Local and anonymous classes can not be ViewModels\");\n        }\n        return get(DEFAULT_KEY + \":\" + canonicalName, modelClass);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @NonNull\n    @MainThread\n    public <T extends ViewModel> T get(@NonNull String key, @NonNull Class<T> modelClass) {\n        ViewModel viewModel = mViewModelStore.get(key);\n\n        if (modelClass.isInstance(viewModel)) {\n            if (mFactory instanceof OnRequeryFactory) {\n                ((OnRequeryFactory) mFactory).onRequery(viewModel);\n            }\n            return (T) viewModel;\n        } else {\n            //noinspection StatementWithEmptyBody\n            if (viewModel != null) {\n                // TODO: log a warning.\n            }\n        }\n        if (mFactory instanceof KeyedFactory) {\n            viewModel = ((KeyedFactory) mFactory).create(key, modelClass);\n        } else {\n            viewModel = mFactory.create(modelClass);\n        }\n        mViewModelStore.put(key, viewModel);\n        return (T) viewModel;\n    }\n```\n\n\n\nViewModel和ViewModelStore的源码都很简单\n\n\n\nViewModelStore内部就是HashMap存储ViewModel\n\n```java\npublic class ViewModelStore {\n\n    private final HashMap<String, ViewModel> mMap = new HashMap<>();\n\n    final void put(String key, ViewModel viewModel) {\n        ViewModel oldViewModel = mMap.put(key, viewModel);\n        if (oldViewModel != null) {\n            oldViewModel.onCleared();\n        }\n    }\n\n    final ViewModel get(String key) {\n        return mMap.get(key);\n    }\n\n    Set<String> keys() {\n        return new HashSet<>(mMap.keySet());\n    }\n\n    /**\n     *  Clears internal storage and notifies ViewModels that they are no longer used.\n     */\n    public final void clear() {\n        for (ViewModel vm : mMap.values()) {\n            vm.clear();\n        }\n        mMap.clear();\n    }\n}\n```\n\n","slug":"ViewModel如何数据共享","published":1,"updated":"2021-10-22T07:53:13.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepb000y7wgsawx41keh","content":"<p>当我们创建一个ViewModel类，获取其实例是通过ViewModelProvider</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val testViewModel = ViewModelProvider(this).get(TestViewModel::class.java)</span><br></pre></td></tr></table></figure>\n<p>或者采用kotlin中的viewModels</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private val testViewModel by viewModels&lt;TestViewModel&gt;()</span><br></pre></td></tr></table></figure>\n\n<p>activity和fragment组件之间的数据共享，这个不用多说，因为ViewModel是activity销毁的时候才clear，作用域是activity的生命周期，因此fragment可以持有同一个ViewModel的示例，从而共享activity的数据</p>\n<p>ViewModelProvider(this) 的参数是ViewModelStoreOwner接口，ComponentActivity实现了ViewModelStoreOwner；由此把ViewModel和Activity关联起来</p>\n<p>ViewModel的作用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewModel 是一个负责为Activity或Fragment准备和管理数据的类。 它还处理 Activity/Fragment 与应用程序其余部分的通信（例如调用业务逻辑类）。</span><br><span class=\"line\">ViewModel 始终与作用域（片段或活动）相关联地创建，并且只要作用域处于活动状态就会保留。 例如，如果它是一个活动，直到它完成。</span><br><span class=\"line\">换句话说，这意味着如果 ViewModel 的所有者因配置更改（例如旋转）而被销毁，则它不会被销毁。 新的所有者实例只是重新连接到现有模型。</span><br><span class=\"line\">ViewModel 的目的是获取和保存 Activity 或 Fragment 所需的信息。 Activity 或 Fragment 应该能够观察到 ViewModel 中的变化。 ViewModel 通常通过LiveData或 Android 数据绑定公开这些信息。 您还可以使用您喜欢的框架中的任何可观察性构造。</span><br><span class=\"line\">ViewModel 的唯一职责是管理 UI 的数据。 它永远不应该访问您的视图层次结构或保留对 Activity 或 Fragment 的引用。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>1.规范化了<code>ViewModel</code>的基类；</li>\n<li>2.<code>ViewModel</code>不会随着<code>Activity</code>的屏幕旋转而销毁；</li>\n<li>3.在对应的作用域内，保正只生产出对应的唯一实例，保证UI组件间的通信</li>\n</ul>\n<p><strong>如何实现屏幕旋转数据也会保存的？</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//----ComponentActivity\t</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Retain all appropriate non-config state.  You can NOT</span></span><br><span class=\"line\"><span class=\"comment\">     * override this yourself!  Use a &#123;<span class=\"doctag\">@link</span> androidx.lifecycle.ViewModel&#125; if you want to</span></span><br><span class=\"line\"><span class=\"comment\">     * retain your own non config state.</span></span><br><span class=\"line\"><span class=\"comment\">     * 保留所有适当的非配置状态。 你不能自己覆盖它！ </span></span><br><span class=\"line\"><span class=\"comment\">     * 如果您想保留自己的非配置状态，请使用androidx.lifecycle.ViewModel </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"comment\">//保留非配置实例</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Object <span class=\"title\">onRetainNonConfigurationInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object custom = onRetainCustomNonConfigurationInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        ViewModelStore viewModelStore = mViewModelStore;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (viewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No one called getViewModelStore(), so see if there was an existing</span></span><br><span class=\"line\">            <span class=\"comment\">// ViewModelStore from our last NonConfigurationInstance</span></span><br><span class=\"line\">            NonConfigurationInstances nc =</span><br><span class=\"line\">                    (NonConfigurationInstances) getLastNonConfigurationInstance();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nc != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                viewModelStore = nc.viewModelStore;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (viewModelStore == <span class=\"keyword\">null</span> &amp;&amp; custom == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        NonConfigurationInstances nci = <span class=\"keyword\">new</span> NonConfigurationInstances();</span><br><span class=\"line\">        nci.custom = custom;</span><br><span class=\"line\">        nci.viewModelStore = viewModelStore;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nci;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the &#123;<span class=\"doctag\">@link</span> ViewModelStore&#125; associated with this activity</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回与此activity关联的ViewModelStore</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ViewModelStore <span class=\"title\">getViewModelStore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mViewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            NonConfigurationInstances nc =</span><br><span class=\"line\">                    (NonConfigurationInstances) getLastNonConfigurationInstance();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nc != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Restore the ViewModelStore from NonConfigurationInstances</span></span><br><span class=\"line\">                mViewModelStore = nc.viewModelStore;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mViewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mViewModelStore = <span class=\"keyword\">new</span> ViewModelStore();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mViewModelStore;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据上面ComponentActivity中的源码，可以看到当调用getViewModelStore（）时，会先去获取之前的实例getLastNonConfigurationInstance()，也是就是我们ViewModel中的数据，而方法onRetainNonConfigurationInstance（）是覆写的，其触发方式，父类Activity中的方法注释也指出<code>Called by the system</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns an existing ViewModel or creates a new one in the scope (usually, a fragment or</span></span><br><span class=\"line\"><span class=\"comment\">     * an activity), associated with this &#123;<span class=\"doctag\">@code</span> ViewModelProvider&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * The created ViewModel is associated with the given scope and will be retained</span></span><br><span class=\"line\"><span class=\"comment\">     * as long as the scope is alive (e.g. if it is an activity, until it is</span></span><br><span class=\"line\"><span class=\"comment\">     * finished or process is killed).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class=\"line\">        String canonicalName = modelClass.getCanonicalName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (canonicalName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Local and anonymous classes can not be ViewModels&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(DEFAULT_KEY + <span class=\"string\">&quot;:&quot;</span> + canonicalName, modelClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> String key, <span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class=\"line\">        ViewModel viewModel = mViewModelStore.get(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFactory <span class=\"keyword\">instanceof</span> OnRequeryFactory) &#123;</span><br><span class=\"line\">                ((OnRequeryFactory) mFactory).onRequery(viewModel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//noinspection StatementWithEmptyBody</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (viewModel != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> log a warning.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory <span class=\"keyword\">instanceof</span> KeyedFactory) &#123;</span><br><span class=\"line\">            viewModel = ((KeyedFactory) mFactory).create(key, modelClass);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            viewModel = mFactory.create(modelClass);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mViewModelStore.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>ViewModel和ViewModelStore的源码都很简单</p>\n<p>ViewModelStore内部就是HashMap存储ViewModel</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelStore</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class=\"line\">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldViewModel != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            oldViewModel.onCleared();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> ViewModel <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mMap.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Set&lt;String&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;&gt;(mMap.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Clears internal storage and notifies ViewModels that they are no longer used.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ViewModel vm : mMap.values()) &#123;</span><br><span class=\"line\">            vm.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mMap.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>当我们创建一个ViewModel类，获取其实例是通过ViewModelProvider</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val testViewModel = ViewModelProvider(this).get(TestViewModel::class.java)</span><br></pre></td></tr></table></figure>\n<p>或者采用kotlin中的viewModels</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private val testViewModel by viewModels&lt;TestViewModel&gt;()</span><br></pre></td></tr></table></figure>\n\n<p>activity和fragment组件之间的数据共享，这个不用多说，因为ViewModel是activity销毁的时候才clear，作用域是activity的生命周期，因此fragment可以持有同一个ViewModel的示例，从而共享activity的数据</p>\n<p>ViewModelProvider(this) 的参数是ViewModelStoreOwner接口，ComponentActivity实现了ViewModelStoreOwner；由此把ViewModel和Activity关联起来</p>\n<p>ViewModel的作用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewModel 是一个负责为Activity或Fragment准备和管理数据的类。 它还处理 Activity/Fragment 与应用程序其余部分的通信（例如调用业务逻辑类）。</span><br><span class=\"line\">ViewModel 始终与作用域（片段或活动）相关联地创建，并且只要作用域处于活动状态就会保留。 例如，如果它是一个活动，直到它完成。</span><br><span class=\"line\">换句话说，这意味着如果 ViewModel 的所有者因配置更改（例如旋转）而被销毁，则它不会被销毁。 新的所有者实例只是重新连接到现有模型。</span><br><span class=\"line\">ViewModel 的目的是获取和保存 Activity 或 Fragment 所需的信息。 Activity 或 Fragment 应该能够观察到 ViewModel 中的变化。 ViewModel 通常通过LiveData或 Android 数据绑定公开这些信息。 您还可以使用您喜欢的框架中的任何可观察性构造。</span><br><span class=\"line\">ViewModel 的唯一职责是管理 UI 的数据。 它永远不应该访问您的视图层次结构或保留对 Activity 或 Fragment 的引用。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>1.规范化了<code>ViewModel</code>的基类；</li>\n<li>2.<code>ViewModel</code>不会随着<code>Activity</code>的屏幕旋转而销毁；</li>\n<li>3.在对应的作用域内，保正只生产出对应的唯一实例，保证UI组件间的通信</li>\n</ul>\n<p><strong>如何实现屏幕旋转数据也会保存的？</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//----ComponentActivity\t</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Retain all appropriate non-config state.  You can NOT</span></span><br><span class=\"line\"><span class=\"comment\">     * override this yourself!  Use a &#123;<span class=\"doctag\">@link</span> androidx.lifecycle.ViewModel&#125; if you want to</span></span><br><span class=\"line\"><span class=\"comment\">     * retain your own non config state.</span></span><br><span class=\"line\"><span class=\"comment\">     * 保留所有适当的非配置状态。 你不能自己覆盖它！ </span></span><br><span class=\"line\"><span class=\"comment\">     * 如果您想保留自己的非配置状态，请使用androidx.lifecycle.ViewModel </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"comment\">//保留非配置实例</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Object <span class=\"title\">onRetainNonConfigurationInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object custom = onRetainCustomNonConfigurationInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        ViewModelStore viewModelStore = mViewModelStore;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (viewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No one called getViewModelStore(), so see if there was an existing</span></span><br><span class=\"line\">            <span class=\"comment\">// ViewModelStore from our last NonConfigurationInstance</span></span><br><span class=\"line\">            NonConfigurationInstances nc =</span><br><span class=\"line\">                    (NonConfigurationInstances) getLastNonConfigurationInstance();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nc != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                viewModelStore = nc.viewModelStore;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (viewModelStore == <span class=\"keyword\">null</span> &amp;&amp; custom == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        NonConfigurationInstances nci = <span class=\"keyword\">new</span> NonConfigurationInstances();</span><br><span class=\"line\">        nci.custom = custom;</span><br><span class=\"line\">        nci.viewModelStore = viewModelStore;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nci;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the &#123;<span class=\"doctag\">@link</span> ViewModelStore&#125; associated with this activity</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回与此activity关联的ViewModelStore</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ViewModelStore <span class=\"title\">getViewModelStore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mViewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            NonConfigurationInstances nc =</span><br><span class=\"line\">                    (NonConfigurationInstances) getLastNonConfigurationInstance();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nc != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Restore the ViewModelStore from NonConfigurationInstances</span></span><br><span class=\"line\">                mViewModelStore = nc.viewModelStore;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mViewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mViewModelStore = <span class=\"keyword\">new</span> ViewModelStore();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mViewModelStore;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据上面ComponentActivity中的源码，可以看到当调用getViewModelStore（）时，会先去获取之前的实例getLastNonConfigurationInstance()，也是就是我们ViewModel中的数据，而方法onRetainNonConfigurationInstance（）是覆写的，其触发方式，父类Activity中的方法注释也指出<code>Called by the system</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns an existing ViewModel or creates a new one in the scope (usually, a fragment or</span></span><br><span class=\"line\"><span class=\"comment\">     * an activity), associated with this &#123;<span class=\"doctag\">@code</span> ViewModelProvider&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * The created ViewModel is associated with the given scope and will be retained</span></span><br><span class=\"line\"><span class=\"comment\">     * as long as the scope is alive (e.g. if it is an activity, until it is</span></span><br><span class=\"line\"><span class=\"comment\">     * finished or process is killed).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class=\"line\">        String canonicalName = modelClass.getCanonicalName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (canonicalName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Local and anonymous classes can not be ViewModels&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(DEFAULT_KEY + <span class=\"string\">&quot;:&quot;</span> + canonicalName, modelClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> String key, <span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class=\"line\">        ViewModel viewModel = mViewModelStore.get(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFactory <span class=\"keyword\">instanceof</span> OnRequeryFactory) &#123;</span><br><span class=\"line\">                ((OnRequeryFactory) mFactory).onRequery(viewModel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//noinspection StatementWithEmptyBody</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (viewModel != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> log a warning.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory <span class=\"keyword\">instanceof</span> KeyedFactory) &#123;</span><br><span class=\"line\">            viewModel = ((KeyedFactory) mFactory).create(key, modelClass);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            viewModel = mFactory.create(modelClass);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mViewModelStore.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>ViewModel和ViewModelStore的源码都很简单</p>\n<p>ViewModelStore内部就是HashMap存储ViewModel</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelStore</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class=\"line\">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldViewModel != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            oldViewModel.onCleared();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> ViewModel <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mMap.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Set&lt;String&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;&gt;(mMap.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Clears internal storage and notifies ViewModels that they are no longer used.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ViewModel vm : mMap.values()) &#123;</span><br><span class=\"line\">            vm.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mMap.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Android View绘制的完整流程及知识点","date":"2021-10-04T05:21:09.000Z","_content":"\n具体源码整理如下[流程图](https://www.processon.com/view/link/61600cfbf346fb0e99a6d639)\n\n![源码流程图](源码流程图.png)\n\n梳理过源码后，再看相关的知识点：\n\n1. 首次 View 的绘制流程是在什么时候触发的？\n2. ViewRootImpl 创建的时机？\n3. ViewRootImpl 和 DecorView 的关系是什么？\n4. DecorView 的布局是什么样的？\n5. DecorView 的创建时机？\n6. setContentView 的流程\n7. LayoutInflate 的流程\n8. Activity、PhoneWindow、DecorView、ViewRootImpl 的关系？\n9. PhoneWindow 的创建时机？\n10. 如何触发重新绘制？\n11. requestLayout 和 invalidate 的流程\n12. requestLayout 和 invalidate 的区别\n13. 简单介绍下MeasureSpec\n14. MeasureSpec的确定\n15. 子View的MeasureSpec由父View根据自身的MeasureSpec和子View的LayoutParams来共同确定子View的MeasureSpec，注意，即使确定了子View的MeasureSpec并不一定决定了子View的大小，自定义View可以根据需要修改这个值，最终通过setMeasuredDimension（width,height）设置最终大小。\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/6989232-799ff8ac91e38316?imageMogr2/auto-orient/strip|imageView2/2/w/1080/format/webp)\n\n**5、View执行onMeasure,onLayout的次数**\n\n分析ViewRootImpl的源码，scheduleTraversales()内部会执行postCallBack触发mTraversalRunnable重新走一遍performTraversals(),第二次执行performTraversals()就会触发performDraw()。所以performTraversals()走了两次，那么肯定会走2次measure方法，但不一定走2次onMeasure()，读过View measure方法源码的都应知道measure方法做了2级测量优化：\n\n- 1.如果flag不为forceLayout或者与上次测量规格（MeasureSpec）相比未改变，那么将不会进行重新测量（执行onMeasure方法），直接使用上次的测量值；\n- 2.如果满足非强制测量的条件，即前后二次测量规格不一致，会先根据目前测量规格生成的key索引缓存数据，索引到就无需进行重新测量;如果targetSDK小于API 20则二级测量优化无效，依旧会重新测量，不会采用缓存测量值。\n\n**6、getWidth()和getMeasuredWidth()的区别**\n\ngetMeasuredWidth()、getMeasuredHeight()必须在onMeasure之后使用才有效）getMeasuredWidth() 的取值最终来源于 setMeasuredDimension() 方法调用时传递的参数, getWidth()返回的是，mRight - mLeft，mRight、mLeft 变量分别表示 View 相对父容器的左右边缘位置，getWidth()与getHeight()方法必须在layout(int l, int t, int r, int b)执行之后才有效\n\n**7、如何在onCreate中拿到View的宽度和高度**\n\n- **View.post(runnable)**\n\n\n\n```java\nview.post(new Runnable() {            \n            @Override\n            public void run() {\n                int width = view.getWidth();\n                int measuredWidth = view.getMeasuredWidth();\n                Log.i(TAG, \"width: \" + width);\n                Log.i(TAG, \"measuredWidth: \" + measuredWidth);\n            }\n        });      \n```\n\n利用Handler通信机制，发送一个Runnable到MessageQueue中，当View布局处理完成时，自动发送消息，通知UI进程。借此机制，巧妙获取View的高宽属性，代码简洁，相比ViewTreeObserver监听处理，还不需要手动移除观察者监听事件。\n\n- **ViewTreeObserver.addOnGlobalLayoutListener()**\n\n监听View的onLayout()绘制过程，一旦layout触发变化，立即回调onLayoutChange方法。\n 注意，使用完也要主要调用removeOnGlobalListener()方法移除监听事件。避免后续每一次发生全局View变化均触发该事件，影响性能。\n\n\n\n```java\nViewTreeObserver vto = view.getViewTreeObserver();       \n       vto.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                view.getViewTreeObserver().removeGlobalOnLayoutListener(this);\n                Log.i(TAG, \"width: \" + view.getWidth());\n                Log.i(TAG, \"height: \" + view.getHeight());\n            }\n        });\n```\n\n**8、invalidate和postInvalidate区别**\n\n二者都会出发刷新View，并且当这个View的可见性为VISIBLE的时候，View的onDraw()方法将会被调用，invalidate()方法在 UI 线程中调用，重绘当前 UI。postInvalidate() 方法在非 UI 线程中调用，通过Handler通知 UI 线程重绘。\n\n**9、requestLayout()的作用**\n\nrequestLayout()也可以达到重绘view的目的，但是与前两者不同，它会先调用onLayout()重新排版，再调用ondraw()方法。当view确定自身已经不再适合现有的区域时，该view本身调用这个方法要求parent view（父类的视图）重新调用他的onMeasure、onLayout来重新设置自己位置。特别是当view的layoutparameter发生改变，并且它的值还没能应用到view上时，这时候适合调用这个方法requestLayout()。\n\n**10、onDraw() 和dispatchDraw()的区别**\n\n- 绘制View本身的内容，通过调用View.onDraw(canvas)函数实现\n- 绘制自己的孩子通过dispatchDraw（canvas）实现\n\ndraw过程会调用onDraw(Canvas canvas)方法，然后就是dispatchDraw(Canvas canvas)方法, dispatchDraw()主要是分发给子组件进行绘制，我们通常定制组件的时候重写的是onDraw()方法。值得注意的是ViewGroup容器组件的绘制，当它没有背景时直接调用的是dispatchDraw()方法, 而绕过了draw()方法，当它有背景的时候就调用draw()方法，而draw()方法里包含了dispatchDraw()方法的调用。因此要在ViewGroup上绘制东西的时候往往重写的是dispatchDraw()方法而不是onDraw()方法，或者自定制一个Drawable，重写它的draw(Canvas c)和 getIntrinsicWidth()方法，然后设为背景。\n\n\n\n\n\nhttps://www.jianshu.com/p/5a71014e7b1b\n\nhttps://blog.csdn.net/sinat_27154507/article/details/79748010\n\nhttps://www.cnblogs.com/andy-songwei/p/10955062.html\n\nhttps://blog.csdn.net/Innost/article/details/6172893\n\nhttps://blog.csdn.net/a553181867/article/details/51477040\n\nhttps://juejin.cn/post/6872140986579943438\n\nhttps://www.jianshu.com/p/c5d200dde486\n","source":"_posts/androidview的绘制流程.md","raw":"---\ntitle: Android View绘制的完整流程及知识点\ndate: 2021-10-04 13:21:09\ntags: Android\ncategories: Android\n\n---\n\n具体源码整理如下[流程图](https://www.processon.com/view/link/61600cfbf346fb0e99a6d639)\n\n![源码流程图](源码流程图.png)\n\n梳理过源码后，再看相关的知识点：\n\n1. 首次 View 的绘制流程是在什么时候触发的？\n2. ViewRootImpl 创建的时机？\n3. ViewRootImpl 和 DecorView 的关系是什么？\n4. DecorView 的布局是什么样的？\n5. DecorView 的创建时机？\n6. setContentView 的流程\n7. LayoutInflate 的流程\n8. Activity、PhoneWindow、DecorView、ViewRootImpl 的关系？\n9. PhoneWindow 的创建时机？\n10. 如何触发重新绘制？\n11. requestLayout 和 invalidate 的流程\n12. requestLayout 和 invalidate 的区别\n13. 简单介绍下MeasureSpec\n14. MeasureSpec的确定\n15. 子View的MeasureSpec由父View根据自身的MeasureSpec和子View的LayoutParams来共同确定子View的MeasureSpec，注意，即使确定了子View的MeasureSpec并不一定决定了子View的大小，自定义View可以根据需要修改这个值，最终通过setMeasuredDimension（width,height）设置最终大小。\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/6989232-799ff8ac91e38316?imageMogr2/auto-orient/strip|imageView2/2/w/1080/format/webp)\n\n**5、View执行onMeasure,onLayout的次数**\n\n分析ViewRootImpl的源码，scheduleTraversales()内部会执行postCallBack触发mTraversalRunnable重新走一遍performTraversals(),第二次执行performTraversals()就会触发performDraw()。所以performTraversals()走了两次，那么肯定会走2次measure方法，但不一定走2次onMeasure()，读过View measure方法源码的都应知道measure方法做了2级测量优化：\n\n- 1.如果flag不为forceLayout或者与上次测量规格（MeasureSpec）相比未改变，那么将不会进行重新测量（执行onMeasure方法），直接使用上次的测量值；\n- 2.如果满足非强制测量的条件，即前后二次测量规格不一致，会先根据目前测量规格生成的key索引缓存数据，索引到就无需进行重新测量;如果targetSDK小于API 20则二级测量优化无效，依旧会重新测量，不会采用缓存测量值。\n\n**6、getWidth()和getMeasuredWidth()的区别**\n\ngetMeasuredWidth()、getMeasuredHeight()必须在onMeasure之后使用才有效）getMeasuredWidth() 的取值最终来源于 setMeasuredDimension() 方法调用时传递的参数, getWidth()返回的是，mRight - mLeft，mRight、mLeft 变量分别表示 View 相对父容器的左右边缘位置，getWidth()与getHeight()方法必须在layout(int l, int t, int r, int b)执行之后才有效\n\n**7、如何在onCreate中拿到View的宽度和高度**\n\n- **View.post(runnable)**\n\n\n\n```java\nview.post(new Runnable() {            \n            @Override\n            public void run() {\n                int width = view.getWidth();\n                int measuredWidth = view.getMeasuredWidth();\n                Log.i(TAG, \"width: \" + width);\n                Log.i(TAG, \"measuredWidth: \" + measuredWidth);\n            }\n        });      \n```\n\n利用Handler通信机制，发送一个Runnable到MessageQueue中，当View布局处理完成时，自动发送消息，通知UI进程。借此机制，巧妙获取View的高宽属性，代码简洁，相比ViewTreeObserver监听处理，还不需要手动移除观察者监听事件。\n\n- **ViewTreeObserver.addOnGlobalLayoutListener()**\n\n监听View的onLayout()绘制过程，一旦layout触发变化，立即回调onLayoutChange方法。\n 注意，使用完也要主要调用removeOnGlobalListener()方法移除监听事件。避免后续每一次发生全局View变化均触发该事件，影响性能。\n\n\n\n```java\nViewTreeObserver vto = view.getViewTreeObserver();       \n       vto.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                view.getViewTreeObserver().removeGlobalOnLayoutListener(this);\n                Log.i(TAG, \"width: \" + view.getWidth());\n                Log.i(TAG, \"height: \" + view.getHeight());\n            }\n        });\n```\n\n**8、invalidate和postInvalidate区别**\n\n二者都会出发刷新View，并且当这个View的可见性为VISIBLE的时候，View的onDraw()方法将会被调用，invalidate()方法在 UI 线程中调用，重绘当前 UI。postInvalidate() 方法在非 UI 线程中调用，通过Handler通知 UI 线程重绘。\n\n**9、requestLayout()的作用**\n\nrequestLayout()也可以达到重绘view的目的，但是与前两者不同，它会先调用onLayout()重新排版，再调用ondraw()方法。当view确定自身已经不再适合现有的区域时，该view本身调用这个方法要求parent view（父类的视图）重新调用他的onMeasure、onLayout来重新设置自己位置。特别是当view的layoutparameter发生改变，并且它的值还没能应用到view上时，这时候适合调用这个方法requestLayout()。\n\n**10、onDraw() 和dispatchDraw()的区别**\n\n- 绘制View本身的内容，通过调用View.onDraw(canvas)函数实现\n- 绘制自己的孩子通过dispatchDraw（canvas）实现\n\ndraw过程会调用onDraw(Canvas canvas)方法，然后就是dispatchDraw(Canvas canvas)方法, dispatchDraw()主要是分发给子组件进行绘制，我们通常定制组件的时候重写的是onDraw()方法。值得注意的是ViewGroup容器组件的绘制，当它没有背景时直接调用的是dispatchDraw()方法, 而绕过了draw()方法，当它有背景的时候就调用draw()方法，而draw()方法里包含了dispatchDraw()方法的调用。因此要在ViewGroup上绘制东西的时候往往重写的是dispatchDraw()方法而不是onDraw()方法，或者自定制一个Drawable，重写它的draw(Canvas c)和 getIntrinsicWidth()方法，然后设为背景。\n\n\n\n\n\nhttps://www.jianshu.com/p/5a71014e7b1b\n\nhttps://blog.csdn.net/sinat_27154507/article/details/79748010\n\nhttps://www.cnblogs.com/andy-songwei/p/10955062.html\n\nhttps://blog.csdn.net/Innost/article/details/6172893\n\nhttps://blog.csdn.net/a553181867/article/details/51477040\n\nhttps://juejin.cn/post/6872140986579943438\n\nhttps://www.jianshu.com/p/c5d200dde486\n","slug":"androidview的绘制流程","published":1,"updated":"2021-11-05T05:48:57.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepc00137wgsbxxadxo5","content":"<p>具体源码整理如下<a href=\"https://www.processon.com/view/link/61600cfbf346fb0e99a6d639\">流程图</a></p>\n<p><img src=\"/2021/10/04/androidview%E7%9A%84%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B/%E6%BA%90%E7%A0%81%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"源码流程图\"></p>\n<p>梳理过源码后，再看相关的知识点：</p>\n<ol>\n<li>首次 View 的绘制流程是在什么时候触发的？</li>\n<li>ViewRootImpl 创建的时机？</li>\n<li>ViewRootImpl 和 DecorView 的关系是什么？</li>\n<li>DecorView 的布局是什么样的？</li>\n<li>DecorView 的创建时机？</li>\n<li>setContentView 的流程</li>\n<li>LayoutInflate 的流程</li>\n<li>Activity、PhoneWindow、DecorView、ViewRootImpl 的关系？</li>\n<li>PhoneWindow 的创建时机？</li>\n<li>如何触发重新绘制？</li>\n<li>requestLayout 和 invalidate 的流程</li>\n<li>requestLayout 和 invalidate 的区别</li>\n<li>简单介绍下MeasureSpec</li>\n<li>MeasureSpec的确定</li>\n<li>子View的MeasureSpec由父View根据自身的MeasureSpec和子View的LayoutParams来共同确定子View的MeasureSpec，注意，即使确定了子View的MeasureSpec并不一定决定了子View的大小，自定义View可以根据需要修改这个值，最终通过setMeasuredDimension（width,height）设置最终大小。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6989232-799ff8ac91e38316?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/format/webp\" alt=\"img\"></p>\n<p><strong>5、View执行onMeasure,onLayout的次数</strong></p>\n<p>分析ViewRootImpl的源码，scheduleTraversales()内部会执行postCallBack触发mTraversalRunnable重新走一遍performTraversals(),第二次执行performTraversals()就会触发performDraw()。所以performTraversals()走了两次，那么肯定会走2次measure方法，但不一定走2次onMeasure()，读过View measure方法源码的都应知道measure方法做了2级测量优化：</p>\n<ul>\n<li>1.如果flag不为forceLayout或者与上次测量规格（MeasureSpec）相比未改变，那么将不会进行重新测量（执行onMeasure方法），直接使用上次的测量值；</li>\n<li>2.如果满足非强制测量的条件，即前后二次测量规格不一致，会先根据目前测量规格生成的key索引缓存数据，索引到就无需进行重新测量;如果targetSDK小于API 20则二级测量优化无效，依旧会重新测量，不会采用缓存测量值。</li>\n</ul>\n<p><strong>6、getWidth()和getMeasuredWidth()的区别</strong></p>\n<p>getMeasuredWidth()、getMeasuredHeight()必须在onMeasure之后使用才有效）getMeasuredWidth() 的取值最终来源于 setMeasuredDimension() 方法调用时传递的参数, getWidth()返回的是，mRight - mLeft，mRight、mLeft 变量分别表示 View 相对父容器的左右边缘位置，getWidth()与getHeight()方法必须在layout(int l, int t, int r, int b)执行之后才有效</p>\n<p><strong>7、如何在onCreate中拿到View的宽度和高度</strong></p>\n<ul>\n<li><strong>View.post(runnable)</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.post(<span class=\"keyword\">new</span> Runnable() &#123;            </span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> width = view.getWidth();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> measuredWidth = view.getMeasuredWidth();</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;width: &quot;</span> + width);</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;measuredWidth: &quot;</span> + measuredWidth);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);      </span><br></pre></td></tr></table></figure>\n\n<p>利用Handler通信机制，发送一个Runnable到MessageQueue中，当View布局处理完成时，自动发送消息，通知UI进程。借此机制，巧妙获取View的高宽属性，代码简洁，相比ViewTreeObserver监听处理，还不需要手动移除观察者监听事件。</p>\n<ul>\n<li><strong>ViewTreeObserver.addOnGlobalLayoutListener()</strong></li>\n</ul>\n<p>监听View的onLayout()绘制过程，一旦layout触发变化，立即回调onLayoutChange方法。<br> 注意，使用完也要主要调用removeOnGlobalListener()方法移除监听事件。避免后续每一次发生全局View变化均触发该事件，影响性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewTreeObserver vto = view.getViewTreeObserver();       </span><br><span class=\"line\">       vto.addOnGlobalLayoutListener(<span class=\"keyword\">new</span> OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                view.getViewTreeObserver().removeGlobalOnLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;width: &quot;</span> + view.getWidth());</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;height: &quot;</span> + view.getHeight());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>8、invalidate和postInvalidate区别</strong></p>\n<p>二者都会出发刷新View，并且当这个View的可见性为VISIBLE的时候，View的onDraw()方法将会被调用，invalidate()方法在 UI 线程中调用，重绘当前 UI。postInvalidate() 方法在非 UI 线程中调用，通过Handler通知 UI 线程重绘。</p>\n<p><strong>9、requestLayout()的作用</strong></p>\n<p>requestLayout()也可以达到重绘view的目的，但是与前两者不同，它会先调用onLayout()重新排版，再调用ondraw()方法。当view确定自身已经不再适合现有的区域时，该view本身调用这个方法要求parent view（父类的视图）重新调用他的onMeasure、onLayout来重新设置自己位置。特别是当view的layoutparameter发生改变，并且它的值还没能应用到view上时，这时候适合调用这个方法requestLayout()。</p>\n<p><strong>10、onDraw() 和dispatchDraw()的区别</strong></p>\n<ul>\n<li>绘制View本身的内容，通过调用View.onDraw(canvas)函数实现</li>\n<li>绘制自己的孩子通过dispatchDraw（canvas）实现</li>\n</ul>\n<p>draw过程会调用onDraw(Canvas canvas)方法，然后就是dispatchDraw(Canvas canvas)方法, dispatchDraw()主要是分发给子组件进行绘制，我们通常定制组件的时候重写的是onDraw()方法。值得注意的是ViewGroup容器组件的绘制，当它没有背景时直接调用的是dispatchDraw()方法, 而绕过了draw()方法，当它有背景的时候就调用draw()方法，而draw()方法里包含了dispatchDraw()方法的调用。因此要在ViewGroup上绘制东西的时候往往重写的是dispatchDraw()方法而不是onDraw()方法，或者自定制一个Drawable，重写它的draw(Canvas c)和 getIntrinsicWidth()方法，然后设为背景。</p>\n<p><a href=\"https://www.jianshu.com/p/5a71014e7b1b\">https://www.jianshu.com/p/5a71014e7b1b</a></p>\n<p><a href=\"https://blog.csdn.net/sinat_27154507/article/details/79748010\">https://blog.csdn.net/sinat_27154507/article/details/79748010</a></p>\n<p><a href=\"https://www.cnblogs.com/andy-songwei/p/10955062.html\">https://www.cnblogs.com/andy-songwei/p/10955062.html</a></p>\n<p><a href=\"https://blog.csdn.net/Innost/article/details/6172893\">https://blog.csdn.net/Innost/article/details/6172893</a></p>\n<p><a href=\"https://blog.csdn.net/a553181867/article/details/51477040\">https://blog.csdn.net/a553181867/article/details/51477040</a></p>\n<p><a href=\"https://juejin.cn/post/6872140986579943438\">https://juejin.cn/post/6872140986579943438</a></p>\n<p><a href=\"https://www.jianshu.com/p/c5d200dde486\">https://www.jianshu.com/p/c5d200dde486</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>具体源码整理如下<a href=\"https://www.processon.com/view/link/61600cfbf346fb0e99a6d639\">流程图</a></p>\n<p><img src=\"/2021/10/04/androidview%E7%9A%84%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B/%E6%BA%90%E7%A0%81%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"源码流程图\"></p>\n<p>梳理过源码后，再看相关的知识点：</p>\n<ol>\n<li>首次 View 的绘制流程是在什么时候触发的？</li>\n<li>ViewRootImpl 创建的时机？</li>\n<li>ViewRootImpl 和 DecorView 的关系是什么？</li>\n<li>DecorView 的布局是什么样的？</li>\n<li>DecorView 的创建时机？</li>\n<li>setContentView 的流程</li>\n<li>LayoutInflate 的流程</li>\n<li>Activity、PhoneWindow、DecorView、ViewRootImpl 的关系？</li>\n<li>PhoneWindow 的创建时机？</li>\n<li>如何触发重新绘制？</li>\n<li>requestLayout 和 invalidate 的流程</li>\n<li>requestLayout 和 invalidate 的区别</li>\n<li>简单介绍下MeasureSpec</li>\n<li>MeasureSpec的确定</li>\n<li>子View的MeasureSpec由父View根据自身的MeasureSpec和子View的LayoutParams来共同确定子View的MeasureSpec，注意，即使确定了子View的MeasureSpec并不一定决定了子View的大小，自定义View可以根据需要修改这个值，最终通过setMeasuredDimension（width,height）设置最终大小。</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6989232-799ff8ac91e38316?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/format/webp\" alt=\"img\"></p>\n<p><strong>5、View执行onMeasure,onLayout的次数</strong></p>\n<p>分析ViewRootImpl的源码，scheduleTraversales()内部会执行postCallBack触发mTraversalRunnable重新走一遍performTraversals(),第二次执行performTraversals()就会触发performDraw()。所以performTraversals()走了两次，那么肯定会走2次measure方法，但不一定走2次onMeasure()，读过View measure方法源码的都应知道measure方法做了2级测量优化：</p>\n<ul>\n<li>1.如果flag不为forceLayout或者与上次测量规格（MeasureSpec）相比未改变，那么将不会进行重新测量（执行onMeasure方法），直接使用上次的测量值；</li>\n<li>2.如果满足非强制测量的条件，即前后二次测量规格不一致，会先根据目前测量规格生成的key索引缓存数据，索引到就无需进行重新测量;如果targetSDK小于API 20则二级测量优化无效，依旧会重新测量，不会采用缓存测量值。</li>\n</ul>\n<p><strong>6、getWidth()和getMeasuredWidth()的区别</strong></p>\n<p>getMeasuredWidth()、getMeasuredHeight()必须在onMeasure之后使用才有效）getMeasuredWidth() 的取值最终来源于 setMeasuredDimension() 方法调用时传递的参数, getWidth()返回的是，mRight - mLeft，mRight、mLeft 变量分别表示 View 相对父容器的左右边缘位置，getWidth()与getHeight()方法必须在layout(int l, int t, int r, int b)执行之后才有效</p>\n<p><strong>7、如何在onCreate中拿到View的宽度和高度</strong></p>\n<ul>\n<li><strong>View.post(runnable)</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.post(<span class=\"keyword\">new</span> Runnable() &#123;            </span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> width = view.getWidth();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> measuredWidth = view.getMeasuredWidth();</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;width: &quot;</span> + width);</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;measuredWidth: &quot;</span> + measuredWidth);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);      </span><br></pre></td></tr></table></figure>\n\n<p>利用Handler通信机制，发送一个Runnable到MessageQueue中，当View布局处理完成时，自动发送消息，通知UI进程。借此机制，巧妙获取View的高宽属性，代码简洁，相比ViewTreeObserver监听处理，还不需要手动移除观察者监听事件。</p>\n<ul>\n<li><strong>ViewTreeObserver.addOnGlobalLayoutListener()</strong></li>\n</ul>\n<p>监听View的onLayout()绘制过程，一旦layout触发变化，立即回调onLayoutChange方法。<br> 注意，使用完也要主要调用removeOnGlobalListener()方法移除监听事件。避免后续每一次发生全局View变化均触发该事件，影响性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewTreeObserver vto = view.getViewTreeObserver();       </span><br><span class=\"line\">       vto.addOnGlobalLayoutListener(<span class=\"keyword\">new</span> OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                view.getViewTreeObserver().removeGlobalOnLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;width: &quot;</span> + view.getWidth());</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;height: &quot;</span> + view.getHeight());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>8、invalidate和postInvalidate区别</strong></p>\n<p>二者都会出发刷新View，并且当这个View的可见性为VISIBLE的时候，View的onDraw()方法将会被调用，invalidate()方法在 UI 线程中调用，重绘当前 UI。postInvalidate() 方法在非 UI 线程中调用，通过Handler通知 UI 线程重绘。</p>\n<p><strong>9、requestLayout()的作用</strong></p>\n<p>requestLayout()也可以达到重绘view的目的，但是与前两者不同，它会先调用onLayout()重新排版，再调用ondraw()方法。当view确定自身已经不再适合现有的区域时，该view本身调用这个方法要求parent view（父类的视图）重新调用他的onMeasure、onLayout来重新设置自己位置。特别是当view的layoutparameter发生改变，并且它的值还没能应用到view上时，这时候适合调用这个方法requestLayout()。</p>\n<p><strong>10、onDraw() 和dispatchDraw()的区别</strong></p>\n<ul>\n<li>绘制View本身的内容，通过调用View.onDraw(canvas)函数实现</li>\n<li>绘制自己的孩子通过dispatchDraw（canvas）实现</li>\n</ul>\n<p>draw过程会调用onDraw(Canvas canvas)方法，然后就是dispatchDraw(Canvas canvas)方法, dispatchDraw()主要是分发给子组件进行绘制，我们通常定制组件的时候重写的是onDraw()方法。值得注意的是ViewGroup容器组件的绘制，当它没有背景时直接调用的是dispatchDraw()方法, 而绕过了draw()方法，当它有背景的时候就调用draw()方法，而draw()方法里包含了dispatchDraw()方法的调用。因此要在ViewGroup上绘制东西的时候往往重写的是dispatchDraw()方法而不是onDraw()方法，或者自定制一个Drawable，重写它的draw(Canvas c)和 getIntrinsicWidth()方法，然后设为背景。</p>\n<p><a href=\"https://www.jianshu.com/p/5a71014e7b1b\">https://www.jianshu.com/p/5a71014e7b1b</a></p>\n<p><a href=\"https://blog.csdn.net/sinat_27154507/article/details/79748010\">https://blog.csdn.net/sinat_27154507/article/details/79748010</a></p>\n<p><a href=\"https://www.cnblogs.com/andy-songwei/p/10955062.html\">https://www.cnblogs.com/andy-songwei/p/10955062.html</a></p>\n<p><a href=\"https://blog.csdn.net/Innost/article/details/6172893\">https://blog.csdn.net/Innost/article/details/6172893</a></p>\n<p><a href=\"https://blog.csdn.net/a553181867/article/details/51477040\">https://blog.csdn.net/a553181867/article/details/51477040</a></p>\n<p><a href=\"https://juejin.cn/post/6872140986579943438\">https://juejin.cn/post/6872140986579943438</a></p>\n<p><a href=\"https://www.jianshu.com/p/c5d200dde486\">https://www.jianshu.com/p/c5d200dde486</a></p>\n"},{"title":"android调用System.gc()有用么？","date":"2021-09-27T02:43:43.000Z","_content":"\n#### **结论**\n\n在Android中，仅调用System.gc(）并不起作用；\n\n若有需求，可采用方法：\n\n1. 直接调用`Runtime.getRuntime().gc()`\n2. 调用`System.runFinalization()`和`System.gc()`\n\n> 即使没有显式调用gc方法，虚拟机也会根据需要在单独的线程中自动执行此回收过程\n\n\n\n#### **源码分析**\n\n```java\n/**\n *\tSystem.gc(）源码\n *\t由此可见，真正起作用的是Runtime.getRuntime().gc()，\n *\t且仅当shouldRunGC=true时，才会执行；\n *\t而shouldRunGC的赋值取决于justRanFinaljuization\n */\npublic static void gc() {\n        boolean shouldRunGC;\n        synchronized (LOCK) {\n            shouldRunGC = justRanFinaljuization;\n            if (shouldRunGC) {\n                justRanFinalization = false;\n            } else {\n                runGC = true;\n            }\n        }\n        if (shouldRunGC) {\n            Runtime.getRuntime().gc();\n        }\n    }\n```\n\n```java\n/**\n *\tjustRanFinaljuization仅在runFinalization（）方法中赋值为true;\n *\t且runGC也仅在gc()方法中赋值为true\n * \t因此代码中仅调用System.gc()无用\n */\npublic static void runFinalization() {\n        boolean shouldRunGC;\n        synchronized (LOCK) {\n            shouldRunGC = runGC;\n            runGC = false;\n        }\n        if (shouldRunGC) {\n            Runtime.getRuntime().gc();\n        }\n        Runtime.getRuntime().runFinalization();\n        synchronized (LOCK) {\n            justRanFinalization = true;\n        }\n    }\n```\n","source":"_posts/android中的System-gc.md","raw":"---\ntitle: android调用System.gc()有用么？\ndate: 2021-09-27 10:43:43\ntags: Android\ncategories: Android\n\n---\n\n#### **结论**\n\n在Android中，仅调用System.gc(）并不起作用；\n\n若有需求，可采用方法：\n\n1. 直接调用`Runtime.getRuntime().gc()`\n2. 调用`System.runFinalization()`和`System.gc()`\n\n> 即使没有显式调用gc方法，虚拟机也会根据需要在单独的线程中自动执行此回收过程\n\n\n\n#### **源码分析**\n\n```java\n/**\n *\tSystem.gc(）源码\n *\t由此可见，真正起作用的是Runtime.getRuntime().gc()，\n *\t且仅当shouldRunGC=true时，才会执行；\n *\t而shouldRunGC的赋值取决于justRanFinaljuization\n */\npublic static void gc() {\n        boolean shouldRunGC;\n        synchronized (LOCK) {\n            shouldRunGC = justRanFinaljuization;\n            if (shouldRunGC) {\n                justRanFinalization = false;\n            } else {\n                runGC = true;\n            }\n        }\n        if (shouldRunGC) {\n            Runtime.getRuntime().gc();\n        }\n    }\n```\n\n```java\n/**\n *\tjustRanFinaljuization仅在runFinalization（）方法中赋值为true;\n *\t且runGC也仅在gc()方法中赋值为true\n * \t因此代码中仅调用System.gc()无用\n */\npublic static void runFinalization() {\n        boolean shouldRunGC;\n        synchronized (LOCK) {\n            shouldRunGC = runGC;\n            runGC = false;\n        }\n        if (shouldRunGC) {\n            Runtime.getRuntime().gc();\n        }\n        Runtime.getRuntime().runFinalization();\n        synchronized (LOCK) {\n            justRanFinalization = true;\n        }\n    }\n```\n","slug":"android中的System-gc","published":1,"updated":"2021-10-08T08:41:46.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepd00167wgs1zrh8qtd","content":"<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a><strong>结论</strong></h4><p>在Android中，仅调用System.gc(）并不起作用；</p>\n<p>若有需求，可采用方法：</p>\n<ol>\n<li>直接调用<code>Runtime.getRuntime().gc()</code></li>\n<li>调用<code>System.runFinalization()</code>和<code>System.gc()</code></li>\n</ol>\n<blockquote>\n<p>即使没有显式调用gc方法，虚拟机也会根据需要在单独的线程中自动执行此回收过程</p>\n</blockquote>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a><strong>源码分析</strong></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *\tSystem.gc(）源码</span></span><br><span class=\"line\"><span class=\"comment\"> *\t由此可见，真正起作用的是Runtime.getRuntime().gc()，</span></span><br><span class=\"line\"><span class=\"comment\"> *\t且仅当shouldRunGC=true时，才会执行；</span></span><br><span class=\"line\"><span class=\"comment\"> *\t而shouldRunGC的赋值取决于justRanFinaljuization</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> shouldRunGC;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LOCK) &#123;</span><br><span class=\"line\">            shouldRunGC = justRanFinaljuization;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldRunGC) &#123;</span><br><span class=\"line\">                justRanFinalization = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                runGC = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shouldRunGC) &#123;</span><br><span class=\"line\">            Runtime.getRuntime().gc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *\tjustRanFinaljuization仅在runFinalization（）方法中赋值为true;</span></span><br><span class=\"line\"><span class=\"comment\"> *\t且runGC也仅在gc()方法中赋值为true</span></span><br><span class=\"line\"><span class=\"comment\"> * \t因此代码中仅调用System.gc()无用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">runFinalization</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> shouldRunGC;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LOCK) &#123;</span><br><span class=\"line\">            shouldRunGC = runGC;</span><br><span class=\"line\">            runGC = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shouldRunGC) &#123;</span><br><span class=\"line\">            Runtime.getRuntime().gc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Runtime.getRuntime().runFinalization();</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LOCK) &#123;</span><br><span class=\"line\">            justRanFinalization = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a><strong>结论</strong></h4><p>在Android中，仅调用System.gc(）并不起作用；</p>\n<p>若有需求，可采用方法：</p>\n<ol>\n<li>直接调用<code>Runtime.getRuntime().gc()</code></li>\n<li>调用<code>System.runFinalization()</code>和<code>System.gc()</code></li>\n</ol>\n<blockquote>\n<p>即使没有显式调用gc方法，虚拟机也会根据需要在单独的线程中自动执行此回收过程</p>\n</blockquote>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a><strong>源码分析</strong></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *\tSystem.gc(）源码</span></span><br><span class=\"line\"><span class=\"comment\"> *\t由此可见，真正起作用的是Runtime.getRuntime().gc()，</span></span><br><span class=\"line\"><span class=\"comment\"> *\t且仅当shouldRunGC=true时，才会执行；</span></span><br><span class=\"line\"><span class=\"comment\"> *\t而shouldRunGC的赋值取决于justRanFinaljuization</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> shouldRunGC;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LOCK) &#123;</span><br><span class=\"line\">            shouldRunGC = justRanFinaljuization;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldRunGC) &#123;</span><br><span class=\"line\">                justRanFinalization = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                runGC = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shouldRunGC) &#123;</span><br><span class=\"line\">            Runtime.getRuntime().gc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *\tjustRanFinaljuization仅在runFinalization（）方法中赋值为true;</span></span><br><span class=\"line\"><span class=\"comment\"> *\t且runGC也仅在gc()方法中赋值为true</span></span><br><span class=\"line\"><span class=\"comment\"> * \t因此代码中仅调用System.gc()无用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">runFinalization</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> shouldRunGC;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LOCK) &#123;</span><br><span class=\"line\">            shouldRunGC = runGC;</span><br><span class=\"line\">            runGC = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shouldRunGC) &#123;</span><br><span class=\"line\">            Runtime.getRuntime().gc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Runtime.getRuntime().runFinalization();</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LOCK) &#123;</span><br><span class=\"line\">            justRanFinalization = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"git@github.com: Permission denied (publickey).","date":"2021-09-25T04:00:56.000Z","_content":"\n#### **问题描述**\n\n想通过命令删除远程分支 `git push origin --delete hexo` 时，出现\n\n```java\ncurry@MacBook-Pro blog % git push origin --delete hexo       \ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n#### **解决方法**\n\n1. `git config --global --list` 通过此命令查看全局邮箱是否与github注册的一致；\n\n   > 我这里不一致，因此需要执行第二部；若一直可以跳过\n\n2. `git config --global user.email \"邮箱\"` 通过此命令配置全局邮箱；\n\n   > 若用户名也想更改，执行`git config --global user.name \"xxx\"`\n\n3. `ssh-keygen -t rsa -C \"邮箱\"` 通过此命令生成ssh；\n\n   > 输入命令，一直回车即可；命令中会提示生成的文件路径；\n   >\n   > 例：Your public key has been saved in /Users/curry/.ssh/id_rsa.pub\n\n4. 将第三步骤中生成的id_rsa.pub文件其内容全部粘贴到github - Settings - SSH and GPG keys - New SSH Key中\n\n   ![image-20210925123231078](image-20210925123231078.png)\n\n5. 执行过以上步骤后，通常可以解决问题！\n\n6. 可以通过 `ssh -T git@github.com `  验证是否成功；若不成功，则执行（未出现，待验证）\n\n   ```\n   ssh-agent -s\n   ssh-add ~/.ssh/id_rsa\n   ```\n","source":"_posts/git-github-com-Permission-denied-publickey.md","raw":"---\ntitle: 'git@github.com: Permission denied (publickey).'\ndate: 2021-09-25 12:00:56\ntags: git\ncategories: git\n---\n\n#### **问题描述**\n\n想通过命令删除远程分支 `git push origin --delete hexo` 时，出现\n\n```java\ncurry@MacBook-Pro blog % git push origin --delete hexo       \ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n#### **解决方法**\n\n1. `git config --global --list` 通过此命令查看全局邮箱是否与github注册的一致；\n\n   > 我这里不一致，因此需要执行第二部；若一直可以跳过\n\n2. `git config --global user.email \"邮箱\"` 通过此命令配置全局邮箱；\n\n   > 若用户名也想更改，执行`git config --global user.name \"xxx\"`\n\n3. `ssh-keygen -t rsa -C \"邮箱\"` 通过此命令生成ssh；\n\n   > 输入命令，一直回车即可；命令中会提示生成的文件路径；\n   >\n   > 例：Your public key has been saved in /Users/curry/.ssh/id_rsa.pub\n\n4. 将第三步骤中生成的id_rsa.pub文件其内容全部粘贴到github - Settings - SSH and GPG keys - New SSH Key中\n\n   ![image-20210925123231078](image-20210925123231078.png)\n\n5. 执行过以上步骤后，通常可以解决问题！\n\n6. 可以通过 `ssh -T git@github.com `  验证是否成功；若不成功，则执行（未出现，待验证）\n\n   ```\n   ssh-agent -s\n   ssh-add ~/.ssh/id_rsa\n   ```\n","slug":"git-github-com-Permission-denied-publickey","published":1,"updated":"2021-10-08T08:41:46.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepf001b7wgs4hep9iz6","content":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a><strong>问题描述</strong></h4><p>想通过命令删除远程分支 <code>git push origin --delete hexo</code> 时，出现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curry<span class=\"meta\">@MacBook</span>-Pro blog % git push origin --delete hexo       </span><br><span class=\"line\">git<span class=\"meta\">@github</span>.com: <span class=\"function\">Permission <span class=\"title\">denied</span> <span class=\"params\">(publickey)</span>.</span></span><br><span class=\"line\"><span class=\"function\">fatal: Could not read from remote repository.</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Please make sure you have the correct access rights</span></span><br><span class=\"line\"><span class=\"function\">and the repository exists.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a><strong>解决方法</strong></h4><ol>\n<li><p><code>git config --global --list</code> 通过此命令查看全局邮箱是否与github注册的一致；</p>\n<blockquote>\n<p>我这里不一致，因此需要执行第二部；若一直可以跳过</p>\n</blockquote>\n</li>\n<li><p><code>git config --global user.email &quot;邮箱&quot;</code> 通过此命令配置全局邮箱；</p>\n<blockquote>\n<p>若用户名也想更改，执行<code>git config --global user.name &quot;xxx&quot;</code></p>\n</blockquote>\n</li>\n<li><p><code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code> 通过此命令生成ssh；</p>\n<blockquote>\n<p>输入命令，一直回车即可；命令中会提示生成的文件路径；</p>\n<p>例：Your public key has been saved in /Users/curry/.ssh/id_rsa.pub</p>\n</blockquote>\n</li>\n<li><p>将第三步骤中生成的id_rsa.pub文件其内容全部粘贴到github - Settings - SSH and GPG keys - New SSH Key中</p>\n<p><img src=\"/2021/09/25/git-github-com-Permission-denied-publickey/image-20210925123231078.png\" alt=\"image-20210925123231078\"></p>\n</li>\n<li><p>执行过以上步骤后，通常可以解决问题！</p>\n</li>\n<li><p>可以通过 <code>ssh -T git@github.com </code>  验证是否成功；若不成功，则执行（未出现，待验证）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent -s</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a><strong>问题描述</strong></h4><p>想通过命令删除远程分支 <code>git push origin --delete hexo</code> 时，出现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curry<span class=\"meta\">@MacBook</span>-Pro blog % git push origin --delete hexo       </span><br><span class=\"line\">git<span class=\"meta\">@github</span>.com: <span class=\"function\">Permission <span class=\"title\">denied</span> <span class=\"params\">(publickey)</span>.</span></span><br><span class=\"line\"><span class=\"function\">fatal: Could not read from remote repository.</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Please make sure you have the correct access rights</span></span><br><span class=\"line\"><span class=\"function\">and the repository exists.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a><strong>解决方法</strong></h4><ol>\n<li><p><code>git config --global --list</code> 通过此命令查看全局邮箱是否与github注册的一致；</p>\n<blockquote>\n<p>我这里不一致，因此需要执行第二部；若一直可以跳过</p>\n</blockquote>\n</li>\n<li><p><code>git config --global user.email &quot;邮箱&quot;</code> 通过此命令配置全局邮箱；</p>\n<blockquote>\n<p>若用户名也想更改，执行<code>git config --global user.name &quot;xxx&quot;</code></p>\n</blockquote>\n</li>\n<li><p><code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code> 通过此命令生成ssh；</p>\n<blockquote>\n<p>输入命令，一直回车即可；命令中会提示生成的文件路径；</p>\n<p>例：Your public key has been saved in /Users/curry/.ssh/id_rsa.pub</p>\n</blockquote>\n</li>\n<li><p>将第三步骤中生成的id_rsa.pub文件其内容全部粘贴到github - Settings - SSH and GPG keys - New SSH Key中</p>\n<p><img src=\"/2021/09/25/git-github-com-Permission-denied-publickey/image-20210925123231078.png\" alt=\"image-20210925123231078\"></p>\n</li>\n<li><p>执行过以上步骤后，通常可以解决问题！</p>\n</li>\n<li><p>可以通过 <code>ssh -T git@github.com </code>  验证是否成功；若不成功，则执行（未出现，待验证）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent -s</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"hexo YAMLException","date":"2021-09-24T07:00:22.000Z","_content":"\n保存准备发布文章时，提示如下报错：\n\n```\nERROR {\n  err: YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:\n...\n}\n```\n\n问题原因：**缺少空格**！\n\n```kotlin\n//错误示例（categories:hexo）\ntitle: hexo YAMLException\ndate: 2021-09-24 15:00:22\ntags: hexo\ncategories:hexo\n```\n\n```kotlin\n//正确示例（categories: hexo）\ntitle: hexo YAMLException\ndate: 2021-09-24 15:00:22\ntags: hexo\ncategories: hexo\n```\n\n\n\n[官方说明](https://hexo.io/zh-cn/docs/troubleshooting.html#YAML-%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF)\n\n![image-20210924151457951](image-20210924151457951.png)\n\n","source":"_posts/hexo-YAMLException.md","raw":"---\ntitle: hexo YAMLException\ndate: 2021-09-24 15:00:22\ntags: hexo\ncategories: hexo\n\n---\n\n保存准备发布文章时，提示如下报错：\n\n```\nERROR {\n  err: YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:\n...\n}\n```\n\n问题原因：**缺少空格**！\n\n```kotlin\n//错误示例（categories:hexo）\ntitle: hexo YAMLException\ndate: 2021-09-24 15:00:22\ntags: hexo\ncategories:hexo\n```\n\n```kotlin\n//正确示例（categories: hexo）\ntitle: hexo YAMLException\ndate: 2021-09-24 15:00:22\ntags: hexo\ncategories: hexo\n```\n\n\n\n[官方说明](https://hexo.io/zh-cn/docs/troubleshooting.html#YAML-%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF)\n\n![image-20210924151457951](image-20210924151457951.png)\n\n","slug":"hexo-YAMLException","published":1,"updated":"2021-10-08T08:41:46.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepg001e7wgsclda26ka","content":"<p>保存准备发布文章时，提示如下报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR &#123;</span><br><span class=\"line\">  err: YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题原因：<strong>缺少空格</strong>！</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误示例（categories:hexo）</span></span><br><span class=\"line\">title: hexo YAMLException</span><br><span class=\"line\">date: <span class=\"number\">2021</span>-09-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">00</span>:<span class=\"number\">22</span></span><br><span class=\"line\">tags: hexo</span><br><span class=\"line\">categories:hexo</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确示例（categories: hexo）</span></span><br><span class=\"line\">title: hexo YAMLException</span><br><span class=\"line\">date: <span class=\"number\">2021</span>-09-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">00</span>:<span class=\"number\">22</span></span><br><span class=\"line\">tags: hexo</span><br><span class=\"line\">categories: hexo</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a href=\"https://hexo.io/zh-cn/docs/troubleshooting.html#YAML-%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF\">官方说明</a></p>\n<p><img src=\"/2021/09/24/hexo-YAMLException/image-20210924151457951.png\" alt=\"image-20210924151457951\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>保存准备发布文章时，提示如下报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR &#123;</span><br><span class=\"line\">  err: YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题原因：<strong>缺少空格</strong>！</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误示例（categories:hexo）</span></span><br><span class=\"line\">title: hexo YAMLException</span><br><span class=\"line\">date: <span class=\"number\">2021</span>-09-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">00</span>:<span class=\"number\">22</span></span><br><span class=\"line\">tags: hexo</span><br><span class=\"line\">categories:hexo</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确示例（categories: hexo）</span></span><br><span class=\"line\">title: hexo YAMLException</span><br><span class=\"line\">date: <span class=\"number\">2021</span>-09-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">00</span>:<span class=\"number\">22</span></span><br><span class=\"line\">tags: hexo</span><br><span class=\"line\">categories: hexo</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a href=\"https://hexo.io/zh-cn/docs/troubleshooting.html#YAML-%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF\">官方说明</a></p>\n<p><img src=\"/2021/09/24/hexo-YAMLException/image-20210924151457951.png\" alt=\"image-20210924151457951\"></p>\n"},{"title":"hexo增加分类和标签","date":"2021-09-24T06:58:15.000Z","_content":"\n#### **创建“分类”选项**\n\n在hexo目录下，执行：\n\n```\nhexo new page categories\n```\n\nhexo\\source目录下会生成categories文件夹；编辑categories\\index.md，添加\ttype: \"categories\"；添加后保存并关闭文件。\n\n```\n---\ntitle: 分类\ndate: 2021-09-24 14:43:00\ntype: categories\n---\n```\n\n**给文章添加“categories”属性**\n\n打开需要添加分类的文章，为其添加categories属性。\n\n下方的categories:hexo表示这篇文章添加到到“hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。\n\n```\n---\ntitle: hexo增加分类和标签\ndate: 2021-09-24 14:43:00\ncategories: hexo\n---\n```\n\n\n\n#### **创建“标签”选项**（与添加分类操作类似）\n\n在hexo目录下，执行：\n\n```\nhexo new page tags\n```\n\nhexo\\source目录下会生成tags文件夹；编辑tags\\index.md，添加\ttype: \"tags\"；添加后保存并关闭文件。\n\n```\n---\ntitle: 标签\ndate: 2021-09-24 14:43:00\ntype: tags\n---\n```\n\n**给文章添加“tags”属性**\n\n打开需要添加标签的文章，为其添加tags属性。\n\n```\n---\ntitle: hexo增加分类和标签\ndate: 2019-04-24 15:40:24\ncategories: hexo\ntags: hexo\n---\n```\n\n**参考：**\n\nhttps://juejin.cn/post/6844903830216261645\n\n","source":"_posts/hexo增加分类和标签.md","raw":"---\ntitle: hexo增加分类和标签\ndate: 2021-09-24 14:58:15\ntags: hexo\ncategories: hexo\n---\n\n#### **创建“分类”选项**\n\n在hexo目录下，执行：\n\n```\nhexo new page categories\n```\n\nhexo\\source目录下会生成categories文件夹；编辑categories\\index.md，添加\ttype: \"categories\"；添加后保存并关闭文件。\n\n```\n---\ntitle: 分类\ndate: 2021-09-24 14:43:00\ntype: categories\n---\n```\n\n**给文章添加“categories”属性**\n\n打开需要添加分类的文章，为其添加categories属性。\n\n下方的categories:hexo表示这篇文章添加到到“hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。\n\n```\n---\ntitle: hexo增加分类和标签\ndate: 2021-09-24 14:43:00\ncategories: hexo\n---\n```\n\n\n\n#### **创建“标签”选项**（与添加分类操作类似）\n\n在hexo目录下，执行：\n\n```\nhexo new page tags\n```\n\nhexo\\source目录下会生成tags文件夹；编辑tags\\index.md，添加\ttype: \"tags\"；添加后保存并关闭文件。\n\n```\n---\ntitle: 标签\ndate: 2021-09-24 14:43:00\ntype: tags\n---\n```\n\n**给文章添加“tags”属性**\n\n打开需要添加标签的文章，为其添加tags属性。\n\n```\n---\ntitle: hexo增加分类和标签\ndate: 2019-04-24 15:40:24\ncategories: hexo\ntags: hexo\n---\n```\n\n**参考：**\n\nhttps://juejin.cn/post/6844903830216261645\n\n","slug":"hexo增加分类和标签","published":1,"updated":"2021-10-08T08:41:46.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4ieph001i7wgs20pc8fz7","content":"<h4 id=\"创建“分类”选项\"><a href=\"#创建“分类”选项\" class=\"headerlink\" title=\"创建“分类”选项\"></a><strong>创建“分类”选项</strong></h4><p>在hexo目录下，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>hexo\\source目录下会生成categories文件夹；编辑categories\\index.md，添加    type: “categories”；添加后保存并关闭文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分类</span><br><span class=\"line\">date: 2021-09-24 14:43:00</span><br><span class=\"line\">type: categories</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>给文章添加“categories”属性</strong></p>\n<p>打开需要添加分类的文章，为其添加categories属性。</p>\n<p>下方的categories:hexo表示这篇文章添加到到“hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hexo增加分类和标签</span><br><span class=\"line\">date: 2021-09-24 14:43:00</span><br><span class=\"line\">categories: hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建“标签”选项（与添加分类操作类似）\"><a href=\"#创建“标签”选项（与添加分类操作类似）\" class=\"headerlink\" title=\"创建“标签”选项（与添加分类操作类似）\"></a><strong>创建“标签”选项</strong>（与添加分类操作类似）</h4><p>在hexo目录下，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>hexo\\source目录下会生成tags文件夹；编辑tags\\index.md，添加    type: “tags”；添加后保存并关闭文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2021-09-24 14:43:00</span><br><span class=\"line\">type: tags</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>给文章添加“tags”属性</strong></p>\n<p>打开需要添加标签的文章，为其添加tags属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hexo增加分类和标签</span><br><span class=\"line\">date: 2019-04-24 15:40:24</span><br><span class=\"line\">categories: hexo</span><br><span class=\"line\">tags: hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>参考：</strong></p>\n<p><a href=\"https://juejin.cn/post/6844903830216261645\">https://juejin.cn/post/6844903830216261645</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"创建“分类”选项\"><a href=\"#创建“分类”选项\" class=\"headerlink\" title=\"创建“分类”选项\"></a><strong>创建“分类”选项</strong></h4><p>在hexo目录下，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>hexo\\source目录下会生成categories文件夹；编辑categories\\index.md，添加    type: “categories”；添加后保存并关闭文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分类</span><br><span class=\"line\">date: 2021-09-24 14:43:00</span><br><span class=\"line\">type: categories</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>给文章添加“categories”属性</strong></p>\n<p>打开需要添加分类的文章，为其添加categories属性。</p>\n<p>下方的categories:hexo表示这篇文章添加到到“hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hexo增加分类和标签</span><br><span class=\"line\">date: 2021-09-24 14:43:00</span><br><span class=\"line\">categories: hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建“标签”选项（与添加分类操作类似）\"><a href=\"#创建“标签”选项（与添加分类操作类似）\" class=\"headerlink\" title=\"创建“标签”选项（与添加分类操作类似）\"></a><strong>创建“标签”选项</strong>（与添加分类操作类似）</h4><p>在hexo目录下，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>hexo\\source目录下会生成tags文件夹；编辑tags\\index.md，添加    type: “tags”；添加后保存并关闭文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2021-09-24 14:43:00</span><br><span class=\"line\">type: tags</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>给文章添加“tags”属性</strong></p>\n<p>打开需要添加标签的文章，为其添加tags属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hexo增加分类和标签</span><br><span class=\"line\">date: 2019-04-24 15:40:24</span><br><span class=\"line\">categories: hexo</span><br><span class=\"line\">tags: hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>参考：</strong></p>\n<p><a href=\"https://juejin.cn/post/6844903830216261645\">https://juejin.cn/post/6844903830216261645</a></p>\n"},{"title":"hexo多电脑部署","date":"2021-09-25T02:33:30.000Z","_content":"\n> 当在办公室或家里都想输出文章，怎么办呢？\n\n在github已有仓库（xxx.github.io）中，新建分支（比如：命名为build分支），把已经创建的本地文件全部上传；\n\n这里可以把build作为默认分支（`新建的文章默认是提交到master分支上的`），这样每次有变更后，就如同提交代码一样，把本地文件提交到build上。\n\n在新的电脑上拉取build分支即可同步已经配置好的相关内容；\n\nclone到本地后，要确认相关环境是否都配置过，然后需要在clone的本地文件中执行 `npm install` 和 `npm install -g hexo` \n\n这样就可以继续输出文章啦~\n","source":"_posts/hexo多电脑部署.md","raw":"---\ntitle: hexo多电脑部署\ndate: 2021-09-25 10:33:30\ntags: hexo\ncategories: hexo\n\n---\n\n> 当在办公室或家里都想输出文章，怎么办呢？\n\n在github已有仓库（xxx.github.io）中，新建分支（比如：命名为build分支），把已经创建的本地文件全部上传；\n\n这里可以把build作为默认分支（`新建的文章默认是提交到master分支上的`），这样每次有变更后，就如同提交代码一样，把本地文件提交到build上。\n\n在新的电脑上拉取build分支即可同步已经配置好的相关内容；\n\nclone到本地后，要确认相关环境是否都配置过，然后需要在clone的本地文件中执行 `npm install` 和 `npm install -g hexo` \n\n这样就可以继续输出文章啦~\n","slug":"hexo多电脑部署","published":1,"updated":"2021-10-08T08:41:46.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepi001m7wgs1qkb2wia","content":"<blockquote>\n<p>当在办公室或家里都想输出文章，怎么办呢？</p>\n</blockquote>\n<p>在github已有仓库（xxx.github.io）中，新建分支（比如：命名为build分支），把已经创建的本地文件全部上传；</p>\n<p>这里可以把build作为默认分支（<code>新建的文章默认是提交到master分支上的</code>），这样每次有变更后，就如同提交代码一样，把本地文件提交到build上。</p>\n<p>在新的电脑上拉取build分支即可同步已经配置好的相关内容；</p>\n<p>clone到本地后，要确认相关环境是否都配置过，然后需要在clone的本地文件中执行 <code>npm install</code> 和 <code>npm install -g hexo</code> </p>\n<p>这样就可以继续输出文章啦~</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>当在办公室或家里都想输出文章，怎么办呢？</p>\n</blockquote>\n<p>在github已有仓库（xxx.github.io）中，新建分支（比如：命名为build分支），把已经创建的本地文件全部上传；</p>\n<p>这里可以把build作为默认分支（<code>新建的文章默认是提交到master分支上的</code>），这样每次有变更后，就如同提交代码一样，把本地文件提交到build上。</p>\n<p>在新的电脑上拉取build分支即可同步已经配置好的相关内容；</p>\n<p>clone到本地后，要确认相关环境是否都配置过，然后需要在clone的本地文件中执行 <code>npm install</code> 和 <code>npm install -g hexo</code> </p>\n<p>这样就可以继续输出文章啦~</p>\n"},{"title":"事件分发","date":"2021-11-08T07:38:05.000Z","_content":"\n\n\n1. 首先，要知道事件包含：按下，抬起，移动，取消；这也就是对应着MotionEvent中的ACTION_DOWN、ACTION_UP、ACTION_MOVE、ACTION_CANCEL...\n2. 其次，要知道分发，是在Activity、ViewGroup、View之间进行；\n3. 最后涉及到的主要方法：`dispatchTouchEvent（）、onTouchEvent（）、onInterceptTouchEvent（）`\n\n> onInterceptTouchEvent为ViewGroup独有的方法\n\n\n\n\n\n项目中实例：\n\n1. 当有屏幕上有触摸时，不能回到空闲状态，重写onTouchEvent（）判断ACTION_DOWN\\ACTION_MOVE状态 以及ACITON_UP\\ACTION_CANCEL\n2. 按钮按下抬起效果\n\n\n\n\n\n\n\nhttps://blog.csdn.net/A_pyf/article/details/113392655\n\nhttps://www.jianshu.com/p/1ac8d469f014\n\nhttps://juejin.cn/post/6844903991483039751\n\nhttps://www.jianshu.com/p/e99b5e8bd67b\n","source":"_posts/事件分发.md","raw":"---\ntitle: 事件分发\ndate: 2021-11-08 15:38:05\ntags: Android\ncategories: Android\n\n---\n\n\n\n1. 首先，要知道事件包含：按下，抬起，移动，取消；这也就是对应着MotionEvent中的ACTION_DOWN、ACTION_UP、ACTION_MOVE、ACTION_CANCEL...\n2. 其次，要知道分发，是在Activity、ViewGroup、View之间进行；\n3. 最后涉及到的主要方法：`dispatchTouchEvent（）、onTouchEvent（）、onInterceptTouchEvent（）`\n\n> onInterceptTouchEvent为ViewGroup独有的方法\n\n\n\n\n\n项目中实例：\n\n1. 当有屏幕上有触摸时，不能回到空闲状态，重写onTouchEvent（）判断ACTION_DOWN\\ACTION_MOVE状态 以及ACITON_UP\\ACTION_CANCEL\n2. 按钮按下抬起效果\n\n\n\n\n\n\n\nhttps://blog.csdn.net/A_pyf/article/details/113392655\n\nhttps://www.jianshu.com/p/1ac8d469f014\n\nhttps://juejin.cn/post/6844903991483039751\n\nhttps://www.jianshu.com/p/e99b5e8bd67b\n","slug":"事件分发","published":1,"updated":"2021-11-09T06:47:20.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepk001q7wgs4pwf93lj","content":"<ol>\n<li>首先，要知道事件包含：按下，抬起，移动，取消；这也就是对应着MotionEvent中的ACTION_DOWN、ACTION_UP、ACTION_MOVE、ACTION_CANCEL…</li>\n<li>其次，要知道分发，是在Activity、ViewGroup、View之间进行；</li>\n<li>最后涉及到的主要方法：<code>dispatchTouchEvent（）、onTouchEvent（）、onInterceptTouchEvent（）</code></li>\n</ol>\n<blockquote>\n<p>onInterceptTouchEvent为ViewGroup独有的方法</p>\n</blockquote>\n<p>项目中实例：</p>\n<ol>\n<li>当有屏幕上有触摸时，不能回到空闲状态，重写onTouchEvent（）判断ACTION_DOWN\\ACTION_MOVE状态 以及ACITON_UP\\ACTION_CANCEL</li>\n<li>按钮按下抬起效果</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/A_pyf/article/details/113392655\">https://blog.csdn.net/A_pyf/article/details/113392655</a></p>\n<p><a href=\"https://www.jianshu.com/p/1ac8d469f014\">https://www.jianshu.com/p/1ac8d469f014</a></p>\n<p><a href=\"https://juejin.cn/post/6844903991483039751\">https://juejin.cn/post/6844903991483039751</a></p>\n<p><a href=\"https://www.jianshu.com/p/e99b5e8bd67b\">https://www.jianshu.com/p/e99b5e8bd67b</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>首先，要知道事件包含：按下，抬起，移动，取消；这也就是对应着MotionEvent中的ACTION_DOWN、ACTION_UP、ACTION_MOVE、ACTION_CANCEL…</li>\n<li>其次，要知道分发，是在Activity、ViewGroup、View之间进行；</li>\n<li>最后涉及到的主要方法：<code>dispatchTouchEvent（）、onTouchEvent（）、onInterceptTouchEvent（）</code></li>\n</ol>\n<blockquote>\n<p>onInterceptTouchEvent为ViewGroup独有的方法</p>\n</blockquote>\n<p>项目中实例：</p>\n<ol>\n<li>当有屏幕上有触摸时，不能回到空闲状态，重写onTouchEvent（）判断ACTION_DOWN\\ACTION_MOVE状态 以及ACITON_UP\\ACTION_CANCEL</li>\n<li>按钮按下抬起效果</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/A_pyf/article/details/113392655\">https://blog.csdn.net/A_pyf/article/details/113392655</a></p>\n<p><a href=\"https://www.jianshu.com/p/1ac8d469f014\">https://www.jianshu.com/p/1ac8d469f014</a></p>\n<p><a href=\"https://juejin.cn/post/6844903991483039751\">https://juejin.cn/post/6844903991483039751</a></p>\n<p><a href=\"https://www.jianshu.com/p/e99b5e8bd67b\">https://www.jianshu.com/p/e99b5e8bd67b</a></p>\n"},{"title":"rn入门","date":"2021-10-13T01:43:44.000Z","_content":"### **环境搭建**\n\n```\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nCould not determine the dependencies of task ':app:compileDebugJavaWithJavac'.\n> Failed to install the following Android SDK packages as some licences have not been accepted.\n     patcher;v4 SDK Patch Applier v4\n     emulator Android Emulator\n     platforms;android-30 Android SDK Platform 30\n     build-tools;30.0.2 Android SDK Build-Tools 30.0.2\n     tools Android SDK Tools\n  To build this project, accept the SDK license agreements and install the missing components using the Android Studio SDK Manager.\n  Alternatively, to transfer the license agreements from one workstation to another, see http://d.android.com/r/studio-ui/export-licenses.html\n\n  Using Android SDK: C:\\android_sdk\\platform-tools\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\n\n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 28s\n\nerror Failed to install the app. Please accept all necessary Android SDK licenses using Android SDK Manager: \"$ANDROID_HOME/tools/bin/sdkmanager --licenses\".\nError: Command failed: gradlew.bat app:installDebug -PreactNativeDevServerPort=8081\n\n```\n\n经检查是环境变量配置有问题，导致找不到对应的路径；\n可以参考[官方文档](https://www.react-native.cn/docs/environment-setup)","source":"_posts/rn入门.md","raw":"title: rn入门\ntags: RN\ncategories: RN\ndate: 2021-10-13 09:43:44\n---\n### **环境搭建**\n\n```\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nCould not determine the dependencies of task ':app:compileDebugJavaWithJavac'.\n> Failed to install the following Android SDK packages as some licences have not been accepted.\n     patcher;v4 SDK Patch Applier v4\n     emulator Android Emulator\n     platforms;android-30 Android SDK Platform 30\n     build-tools;30.0.2 Android SDK Build-Tools 30.0.2\n     tools Android SDK Tools\n  To build this project, accept the SDK license agreements and install the missing components using the Android Studio SDK Manager.\n  Alternatively, to transfer the license agreements from one workstation to another, see http://d.android.com/r/studio-ui/export-licenses.html\n\n  Using Android SDK: C:\\android_sdk\\platform-tools\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\n\n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 28s\n\nerror Failed to install the app. Please accept all necessary Android SDK licenses using Android SDK Manager: \"$ANDROID_HOME/tools/bin/sdkmanager --licenses\".\nError: Command failed: gradlew.bat app:installDebug -PreactNativeDevServerPort=8081\n\n```\n\n经检查是环境变量配置有问题，导致找不到对应的路径；\n可以参考[官方文档](https://www.react-native.cn/docs/environment-setup)","slug":"rn入门","published":1,"updated":"2021-10-22T01:43:49.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepo001u7wgs6vsv5st3","content":"<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a><strong>环境搭建</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FAILURE: Build failed with an exception.</span><br><span class=\"line\"></span><br><span class=\"line\">* What went wrong:</span><br><span class=\"line\">Could not determine the dependencies of task &#x27;:app:compileDebugJavaWithJavac&#x27;.</span><br><span class=\"line\">&gt; Failed to install the following Android SDK packages as some licences have not been accepted.</span><br><span class=\"line\">     patcher;v4 SDK Patch Applier v4</span><br><span class=\"line\">     emulator Android Emulator</span><br><span class=\"line\">     platforms;android-30 Android SDK Platform 30</span><br><span class=\"line\">     build-tools;30.0.2 Android SDK Build-Tools 30.0.2</span><br><span class=\"line\">     tools Android SDK Tools</span><br><span class=\"line\">  To build this project, accept the SDK license agreements and install the missing components using the Android Studio SDK Manager.</span><br><span class=\"line\">  Alternatively, to transfer the license agreements from one workstation to another, see http://d.android.com/r/studio-ui/export-licenses.html</span><br><span class=\"line\"></span><br><span class=\"line\">  Using Android SDK: C:\\android_sdk\\platform-tools</span><br><span class=\"line\"></span><br><span class=\"line\">* Try:</span><br><span class=\"line\">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.</span><br><span class=\"line\"></span><br><span class=\"line\">* Get more help at https://help.gradle.org</span><br><span class=\"line\"></span><br><span class=\"line\">BUILD FAILED in 28s</span><br><span class=\"line\"></span><br><span class=\"line\">error Failed to install the app. Please accept all necessary Android SDK licenses using Android SDK Manager: &quot;$ANDROID_HOME/tools/bin/sdkmanager --licenses&quot;.</span><br><span class=\"line\">Error: Command failed: gradlew.bat app:installDebug -PreactNativeDevServerPort=8081</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>经检查是环境变量配置有问题，导致找不到对应的路径；<br>可以参考<a href=\"https://www.react-native.cn/docs/environment-setup\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a><strong>环境搭建</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FAILURE: Build failed with an exception.</span><br><span class=\"line\"></span><br><span class=\"line\">* What went wrong:</span><br><span class=\"line\">Could not determine the dependencies of task &#x27;:app:compileDebugJavaWithJavac&#x27;.</span><br><span class=\"line\">&gt; Failed to install the following Android SDK packages as some licences have not been accepted.</span><br><span class=\"line\">     patcher;v4 SDK Patch Applier v4</span><br><span class=\"line\">     emulator Android Emulator</span><br><span class=\"line\">     platforms;android-30 Android SDK Platform 30</span><br><span class=\"line\">     build-tools;30.0.2 Android SDK Build-Tools 30.0.2</span><br><span class=\"line\">     tools Android SDK Tools</span><br><span class=\"line\">  To build this project, accept the SDK license agreements and install the missing components using the Android Studio SDK Manager.</span><br><span class=\"line\">  Alternatively, to transfer the license agreements from one workstation to another, see http://d.android.com/r/studio-ui/export-licenses.html</span><br><span class=\"line\"></span><br><span class=\"line\">  Using Android SDK: C:\\android_sdk\\platform-tools</span><br><span class=\"line\"></span><br><span class=\"line\">* Try:</span><br><span class=\"line\">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.</span><br><span class=\"line\"></span><br><span class=\"line\">* Get more help at https://help.gradle.org</span><br><span class=\"line\"></span><br><span class=\"line\">BUILD FAILED in 28s</span><br><span class=\"line\"></span><br><span class=\"line\">error Failed to install the app. Please accept all necessary Android SDK licenses using Android SDK Manager: &quot;$ANDROID_HOME/tools/bin/sdkmanager --licenses&quot;.</span><br><span class=\"line\">Error: Command failed: gradlew.bat app:installDebug -PreactNativeDevServerPort=8081</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>经检查是环境变量配置有问题，导致找不到对应的路径；<br>可以参考<a href=\"https://www.react-native.cn/docs/environment-setup\">官方文档</a></p>\n"},{"title":"协程","date":"2021-10-26T07:39:49.000Z","_content":"\n> 定义新协程的范围。 每个协程构建器（如launch 、 async等）都是CoroutineScope的扩展，并继承其coroutineContext以自动传播其所有元素和取消。\n> 获得作用域独立实例的最佳方法是CoroutineScope()和MainScope()工厂函数，注意在不再需要这些协程作用域时取消它们（有关解释和示例，请参阅下面的自定义用法部分）。\n> 可以使用加号运算符将其他上下文元素附加到范围。\n> 结构化并发约定\n> 不建议手动实现此接口，应首选委托实现。 按照惯例，范围的上下文应该包含一个作业的实例，以通过取消传播来强制执行结构化并发的纪律。\n> 每个协程构建器（如launch 、 async等）和每个作用域函数（如coroutineScope 、 withContext等）都将自己的作用域和自己的Job实例提供到它运行的内部代码块中。 按照惯例，它们都等待其块内的所有协程完成，然后再完成自己，从而强制执行结构化并发。 有关更多详细信息，请参阅作业文档。\n> 安卓使用\n> Android 对具有生命周期的所有实体中的协程范围提供第一方支持。 请参阅相应的文档 。\n> 自定义用法\n> CoroutineScope应声明为实体的属性，该实体具有明确定义的生命周期，负责启动子协程。 CoroutineScope的相应实例应使用CoroutineScope()或MainScope()函数创建。 它们之间的区别仅在于CoroutineDispatcher ：\n> CoroutineScope()使用Dispatchers.Default作为其协程。\n> MainScope()使用Dispatchers.Main作为其协程。\n> CustomScope自定义使用的关键部分是取消它和生命周期的结束。 当不再需要启动协程的实体时，应使用CoroutineScope.cancel扩展函数。 它取消了所有可能仍在代表它运行的协程。\n\n简单介绍\n\nKotlin 中的协程：本质上，协程是轻量级的线程（官方说法）。协程就是 Kotlin 提供的一套线程封装的 API；是一个线程框架；\n\n```kotlin\nCoroutineScope\nGlobalScope//它的生命周期会和 app 一致，且不能取消\nMainScope\nlifecycleScope(LifecycleCoroutineScope)\nviewModelScope\nlaunch{}\nContinuation\nCoroutineContext\nrunBlocking{}//线程阻塞的\nwithContext{}\nsuspend\n```\n\n```kotlin\nCoroutineScope(Dispatchers.IO).launch { ... }\n```\n\n\n\n协程的优势：\n\n- 基于kotlin，更方便；\n\n- 用看起来同步的方式写出异步的代码（`非阻塞式挂起`）\n\n- 更方便处理并发任务（多线程），实现复杂的业务逻辑\n\n- 同一个代码块内，实现线程切换\n\n  \n\n在 Kotlin 中有这样一个语法糖：当函数的最后一个参数是 lambda 表达式时，可以将 lambda 写在括号外。这就是它的闭包原则。\n\n\n\n协程原理\n\n协程并发怎么处理，多个协程怎么保证数据安全\n\n协程lanuch有哪些参数\n\n```kotlin\n/**\n *\n在不阻塞当前线程的情况下启动一个新的协程，并将对协程的引用作为Job 返回。 当结果作业被取消时，协同程序被取消。\n协程上下文继承自CoroutineScope 。 可以使用上下文参数指定其他上下文元素。 如果上下文没有任何调度程序或任何其他ContinuationInterceptor ，则使用Dispatchers.Default 。 父作业也从CoroutineScope继承，但也可以用相应的上下文元素覆盖。\n默认情况下，协程会立即安排执行。 可以通过start参数指定其他启动选项。 有关详细信息，请参阅CoroutineStart 。 一个可选的启动参数可以设置为CoroutineStart.LAZY以延迟启动协程。 在这种情况下，协程Job以新状态创建。 它可以用start函数显式启动，并在第一次调用join 时隐式启动。\n该协程中的未捕获异常默认取消上下文中的父作业（除非明确指定CoroutineExceptionHandler ），这意味着当launch与另一个协程的上下文一起使用时，任何未捕获的异常都会导致父协程的取消。\n有关可用于新创建的协程的调试工具的描述，请参阅newCoroutineContext 。\n参数：\ncontext - 附加到CoroutineScope.coroutineContext协程的上下文。\nstart - 协程启动选项。 默认值为CoroutineStart.DEFAULT 。\nblock - 将在提供的范围的上下文中调用的协程代码\n **/\npublic fun CoroutineScope.launch(\n    context: CoroutineContext = EmptyCoroutineContext,\n    start: CoroutineStart = CoroutineStart.DEFAULT,\n    block: suspend CoroutineScope.() -> Unit\n): Job {\n    val newContext = newCoroutineContext(context)\n    val coroutine = if (start.isLazy)\n        LazyStandaloneCoroutine(newContext, block) else\n        StandaloneCoroutine(newContext, active = true)\n    coroutine.start(start, coroutine, block)\n    return coroutine\n}\n```\n\n\n\n\n\n#### ***挂起函数*** \n\n它不会造成线程阻塞，但是会 *挂起* 协程，并且只能在协程中使用\n\n协程内的`delay(timeMillis: Long)`也是一个挂起函数，由suspend修饰\n\n协程挂起和恢复的实现方式\n\n\n\nhttps://www.kotlincn.net/docs/reference/coroutines/basics.html\n\nhttps://github.com/Kotlin-zh/KEEP/blob/master/proposals/coroutines.md#%E5%8D%8F%E7%A8%8B%E6%A6%82%E8%BF%B0\n\nhttps://www.jianshu.com/p/92be626c594b\n","source":"_posts/协程.md","raw":"---\ntitle: 协程\ndate: 2021-10-26 15:39:49\ntags: Android\ncategories: Android\n\n---\n\n> 定义新协程的范围。 每个协程构建器（如launch 、 async等）都是CoroutineScope的扩展，并继承其coroutineContext以自动传播其所有元素和取消。\n> 获得作用域独立实例的最佳方法是CoroutineScope()和MainScope()工厂函数，注意在不再需要这些协程作用域时取消它们（有关解释和示例，请参阅下面的自定义用法部分）。\n> 可以使用加号运算符将其他上下文元素附加到范围。\n> 结构化并发约定\n> 不建议手动实现此接口，应首选委托实现。 按照惯例，范围的上下文应该包含一个作业的实例，以通过取消传播来强制执行结构化并发的纪律。\n> 每个协程构建器（如launch 、 async等）和每个作用域函数（如coroutineScope 、 withContext等）都将自己的作用域和自己的Job实例提供到它运行的内部代码块中。 按照惯例，它们都等待其块内的所有协程完成，然后再完成自己，从而强制执行结构化并发。 有关更多详细信息，请参阅作业文档。\n> 安卓使用\n> Android 对具有生命周期的所有实体中的协程范围提供第一方支持。 请参阅相应的文档 。\n> 自定义用法\n> CoroutineScope应声明为实体的属性，该实体具有明确定义的生命周期，负责启动子协程。 CoroutineScope的相应实例应使用CoroutineScope()或MainScope()函数创建。 它们之间的区别仅在于CoroutineDispatcher ：\n> CoroutineScope()使用Dispatchers.Default作为其协程。\n> MainScope()使用Dispatchers.Main作为其协程。\n> CustomScope自定义使用的关键部分是取消它和生命周期的结束。 当不再需要启动协程的实体时，应使用CoroutineScope.cancel扩展函数。 它取消了所有可能仍在代表它运行的协程。\n\n简单介绍\n\nKotlin 中的协程：本质上，协程是轻量级的线程（官方说法）。协程就是 Kotlin 提供的一套线程封装的 API；是一个线程框架；\n\n```kotlin\nCoroutineScope\nGlobalScope//它的生命周期会和 app 一致，且不能取消\nMainScope\nlifecycleScope(LifecycleCoroutineScope)\nviewModelScope\nlaunch{}\nContinuation\nCoroutineContext\nrunBlocking{}//线程阻塞的\nwithContext{}\nsuspend\n```\n\n```kotlin\nCoroutineScope(Dispatchers.IO).launch { ... }\n```\n\n\n\n协程的优势：\n\n- 基于kotlin，更方便；\n\n- 用看起来同步的方式写出异步的代码（`非阻塞式挂起`）\n\n- 更方便处理并发任务（多线程），实现复杂的业务逻辑\n\n- 同一个代码块内，实现线程切换\n\n  \n\n在 Kotlin 中有这样一个语法糖：当函数的最后一个参数是 lambda 表达式时，可以将 lambda 写在括号外。这就是它的闭包原则。\n\n\n\n协程原理\n\n协程并发怎么处理，多个协程怎么保证数据安全\n\n协程lanuch有哪些参数\n\n```kotlin\n/**\n *\n在不阻塞当前线程的情况下启动一个新的协程，并将对协程的引用作为Job 返回。 当结果作业被取消时，协同程序被取消。\n协程上下文继承自CoroutineScope 。 可以使用上下文参数指定其他上下文元素。 如果上下文没有任何调度程序或任何其他ContinuationInterceptor ，则使用Dispatchers.Default 。 父作业也从CoroutineScope继承，但也可以用相应的上下文元素覆盖。\n默认情况下，协程会立即安排执行。 可以通过start参数指定其他启动选项。 有关详细信息，请参阅CoroutineStart 。 一个可选的启动参数可以设置为CoroutineStart.LAZY以延迟启动协程。 在这种情况下，协程Job以新状态创建。 它可以用start函数显式启动，并在第一次调用join 时隐式启动。\n该协程中的未捕获异常默认取消上下文中的父作业（除非明确指定CoroutineExceptionHandler ），这意味着当launch与另一个协程的上下文一起使用时，任何未捕获的异常都会导致父协程的取消。\n有关可用于新创建的协程的调试工具的描述，请参阅newCoroutineContext 。\n参数：\ncontext - 附加到CoroutineScope.coroutineContext协程的上下文。\nstart - 协程启动选项。 默认值为CoroutineStart.DEFAULT 。\nblock - 将在提供的范围的上下文中调用的协程代码\n **/\npublic fun CoroutineScope.launch(\n    context: CoroutineContext = EmptyCoroutineContext,\n    start: CoroutineStart = CoroutineStart.DEFAULT,\n    block: suspend CoroutineScope.() -> Unit\n): Job {\n    val newContext = newCoroutineContext(context)\n    val coroutine = if (start.isLazy)\n        LazyStandaloneCoroutine(newContext, block) else\n        StandaloneCoroutine(newContext, active = true)\n    coroutine.start(start, coroutine, block)\n    return coroutine\n}\n```\n\n\n\n\n\n#### ***挂起函数*** \n\n它不会造成线程阻塞，但是会 *挂起* 协程，并且只能在协程中使用\n\n协程内的`delay(timeMillis: Long)`也是一个挂起函数，由suspend修饰\n\n协程挂起和恢复的实现方式\n\n\n\nhttps://www.kotlincn.net/docs/reference/coroutines/basics.html\n\nhttps://github.com/Kotlin-zh/KEEP/blob/master/proposals/coroutines.md#%E5%8D%8F%E7%A8%8B%E6%A6%82%E8%BF%B0\n\nhttps://www.jianshu.com/p/92be626c594b\n","slug":"协程","published":1,"updated":"2021-10-29T07:06:13.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepp001x7wgs44xi0oqo","content":"<blockquote>\n<p>定义新协程的范围。 每个协程构建器（如launch 、 async等）都是CoroutineScope的扩展，并继承其coroutineContext以自动传播其所有元素和取消。<br>获得作用域独立实例的最佳方法是CoroutineScope()和MainScope()工厂函数，注意在不再需要这些协程作用域时取消它们（有关解释和示例，请参阅下面的自定义用法部分）。<br>可以使用加号运算符将其他上下文元素附加到范围。<br>结构化并发约定<br>不建议手动实现此接口，应首选委托实现。 按照惯例，范围的上下文应该包含一个作业的实例，以通过取消传播来强制执行结构化并发的纪律。<br>每个协程构建器（如launch 、 async等）和每个作用域函数（如coroutineScope 、 withContext等）都将自己的作用域和自己的Job实例提供到它运行的内部代码块中。 按照惯例，它们都等待其块内的所有协程完成，然后再完成自己，从而强制执行结构化并发。 有关更多详细信息，请参阅作业文档。<br>安卓使用<br>Android 对具有生命周期的所有实体中的协程范围提供第一方支持。 请参阅相应的文档 。<br>自定义用法<br>CoroutineScope应声明为实体的属性，该实体具有明确定义的生命周期，负责启动子协程。 CoroutineScope的相应实例应使用CoroutineScope()或MainScope()函数创建。 它们之间的区别仅在于CoroutineDispatcher ：<br>CoroutineScope()使用Dispatchers.Default作为其协程。<br>MainScope()使用Dispatchers.Main作为其协程。<br>CustomScope自定义使用的关键部分是取消它和生命周期的结束。 当不再需要启动协程的实体时，应使用CoroutineScope.cancel扩展函数。 它取消了所有可能仍在代表它运行的协程。</p>\n</blockquote>\n<p>简单介绍</p>\n<p>Kotlin 中的协程：本质上，协程是轻量级的线程（官方说法）。协程就是 Kotlin 提供的一套线程封装的 API；是一个线程框架；</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CoroutineScope</span><br><span class=\"line\">GlobalScope<span class=\"comment\">//它的生命周期会和 app 一致，且不能取消</span></span><br><span class=\"line\">MainScope</span><br><span class=\"line\">lifecycleScope(LifecycleCoroutineScope)</span><br><span class=\"line\">viewModelScope</span><br><span class=\"line\">launch&#123;&#125;</span><br><span class=\"line\">Continuation</span><br><span class=\"line\">CoroutineContext</span><br><span class=\"line\">runBlocking&#123;&#125;<span class=\"comment\">//线程阻塞的</span></span><br><span class=\"line\">withContext&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">suspend</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CoroutineScope(Dispatchers.IO).launch &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>协程的优势：</p>\n<ul>\n<li><p>基于kotlin，更方便；</p>\n</li>\n<li><p>用看起来同步的方式写出异步的代码（<code>非阻塞式挂起</code>）</p>\n</li>\n<li><p>更方便处理并发任务（多线程），实现复杂的业务逻辑</p>\n</li>\n<li><p>同一个代码块内，实现线程切换</p>\n</li>\n</ul>\n<p>在 Kotlin 中有这样一个语法糖：当函数的最后一个参数是 lambda 表达式时，可以将 lambda 写在括号外。这就是它的闭包原则。</p>\n<p>协程原理</p>\n<p>协程并发怎么处理，多个协程怎么保证数据安全</p>\n<p>协程lanuch有哪些参数</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\">在不阻塞当前线程的情况下启动一个新的协程，并将对协程的引用作为Job 返回。 当结果作业被取消时，协同程序被取消。</span></span><br><span class=\"line\"><span class=\"comment\">协程上下文继承自CoroutineScope 。 可以使用上下文参数指定其他上下文元素。 如果上下文没有任何调度程序或任何其他ContinuationInterceptor ，则使用Dispatchers.Default 。 父作业也从CoroutineScope继承，但也可以用相应的上下文元素覆盖。</span></span><br><span class=\"line\"><span class=\"comment\">默认情况下，协程会立即安排执行。 可以通过start参数指定其他启动选项。 有关详细信息，请参阅CoroutineStart 。 一个可选的启动参数可以设置为CoroutineStart.LAZY以延迟启动协程。 在这种情况下，协程Job以新状态创建。 它可以用start函数显式启动，并在第一次调用join 时隐式启动。</span></span><br><span class=\"line\"><span class=\"comment\">该协程中的未捕获异常默认取消上下文中的父作业（除非明确指定CoroutineExceptionHandler ），这意味着当launch与另一个协程的上下文一起使用时，任何未捕获的异常都会导致父协程的取消。</span></span><br><span class=\"line\"><span class=\"comment\">有关可用于新创建的协程的调试工具的描述，请参阅newCoroutineContext 。</span></span><br><span class=\"line\"><span class=\"comment\">参数：</span></span><br><span class=\"line\"><span class=\"comment\">context - 附加到CoroutineScope.coroutineContext协程的上下文。</span></span><br><span class=\"line\"><span class=\"comment\">start - 协程启动选项。 默认值为CoroutineStart.DEFAULT 。</span></span><br><span class=\"line\"><span class=\"comment\">block - 将在提供的范围的上下文中调用的协程代码</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> CoroutineScope.<span class=\"title\">launch</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    context: <span class=\"type\">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    start: <span class=\"type\">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    block: <span class=\"type\">suspend</span> <span class=\"type\">CoroutineScope</span>.() -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>: Job &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> newContext = newCoroutineContext(context)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> coroutine = <span class=\"keyword\">if</span> (start.isLazy)</span><br><span class=\"line\">        LazyStandaloneCoroutine(newContext, block) <span class=\"keyword\">else</span></span><br><span class=\"line\">        StandaloneCoroutine(newContext, active = <span class=\"literal\">true</span>)</span><br><span class=\"line\">    coroutine.start(start, coroutine, block)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> coroutine</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"挂起函数\"><a href=\"#挂起函数\" class=\"headerlink\" title=\"挂起函数\"></a><em><strong>挂起函数</strong></em></h4><p>它不会造成线程阻塞，但是会 <em>挂起</em> 协程，并且只能在协程中使用</p>\n<p>协程内的<code>delay(timeMillis: Long)</code>也是一个挂起函数，由suspend修饰</p>\n<p>协程挂起和恢复的实现方式</p>\n<p><a href=\"https://www.kotlincn.net/docs/reference/coroutines/basics.html\">https://www.kotlincn.net/docs/reference/coroutines/basics.html</a></p>\n<p><a href=\"https://github.com/Kotlin-zh/KEEP/blob/master/proposals/coroutines.md#%E5%8D%8F%E7%A8%8B%E6%A6%82%E8%BF%B0\">https://github.com/Kotlin-zh/KEEP/blob/master/proposals/coroutines.md#%E5%8D%8F%E7%A8%8B%E6%A6%82%E8%BF%B0</a></p>\n<p><a href=\"https://www.jianshu.com/p/92be626c594b\">https://www.jianshu.com/p/92be626c594b</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>定义新协程的范围。 每个协程构建器（如launch 、 async等）都是CoroutineScope的扩展，并继承其coroutineContext以自动传播其所有元素和取消。<br>获得作用域独立实例的最佳方法是CoroutineScope()和MainScope()工厂函数，注意在不再需要这些协程作用域时取消它们（有关解释和示例，请参阅下面的自定义用法部分）。<br>可以使用加号运算符将其他上下文元素附加到范围。<br>结构化并发约定<br>不建议手动实现此接口，应首选委托实现。 按照惯例，范围的上下文应该包含一个作业的实例，以通过取消传播来强制执行结构化并发的纪律。<br>每个协程构建器（如launch 、 async等）和每个作用域函数（如coroutineScope 、 withContext等）都将自己的作用域和自己的Job实例提供到它运行的内部代码块中。 按照惯例，它们都等待其块内的所有协程完成，然后再完成自己，从而强制执行结构化并发。 有关更多详细信息，请参阅作业文档。<br>安卓使用<br>Android 对具有生命周期的所有实体中的协程范围提供第一方支持。 请参阅相应的文档 。<br>自定义用法<br>CoroutineScope应声明为实体的属性，该实体具有明确定义的生命周期，负责启动子协程。 CoroutineScope的相应实例应使用CoroutineScope()或MainScope()函数创建。 它们之间的区别仅在于CoroutineDispatcher ：<br>CoroutineScope()使用Dispatchers.Default作为其协程。<br>MainScope()使用Dispatchers.Main作为其协程。<br>CustomScope自定义使用的关键部分是取消它和生命周期的结束。 当不再需要启动协程的实体时，应使用CoroutineScope.cancel扩展函数。 它取消了所有可能仍在代表它运行的协程。</p>\n</blockquote>\n<p>简单介绍</p>\n<p>Kotlin 中的协程：本质上，协程是轻量级的线程（官方说法）。协程就是 Kotlin 提供的一套线程封装的 API；是一个线程框架；</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CoroutineScope</span><br><span class=\"line\">GlobalScope<span class=\"comment\">//它的生命周期会和 app 一致，且不能取消</span></span><br><span class=\"line\">MainScope</span><br><span class=\"line\">lifecycleScope(LifecycleCoroutineScope)</span><br><span class=\"line\">viewModelScope</span><br><span class=\"line\">launch&#123;&#125;</span><br><span class=\"line\">Continuation</span><br><span class=\"line\">CoroutineContext</span><br><span class=\"line\">runBlocking&#123;&#125;<span class=\"comment\">//线程阻塞的</span></span><br><span class=\"line\">withContext&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">suspend</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CoroutineScope(Dispatchers.IO).launch &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>协程的优势：</p>\n<ul>\n<li><p>基于kotlin，更方便；</p>\n</li>\n<li><p>用看起来同步的方式写出异步的代码（<code>非阻塞式挂起</code>）</p>\n</li>\n<li><p>更方便处理并发任务（多线程），实现复杂的业务逻辑</p>\n</li>\n<li><p>同一个代码块内，实现线程切换</p>\n</li>\n</ul>\n<p>在 Kotlin 中有这样一个语法糖：当函数的最后一个参数是 lambda 表达式时，可以将 lambda 写在括号外。这就是它的闭包原则。</p>\n<p>协程原理</p>\n<p>协程并发怎么处理，多个协程怎么保证数据安全</p>\n<p>协程lanuch有哪些参数</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\">在不阻塞当前线程的情况下启动一个新的协程，并将对协程的引用作为Job 返回。 当结果作业被取消时，协同程序被取消。</span></span><br><span class=\"line\"><span class=\"comment\">协程上下文继承自CoroutineScope 。 可以使用上下文参数指定其他上下文元素。 如果上下文没有任何调度程序或任何其他ContinuationInterceptor ，则使用Dispatchers.Default 。 父作业也从CoroutineScope继承，但也可以用相应的上下文元素覆盖。</span></span><br><span class=\"line\"><span class=\"comment\">默认情况下，协程会立即安排执行。 可以通过start参数指定其他启动选项。 有关详细信息，请参阅CoroutineStart 。 一个可选的启动参数可以设置为CoroutineStart.LAZY以延迟启动协程。 在这种情况下，协程Job以新状态创建。 它可以用start函数显式启动，并在第一次调用join 时隐式启动。</span></span><br><span class=\"line\"><span class=\"comment\">该协程中的未捕获异常默认取消上下文中的父作业（除非明确指定CoroutineExceptionHandler ），这意味着当launch与另一个协程的上下文一起使用时，任何未捕获的异常都会导致父协程的取消。</span></span><br><span class=\"line\"><span class=\"comment\">有关可用于新创建的协程的调试工具的描述，请参阅newCoroutineContext 。</span></span><br><span class=\"line\"><span class=\"comment\">参数：</span></span><br><span class=\"line\"><span class=\"comment\">context - 附加到CoroutineScope.coroutineContext协程的上下文。</span></span><br><span class=\"line\"><span class=\"comment\">start - 协程启动选项。 默认值为CoroutineStart.DEFAULT 。</span></span><br><span class=\"line\"><span class=\"comment\">block - 将在提供的范围的上下文中调用的协程代码</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> CoroutineScope.<span class=\"title\">launch</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    context: <span class=\"type\">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    start: <span class=\"type\">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    block: <span class=\"type\">suspend</span> <span class=\"type\">CoroutineScope</span>.() -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>: Job &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> newContext = newCoroutineContext(context)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> coroutine = <span class=\"keyword\">if</span> (start.isLazy)</span><br><span class=\"line\">        LazyStandaloneCoroutine(newContext, block) <span class=\"keyword\">else</span></span><br><span class=\"line\">        StandaloneCoroutine(newContext, active = <span class=\"literal\">true</span>)</span><br><span class=\"line\">    coroutine.start(start, coroutine, block)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> coroutine</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"挂起函数\"><a href=\"#挂起函数\" class=\"headerlink\" title=\"挂起函数\"></a><em><strong>挂起函数</strong></em></h4><p>它不会造成线程阻塞，但是会 <em>挂起</em> 协程，并且只能在协程中使用</p>\n<p>协程内的<code>delay(timeMillis: Long)</code>也是一个挂起函数，由suspend修饰</p>\n<p>协程挂起和恢复的实现方式</p>\n<p><a href=\"https://www.kotlincn.net/docs/reference/coroutines/basics.html\">https://www.kotlincn.net/docs/reference/coroutines/basics.html</a></p>\n<p><a href=\"https://github.com/Kotlin-zh/KEEP/blob/master/proposals/coroutines.md#%E5%8D%8F%E7%A8%8B%E6%A6%82%E8%BF%B0\">https://github.com/Kotlin-zh/KEEP/blob/master/proposals/coroutines.md#%E5%8D%8F%E7%A8%8B%E6%A6%82%E8%BF%B0</a></p>\n<p><a href=\"https://www.jianshu.com/p/92be626c594b\">https://www.jianshu.com/p/92be626c594b</a></p>\n"},{"title":"泛型","date":"2021-10-28T07:12:52.000Z","_content":"","source":"_posts/泛型.md","raw":"---\ntitle: 泛型\ndate: 2021-10-28 15:12:52\ntags:\n---\n","slug":"泛型","published":1,"updated":"2021-10-28T07:12:52.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepu002g7wgsg7rtadrc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"自定义View及动画","date":"2021-11-11T01:01:23.000Z","_content":"","source":"_posts/自定义View及动画.md","raw":"---\ntitle: 自定义View及动画\ndate: 2021-11-11 09:01:23\ntags:\n---\n","slug":"自定义View及动画","published":1,"updated":"2021-11-11T01:01:23.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepv002h7wgsav3u9oty","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"记录","date":"2021-09-26T08:58:08.000Z","_content":"\n- 对Activity的启动流程了解吗？\n- AMS在Android起到什么作用，简单分析下Android的源码\n- system_server为什么要在Zygote中启动，而不是由init直接启动呢?\n- 为什么要专门使用Zygote进程去孵化应用进程，而不是让system_server去孵化呢?\n- 能说说具体是怎么导致死锁的吗?\n- Zygote为什么不采用Binder机制进行IPC通信?\n\nhttps://github.com/BlackZhangJX/Android-Notes\n\n\n\n\n\n\n\n一个球。。。\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item>\n        <shape android:shape=\"oval\">\n            <size\n                android:width=\"100dp\"\n                android:height=\"100dp\" />\n            <gradient\n                android:centerColor=\"#000000\"\n                android:centerX=\"0.4\"\n                android:centerY=\"0.34\"\n                android:endColor=\"#5A5A5A\"\n                android:gradientRadius=\"100dp\"\n                android:startColor=\"#ffffff\"\n                android:type=\"radial\"/>\n        </shape>\n    </item>\n</layer-list>\n```\n\n![image-20211027144900936](image-20211027144900936.png)\n\n","source":"_posts/记录.md","raw":"---\ntitle: 记录\ndate: 2021-09-26 16:58:08\ntags: 草稿\ncategories: 随记\n---\n\n- 对Activity的启动流程了解吗？\n- AMS在Android起到什么作用，简单分析下Android的源码\n- system_server为什么要在Zygote中启动，而不是由init直接启动呢?\n- 为什么要专门使用Zygote进程去孵化应用进程，而不是让system_server去孵化呢?\n- 能说说具体是怎么导致死锁的吗?\n- Zygote为什么不采用Binder机制进行IPC通信?\n\nhttps://github.com/BlackZhangJX/Android-Notes\n\n\n\n\n\n\n\n一个球。。。\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item>\n        <shape android:shape=\"oval\">\n            <size\n                android:width=\"100dp\"\n                android:height=\"100dp\" />\n            <gradient\n                android:centerColor=\"#000000\"\n                android:centerX=\"0.4\"\n                android:centerY=\"0.34\"\n                android:endColor=\"#5A5A5A\"\n                android:gradientRadius=\"100dp\"\n                android:startColor=\"#ffffff\"\n                android:type=\"radial\"/>\n        </shape>\n    </item>\n</layer-list>\n```\n\n![image-20211027144900936](image-20211027144900936.png)\n\n","slug":"记录","published":1,"updated":"2021-10-27T06:49:18.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvw4iepw002i7wgs6bxy9wk7","content":"<ul>\n<li>对Activity的启动流程了解吗？</li>\n<li>AMS在Android起到什么作用，简单分析下Android的源码</li>\n<li>system_server为什么要在Zygote中启动，而不是由init直接启动呢?</li>\n<li>为什么要专门使用Zygote进程去孵化应用进程，而不是让system_server去孵化呢?</li>\n<li>能说说具体是怎么导致死锁的吗?</li>\n<li>Zygote为什么不采用Binder机制进行IPC通信?</li>\n</ul>\n<p><a href=\"https://github.com/BlackZhangJX/Android-Notes\">https://github.com/BlackZhangJX/Android-Notes</a></p>\n<p>一个球。。。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layer-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">&quot;oval&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">size</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:width</span>=<span class=\"string\">&quot;100dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:height</span>=<span class=\"string\">&quot;100dp&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:centerColor</span>=<span class=\"string\">&quot;#000000&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:centerX</span>=<span class=\"string\">&quot;0.4&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:centerY</span>=<span class=\"string\">&quot;0.34&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:endColor</span>=<span class=\"string\">&quot;#5A5A5A&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gradientRadius</span>=<span class=\"string\">&quot;100dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:startColor</span>=<span class=\"string\">&quot;#ffffff&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:type</span>=<span class=\"string\">&quot;radial&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/09/26/%E8%AE%B0%E5%BD%95/image-20211027144900936.png\" alt=\"image-20211027144900936\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>对Activity的启动流程了解吗？</li>\n<li>AMS在Android起到什么作用，简单分析下Android的源码</li>\n<li>system_server为什么要在Zygote中启动，而不是由init直接启动呢?</li>\n<li>为什么要专门使用Zygote进程去孵化应用进程，而不是让system_server去孵化呢?</li>\n<li>能说说具体是怎么导致死锁的吗?</li>\n<li>Zygote为什么不采用Binder机制进行IPC通信?</li>\n</ul>\n<p><a href=\"https://github.com/BlackZhangJX/Android-Notes\">https://github.com/BlackZhangJX/Android-Notes</a></p>\n<p>一个球。。。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layer-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">&quot;oval&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">size</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:width</span>=<span class=\"string\">&quot;100dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:height</span>=<span class=\"string\">&quot;100dp&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:centerColor</span>=<span class=\"string\">&quot;#000000&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:centerX</span>=<span class=\"string\">&quot;0.4&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:centerY</span>=<span class=\"string\">&quot;0.34&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:endColor</span>=<span class=\"string\">&quot;#5A5A5A&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gradientRadius</span>=<span class=\"string\">&quot;100dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:startColor</span>=<span class=\"string\">&quot;#ffffff&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:type</span>=<span class=\"string\">&quot;radial&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/09/26/%E8%AE%B0%E5%BD%95/image-20211027144900936.png\" alt=\"image-20211027144900936\"></p>\n"},{"title":"小程序","date":"2021-11-25T01:04:06.000Z","_content":"\n","source":"_posts/小程序.md","raw":"---\ntitle: 小程序\ndate: 2021-11-25 09:04:06\ntags: wechat\ncategories: wechat\n\n---\n\n","slug":"小程序","published":1,"updated":"2021-11-25T01:05:01.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwe9ztwn00001kgs6s3k4391","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"IPC","date":"2021-11-30T03:28:05.000Z","_content":"\n#### **进程间通信**\n\n实现进程间通信可以通过AIDL、广播、文件、ContentProvider等，而底层则离不开Binder机制。\n\n\n\n两个进程对应的是不同的内存区域\n\n- **1.Application对象会创建多次**\n- **2.静态成员不共用**\n- **3.同步锁失效**\n- **4.单例模式失效**\n- **5.数据传递的对象必须可序列化**\n\n\n\n\n\n\n\n\n\nAndroid 系统是基于 Linux 内核的，Linux 已经提供了管道、消息队列、共享内存和 Socket 等 IPC 机制。那为什么 Android 还要提供 Binder 来实现 IPC 呢？主要是基于**性能**、**稳定性**和**安全性**几方面的原因。\n\n![img](v2-30dce36be4e6617596b5fab96ef904c6_720w.jpg)\n","source":"_posts/IPC.md","raw":"---\ntitle: IPC\ndate: 2021-11-30 11:28:05\ntags: Android\ncategories: Android\n\n---\n\n#### **进程间通信**\n\n实现进程间通信可以通过AIDL、广播、文件、ContentProvider等，而底层则离不开Binder机制。\n\n\n\n两个进程对应的是不同的内存区域\n\n- **1.Application对象会创建多次**\n- **2.静态成员不共用**\n- **3.同步锁失效**\n- **4.单例模式失效**\n- **5.数据传递的对象必须可序列化**\n\n\n\n\n\n\n\n\n\nAndroid 系统是基于 Linux 内核的，Linux 已经提供了管道、消息队列、共享内存和 Socket 等 IPC 机制。那为什么 Android 还要提供 Binder 来实现 IPC 呢？主要是基于**性能**、**稳定性**和**安全性**几方面的原因。\n\n![img](v2-30dce36be4e6617596b5fab96ef904c6_720w.jpg)\n","slug":"IPC","published":1,"updated":"2021-12-03T03:05:17.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpt1jsw0000jggsghsx6a3b","content":"<h4 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a><strong>进程间通信</strong></h4><p>实现进程间通信可以通过AIDL、广播、文件、ContentProvider等，而底层则离不开Binder机制。</p>\n<p>两个进程对应的是不同的内存区域</p>\n<ul>\n<li><strong>1.Application对象会创建多次</strong></li>\n<li><strong>2.静态成员不共用</strong></li>\n<li><strong>3.同步锁失效</strong></li>\n<li><strong>4.单例模式失效</strong></li>\n<li><strong>5.数据传递的对象必须可序列化</strong></li>\n</ul>\n<p>Android 系统是基于 Linux 内核的，Linux 已经提供了管道、消息队列、共享内存和 Socket 等 IPC 机制。那为什么 Android 还要提供 Binder 来实现 IPC 呢？主要是基于<strong>性能</strong>、<strong>稳定性</strong>和<strong>安全性</strong>几方面的原因。</p>\n<p><img src=\"/2021/11/30/IPC/v2-30dce36be4e6617596b5fab96ef904c6_720w.jpg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a><strong>进程间通信</strong></h4><p>实现进程间通信可以通过AIDL、广播、文件、ContentProvider等，而底层则离不开Binder机制。</p>\n<p>两个进程对应的是不同的内存区域</p>\n<ul>\n<li><strong>1.Application对象会创建多次</strong></li>\n<li><strong>2.静态成员不共用</strong></li>\n<li><strong>3.同步锁失效</strong></li>\n<li><strong>4.单例模式失效</strong></li>\n<li><strong>5.数据传递的对象必须可序列化</strong></li>\n</ul>\n<p>Android 系统是基于 Linux 内核的，Linux 已经提供了管道、消息队列、共享内存和 Socket 等 IPC 机制。那为什么 Android 还要提供 Binder 来实现 IPC 呢？主要是基于<strong>性能</strong>、<strong>稳定性</strong>和<strong>安全性</strong>几方面的原因。</p>\n<p><img src=\"/2021/11/30/IPC/v2-30dce36be4e6617596b5fab96ef904c6_720w.jpg\" alt=\"img\"></p>\n"},{"title":"设计模式","date":"2021-11-25T02:59:54.000Z","_content":"\n#### **面向对象的六大原则**\n\n> 1. 单一职责原则\n>\n> 2. 开闭原则\n>\n> 3. 里氏替换原则\n>\n> 4. 依赖倒置原则\n>\n> 5. 接口隔离原则\n>\n> 6. 最小知识原则（迪米特原则）\n>\n> 六大原则主要强调的就是抽象（抽象类、接口）、单一职责、最小化、低耦合、可扩展；\n\n####  **设计模式**\n\n1. **单例模式**\n   1. 懒汉\n   2. 恶汉\n   3. ***双重判断锁DCL***\n   4. ***静态内部类***\n   5. 枚举\n   6. 容器存储\n2. 建造者模式 Builder\n\n","source":"_posts/设计模式.md","raw":"---\ntitle: 设计模式\ndate: 2021-11-25 10:59:54\ntags: java\ncategories: java\n\n---\n\n#### **面向对象的六大原则**\n\n> 1. 单一职责原则\n>\n> 2. 开闭原则\n>\n> 3. 里氏替换原则\n>\n> 4. 依赖倒置原则\n>\n> 5. 接口隔离原则\n>\n> 6. 最小知识原则（迪米特原则）\n>\n> 六大原则主要强调的就是抽象（抽象类、接口）、单一职责、最小化、低耦合、可扩展；\n\n####  **设计模式**\n\n1. **单例模式**\n   1. 懒汉\n   2. 恶汉\n   3. ***双重判断锁DCL***\n   4. ***静态内部类***\n   5. 枚举\n   6. 容器存储\n2. 建造者模式 Builder\n\n","slug":"设计模式","published":1,"updated":"2021-11-26T05:46:34.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpt1jt00001jggscigz3c1t","content":"<h4 id=\"面向对象的六大原则\"><a href=\"#面向对象的六大原则\" class=\"headerlink\" title=\"面向对象的六大原则\"></a><strong>面向对象的六大原则</strong></h4><blockquote>\n<ol>\n<li><p>单一职责原则</p>\n</li>\n<li><p>开闭原则</p>\n</li>\n<li><p>里氏替换原则</p>\n</li>\n<li><p>依赖倒置原则</p>\n</li>\n<li><p>接口隔离原则</p>\n</li>\n<li><p>最小知识原则（迪米特原则）</p>\n</li>\n</ol>\n<p>六大原则主要强调的就是抽象（抽象类、接口）、单一职责、最小化、低耦合、可扩展；</p>\n</blockquote>\n<h4 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a><strong>设计模式</strong></h4><ol>\n<li><strong>单例模式</strong><ol>\n<li>懒汉</li>\n<li>恶汉</li>\n<li><em><strong>双重判断锁DCL</strong></em></li>\n<li><em><strong>静态内部类</strong></em></li>\n<li>枚举</li>\n<li>容器存储</li>\n</ol>\n</li>\n<li>建造者模式 Builder</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"面向对象的六大原则\"><a href=\"#面向对象的六大原则\" class=\"headerlink\" title=\"面向对象的六大原则\"></a><strong>面向对象的六大原则</strong></h4><blockquote>\n<ol>\n<li><p>单一职责原则</p>\n</li>\n<li><p>开闭原则</p>\n</li>\n<li><p>里氏替换原则</p>\n</li>\n<li><p>依赖倒置原则</p>\n</li>\n<li><p>接口隔离原则</p>\n</li>\n<li><p>最小知识原则（迪米特原则）</p>\n</li>\n</ol>\n<p>六大原则主要强调的就是抽象（抽象类、接口）、单一职责、最小化、低耦合、可扩展；</p>\n</blockquote>\n<h4 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a><strong>设计模式</strong></h4><ol>\n<li><strong>单例模式</strong><ol>\n<li>懒汉</li>\n<li>恶汉</li>\n<li><em><strong>双重判断锁DCL</strong></em></li>\n<li><em><strong>静态内部类</strong></em></li>\n<li>枚举</li>\n<li>容器存储</li>\n</ol>\n</li>\n<li>建造者模式 Builder</li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/EACCES-permission-denied-access-usr-local-lib-node-modules/image-20210925105028907.png","slug":"image-20210925105028907.png","post":"ckvw4ieox00097wgsdyxtc0jn","modified":0,"renderable":0},{"_id":"source/_posts/Github-Hexo搭建笔记/image-20210918165516634.png","slug":"image-20210918165516634.png","post":"ckvw4iep3000j7wgsaz66cf80","modified":0,"renderable":0},{"_id":"source/_posts/Github-Hexo搭建笔记/image-20210923104949941.png","slug":"image-20210923104949941.png","post":"ckvw4iep3000j7wgsaz66cf80","modified":0,"renderable":0},{"_id":"source/_posts/Github-Hexo搭建笔记/image-20210923105008730.png","slug":"image-20210923105008730.png","post":"ckvw4iep3000j7wgsaz66cf80","modified":0,"renderable":0},{"_id":"source/_posts/TypeError-line-matchAll-is-not-a-function/image-20210925111618240.png","slug":"image-20210925111618240.png","post":"ckvw4iep9000v7wgsgqz8765k","modified":0,"renderable":0},{"_id":"source/_posts/androidview的绘制流程/源码流程图.png","slug":"源码流程图.png","post":"ckvw4iepc00137wgsbxxadxo5","modified":0,"renderable":0},{"_id":"source/_posts/git-github-com-Permission-denied-publickey/image-20210925123231078.png","slug":"image-20210925123231078.png","post":"ckvw4iepf001b7wgs4hep9iz6","modified":0,"renderable":0},{"_id":"source/_posts/hexo-YAMLException/image-20210924150934346.png","slug":"image-20210924150934346.png","post":"ckvw4iepg001e7wgsclda26ka","modified":0,"renderable":0},{"_id":"source/_posts/hexo-YAMLException/image-20210924150941054.png","slug":"image-20210924150941054.png","post":"ckvw4iepg001e7wgsclda26ka","modified":0,"renderable":0},{"_id":"source/_posts/hexo-YAMLException/image-20210924151455552.png","slug":"image-20210924151455552.png","post":"ckvw4iepg001e7wgsclda26ka","modified":0,"renderable":0},{"_id":"source/_posts/hexo-YAMLException/image-20210924151457951.png","slug":"image-20210924151457951.png","post":"ckvw4iepg001e7wgsclda26ka","modified":0,"renderable":0},{"_id":"source/_posts/记录/image-20211027144900936.png","slug":"image-20211027144900936.png","post":"ckvw4iepw002i7wgs6bxy9wk7","modified":0,"renderable":0},{"_id":"source/_posts/IPC/v2-30dce36be4e6617596b5fab96ef904c6_720w.jpg","post":"ckwpt1jsw0000jggsghsx6a3b","slug":"v2-30dce36be4e6617596b5fab96ef904c6_720w.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckvw4ieoo00017wgshrtbb4vf","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iep3000g7wgsfp6m1y0u"},{"post_id":"ckvw4ieos00037wgsbaz748hj","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iep5000l7wgse7el1wu8"},{"post_id":"ckvw4ieow00077wgs2ljd0qrv","category_id":"ckvw4iep2000f7wgsf9q42hkc","_id":"ckvw4iep9000s7wgs82pg4ntl"},{"post_id":"ckvw4iep4000k7wgs0i3tdwdw","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iepa000x7wgsfdihe5bd"},{"post_id":"ckvw4iep6000o7wgsgtlrcq8k","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iepc00107wgs6xla1qjm"},{"post_id":"ckvw4ieox00087wgsg0ny3vsk","category_id":"ckvw4iep6000m7wgscsgg20co","_id":"ckvw4iepd00157wgsa1sp8226"},{"post_id":"ckvw4iep7000q7wgsew13dyx5","category_id":"ckvw4iep6000m7wgscsgg20co","_id":"ckvw4iepe00187wgsd5ewajp6"},{"post_id":"ckvw4ieox00097wgsdyxtc0jn","category_id":"ckvw4iep9000t7wgs0wlg7px5","_id":"ckvw4iepg001d7wgs4d0a79yv"},{"post_id":"ckvw4iepb000y7wgsawx41keh","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4ieph001g7wgs2gj1c6ce"},{"post_id":"ckvw4iepc00137wgsbxxadxo5","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iepi001l7wgs4yfjb2wa"},{"post_id":"ckvw4iep0000d7wgs8d2lc4hr","category_id":"ckvw4iep9000t7wgs0wlg7px5","_id":"ckvw4iepj001o7wgs5ib54l0m"},{"post_id":"ckvw4iepd00167wgs1zrh8qtd","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iepn001t7wgsa9d3d0rx"},{"post_id":"ckvw4iep2000e7wgsd00neu64","category_id":"ckvw4iep6000m7wgscsgg20co","_id":"ckvw4iepo001w7wgs1xv6ev8j"},{"post_id":"ckvw4iepg001e7wgsclda26ka","category_id":"ckvw4iep9000t7wgs0wlg7px5","_id":"ckvw4iepp001z7wgs42mqdf6s"},{"post_id":"ckvw4ieph001i7wgs20pc8fz7","category_id":"ckvw4iep9000t7wgs0wlg7px5","_id":"ckvw4iepq00237wgsgbt27lo6"},{"post_id":"ckvw4iep3000j7wgsaz66cf80","category_id":"ckvw4iep9000t7wgs0wlg7px5","_id":"ckvw4iepq00257wgsgp99fuqb"},{"post_id":"ckvw4iepi001m7wgs1qkb2wia","category_id":"ckvw4iep9000t7wgs0wlg7px5","_id":"ckvw4iepq00277wgs1p6f33l2"},{"post_id":"ckvw4iepk001q7wgs4pwf93lj","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iepr00297wgs1n86deds"},{"post_id":"ckvw4iepf001b7wgs4hep9iz6","category_id":"ckvw4iepk001p7wgsfn7m6e9j","_id":"ckvw4iepr002b7wgs1ntz54q3"},{"post_id":"ckvw4iepp001x7wgs44xi0oqo","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckvw4iepr002d7wgsfraw9vh3"},{"post_id":"ckvw4iepo001u7wgs6vsv5st3","category_id":"ckvw4iepp00207wgs0b61ht7o","_id":"ckvw4iepr002f7wgs2s9k4lon"},{"post_id":"ckvw4iepw002i7wgs6bxy9wk7","category_id":"ckvw4iepx002j7wgs3gdy8jdp","_id":"ckvw4iepx002m7wgs7go9439a"},{"post_id":"ckwe9ztwn00001kgs6s3k4391","category_id":"ckwe9ztws00011kgs6oucbiql","_id":"ckwe9ztx100041kgsf4b30569"},{"post_id":"ckwpt1jsw0000jggsghsx6a3b","category_id":"ckvw4ieou00047wgsg3xz6h0n","_id":"ckwpt1jtc0005jggs102e4wl0"},{"post_id":"ckwpt1jt00001jggscigz3c1t","category_id":"ckwpt1jt30003jggs1cgm9p2e","_id":"ckwpt1jtd0007jggsgy625dr5"}],"PostTag":[{"post_id":"ckvw4ieoo00017wgshrtbb4vf","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iep0000c7wgs5j58gnfx"},{"post_id":"ckvw4ieos00037wgsbaz748hj","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iep3000i7wgsboeu0hz0"},{"post_id":"ckvw4ieow00077wgs2ljd0qrv","tag_id":"ckvw4iep3000h7wgsgpkff9lo","_id":"ckvw4iep7000p7wgs6ecx37y5"},{"post_id":"ckvw4iep4000k7wgs0i3tdwdw","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iep8000r7wgsei0ie0ms"},{"post_id":"ckvw4iep6000o7wgsgtlrcq8k","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iepa000w7wgs2ewa3gbv"},{"post_id":"ckvw4ieox00087wgsg0ny3vsk","tag_id":"ckvw4iep6000n7wgs26f4c3m3","_id":"ckvw4iepc000z7wgs2vvn22ux"},{"post_id":"ckvw4iep7000q7wgsew13dyx5","tag_id":"ckvw4iep6000n7wgs26f4c3m3","_id":"ckvw4iepd00147wgsbbn8cl5u"},{"post_id":"ckvw4iep9000v7wgsgqz8765k","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepe00177wgs7f3abttd"},{"post_id":"ckvw4ieox00097wgsdyxtc0jn","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepg001c7wgsenw69wou"},{"post_id":"ckvw4iepb000y7wgsawx41keh","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iepg001f7wgsaas88u43"},{"post_id":"ckvw4iepc00137wgsbxxadxo5","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iepi001k7wgshagweo30"},{"post_id":"ckvw4iep0000d7wgs8d2lc4hr","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepj001n7wgshtv9au5s"},{"post_id":"ckvw4iepd00167wgs1zrh8qtd","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iepn001s7wgse1sm6s5d"},{"post_id":"ckvw4iepg001e7wgsclda26ka","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepo001v7wgsbr9ne4qe"},{"post_id":"ckvw4iep2000e7wgsd00neu64","tag_id":"ckvw4iepe001a7wgs5lxihh0y","_id":"ckvw4iepp001y7wgs0e8n5afu"},{"post_id":"ckvw4ieph001i7wgs20pc8fz7","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepq00227wgs9zth3mcz"},{"post_id":"ckvw4iepi001m7wgs1qkb2wia","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepq00247wgs1vyz7i0v"},{"post_id":"ckvw4iep3000j7wgsaz66cf80","tag_id":"ckvw4iep9000u7wgsb9keco7u","_id":"ckvw4iepq00267wgs5tvyg8xr"},{"post_id":"ckvw4iepk001q7wgs4pwf93lj","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iepr00287wgshb545b83"},{"post_id":"ckvw4iepf001b7wgs4hep9iz6","tag_id":"ckvw4iepn001r7wgsbvdtbzpi","_id":"ckvw4iepr002a7wgs61k98xp7"},{"post_id":"ckvw4iepp001x7wgs44xi0oqo","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckvw4iepr002c7wgs0lbe20aw"},{"post_id":"ckvw4iepo001u7wgs6vsv5st3","tag_id":"ckvw4iepq00217wgsf996ggt0","_id":"ckvw4iepr002e7wgs2iksetad"},{"post_id":"ckvw4iepw002i7wgs6bxy9wk7","tag_id":"ckvw4iepx002k7wgs5tvhaibm","_id":"ckvw4iepx002l7wgs2q2tckjc"},{"post_id":"ckwe9ztwn00001kgs6s3k4391","tag_id":"ckwe9ztwz00021kgsb9sggs8u","_id":"ckwe9ztx100031kgs0nu96c1q"},{"post_id":"ckwpt1jsw0000jggsghsx6a3b","tag_id":"ckvw4ieov00057wgshihi2xb3","_id":"ckwpt1jt20002jggsbm5ian2w"},{"post_id":"ckwpt1jt00001jggscigz3c1t","tag_id":"ckwpt1jtb0004jggseh197ck5","_id":"ckwpt1jtc0006jggs1mej42w2"}],"Tag":[{"name":"Android","_id":"ckvw4ieov00057wgshihi2xb3"},{"name":"Compose","_id":"ckvw4iep3000h7wgsgpkff9lo"},{"name":"Kotlin","_id":"ckvw4iep6000n7wgs26f4c3m3"},{"name":"hexo","_id":"ckvw4iep9000u7wgsb9keco7u"},{"name":"Koltin","_id":"ckvw4iepe001a7wgs5lxihh0y"},{"name":"git","_id":"ckvw4iepn001r7wgsbvdtbzpi"},{"name":"RN","_id":"ckvw4iepq00217wgsf996ggt0"},{"name":"草稿","_id":"ckvw4iepx002k7wgs5tvhaibm"},{"name":"wechat","_id":"ckwe9ztwz00021kgsb9sggs8u"},{"name":"java","_id":"ckwpt1jtb0004jggseh197ck5"}]}}
>>>>>>> 6199c0e553f074e69bdfc5c53d1db4b5b5915554
